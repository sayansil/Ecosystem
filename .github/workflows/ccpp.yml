name: build

on:
  push:
      tags:
      - '*'
      branches:
      - flatbuffer
      paths:
      - 'Cpp/**'
      - '.github/workflows/ccpp.yml'
  pull_request:
      tags:
      - '*'
      branches:
      - flatbuffer
      paths:
      - 'Cpp/**'
      - '.github/workflows/ccpp.yml'
  workflow_dispatch:

jobs:

  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/')
    runs-on: ubuntu-latest
    steps:

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Ecosystem Simulator ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: true
        prerelease: true

    - name: Output Release URL
      id: output_release_url
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

    - name: Save Release URL
      id: save_release_url
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [dbg, rel]
        include:
          - compiler: gcc
            dependencies: 'ninja-build'
          - compiler: clang
            dependencies: 'ninja-build clang-12'
    steps:
    - uses: actions/checkout@v2

    - name: Prepare for Build
      id: prepare
      run: |
        sudo apt install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      run: |
        cd Cpp
        cmake --preset lin-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Build
      id: build
      run: |
        cd Cpp
        cmake --build --preset lin-${{ matrix.compiler }}-${{ matrix.build_type }}
        zip -r output_${{ matrix.compiler }}.zip build/lin-${{ matrix.compiler }}-${{ matrix.build_type }}/RandomTests

    - name: Load release url
      id: load_release_url
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      uses: actions/download-artifact@v1
      with:
        name: release_url

    - name: Get release info
      id: get_release_info
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      run: |
        echo ::set-output name=file_name::output_${{ matrix.compiler }}
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}

    - name: Upload Release Asset
      id: upload_release_asset
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./Cpp/${{ steps.get_release_info.outputs.file_name }}.zip
        asset_name: ecosystem_example_linux_${{ matrix.compiler }}.zip
        asset_content_type: application/zip

  build-macos:
    name: Build on MacOS
    runs-on: macos-11
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [dbg, rel]
        include:
          - compiler: gcc
            dependencies: 'gcc ninja'
          - compiler: clang
            dependencies: 'ninja'
    steps:
    - uses: actions/checkout@v2

    - name: Prepare for Build
      id: prepare
      run: |
        brew install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      run: |
        cd Cpp
        cmake --preset osx-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Build
      id: build
      run: |
        cd Cpp
        cmake --build --preset osx-${{ matrix.compiler }}-${{ matrix.build_type }}
        zip -r output_${{ matrix.compiler }}.zip build/osx-${{ matrix.compiler }}-${{ matrix.build_type }}/RandomTests

    - name: Load release url
      id: load_release_url
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      uses: actions/download-artifact@v1
      with:
        name: release_url

    - name: Get release info
      id: get_release_info
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      run: |
        echo ::set-output name=file_name::output_${{ matrix.compiler }}
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}

    - name: Upload Release Asset
      id: upload_release_asset
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./Cpp/${{ steps.get_release_info.outputs.file_name }}.zip
        asset_name: ecosystem_example_osx_${{ matrix.compiler }}.zip
        asset_content_type: application/zip

  build-windows:
    name: Build on Windows
    runs-on: windows-2022
    strategy:
      matrix:
        compiler: [msvc]
        build_type: [dbg, rel]
        include:
          - compiler: msvc
            dependencies: 'ninja'
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1.10.0

    - name: Prepare for Build
      id: prepare
      run: |
        choco install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      run: |
        cd Cpp
        cmake --preset win-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Build
      id: build
      run: |
        cd Cpp
        cmake --build --preset win-${{ matrix.compiler }}-${{ matrix.build_type }}
        Compress-Archive -Path build\win-${{ matrix.compiler }}-${{ matrix.build_type }}\RandomTests -DestinationPath output_${{ matrix.compiler }}

    - name: Load release url
      id: load_release_url
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      uses: actions/download-artifact@v1
      with:
        name: release_url

    - name: Get release info
      id: get_release_info
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      run: |
        echo ::set-output name=file_name::output_${{ matrix.compiler }}
        $value = & "cat release_url\release_url.txt" 2>&1
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}

    - name: Upload Release Asset
      id: upload_release_asset
      if: contains(github.ref, 'tags/') && matrix.build_type == 'rel'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./Cpp/${{ steps.get_release_info.outputs.file_name }}.zip
        asset_name: ecosystem_example_win_${{ matrix.compiler }}.zip
        asset_content_type: application/zip
