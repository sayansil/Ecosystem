name: build

on:
  push:
      branches:
      - master
      paths:
      - 'simulation/**'
      - '.github/workflows/build.yml'
  pull_request:
      branches:
      - master
  workflow_dispatch:
    inputs:
      keep_artifacts:
        type: boolean
        description: Do you want to keep the build artifacts?
        default: false
        required: true

jobs:

  build-linux:
    name: Build on Linux
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [dbg, rel]
        include:
          - compiler: gcc
            dependencies: 'ninja-build'
          - compiler: clang
            dependencies: 'ninja-build clang-14'
    steps:
    - uses: actions/checkout@v3

    - name: Prepare for Build
      id: prepare
      run: |
        sudo apt install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      run: |
        cd simulation
        cmake --preset lin-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Build
      id: build
      run: |
        cd simulation
        cmake --build --preset lin-${{ matrix.compiler }}-${{ matrix.build_type }}
        zip -r output_linux_${{ matrix.compiler }}.zip build/lin-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Save release asset
      id: save_release_asset
      if: ${{ matrix.build_type == 'rel' && github.event.inputs.keep_artifacts }}
      uses: actions/upload-artifact@v1
      with:
        name: output_linux_${{ matrix.compiler }}
        path: simulation/output_linux_${{ matrix.compiler }}.zip

  build-macos:
    name: Build on MacOS
    if: ${{ always() }}
    runs-on: macos-12
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [dbg, rel]
        include:
          - compiler: gcc
            dependencies: 'gcc ninja'
          - compiler: clang
            dependencies: 'ninja'
    steps:
    - uses: actions/checkout@v3

    - name: Prepare for Build
      id: prepare
      run: |
        brew install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      run: |
        cd simulation
        cmake --preset osx-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Build
      id: build
      run: |
        cd simulation
        cmake --build --preset osx-${{ matrix.compiler }}-${{ matrix.build_type }}
        zip -r output_macos_${{ matrix.compiler }}.zip build/osx-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Save release asset
      id: save_release_asset
      if: ${{ matrix.build_type == 'rel' && github.event.inputs.keep_artifacts }}
      uses: actions/upload-artifact@v1
      with:
        name: output_macos_${{ matrix.compiler }}
        path: simulation/output_macos_${{ matrix.compiler }}.zip

  build-windows:
    name: Build on Windows
    if: ${{ always() }}
    runs-on: windows-2022
    strategy:
      matrix:
        compiler: [msvc]
        build_type: [dbg, rel]
        include:
          - compiler: msvc
            dependencies: 'ninja'
    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1.10.0

    - name: Prepare for Build
      id: prepare
      run: |
        choco install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      run: |
        cd simulation
        cmake --preset win-${{ matrix.compiler }}-${{ matrix.build_type }}

    - name: Build
      id: build
      run: |
        cd simulation
        cmake --build --preset win-${{ matrix.compiler }}-${{ matrix.build_type }}
        Compress-Archive -Path build\win-${{ matrix.compiler }}-${{ matrix.build_type }} -DestinationPath output_windows_${{ matrix.compiler }}

    - name: Save release asset
      id: save_release_asset
      if: ${{ matrix.build_type == 'rel' && github.event.inputs.keep_artifacts }}
      uses: actions/upload-artifact@v1
      with:
        name: output_windows_${{ matrix.compiler }}
        path: simulation/output_windows_${{ matrix.compiler }}.zip
