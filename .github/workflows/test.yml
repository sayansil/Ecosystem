name: test

on:
  pull_request:
      branches:
      - master
      paths:
      - 'simulation/**'
      - '.github/workflows/test.yml'

jobs:

  test-linux:
    name: Test on Linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [dbg, rel]
        include:
          - compiler: gcc
            dependencies: 'ninja-build'
          - compiler: clang
            dependencies: 'ninja-build clang-12'
    steps:
    - uses: actions/checkout@v3

    - uses: fountainhead/action-wait-for-check@v1.1.0
      id: wait_for_build
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build-linux
        ref: ${{ github.event.pull_request.head.sha || github.sha }}


    - uses: actions/cache/restore@v3
      id: cache_load_content
      with:
        path: simulation/build/.fetchcontent_cache
        key: fetchcontent-lin-${{ github.event.pull_request.head.sha }}
    - uses: actions/cache/restore@v3
      id: cache_load_build
      with:
        path: simulation/build/lin-${{ matrix.compiler }}-${{ matrix.build_type }}
        key: build-lin-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ github.event.pull_request.head.sha }}

    - name: Prepare for Build
      id: prepare
      run: |
        sudo apt install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      if: steps.cache_load_build.outputs.cache-hit != 'true'
      run: |
        cd simulation
        cmake --preset lin-${{ matrix.compiler }}-${{ matrix.build_type }}

    - uses: actions/cache/save@v3
      id: cache_save_content
      if: always()
      with:
        path: simulation/build/.fetchcontent_cache
        key: fetchcontent-lin-${{ github.event.pull_request.head.sha }}

    - name: Build
      id: build
      if: steps.cache_load_build.outputs.cache-hit != 'true'
      run: |
        cd simulation
        cmake --build --preset lin-${{ matrix.compiler }}-${{ matrix.build_type }}

    - uses: actions/cache/save@v3
      id: cache_save_build
      if: always()
      with:
        path: simulation/build/lin-${{ matrix.compiler }}-${{ matrix.build_type }}
        key: build-lin-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ github.event.pull_request.head.sha }}

    - name: Run Tests
      id: run_tests
      run: |
        export ECOSYSTEM_ROOT=`pwd`
        cd simulation
        ctest --preset test-lin-${{ matrix.compiler }}-${{ matrix.build_type }}

  test-macos:
    name: Test on MacOS
    runs-on: macos-12
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [dbg, rel]
        include:
          - compiler: gcc
            dependencies: 'gcc ninja'
          - compiler: clang
            dependencies: 'ninja'
    steps:
    - uses: actions/checkout@v3

    - uses: fountainhead/action-wait-for-check@v1.1.0
      id: wait_for_build
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build-macos
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - uses: actions/cache/restore@v3
      id: cache_load_content
      with:
        path: simulation/build/.fetchcontent_cache
        key: fetchcontent-osx-${{ github.event.pull_request.head.sha }}
    - uses: actions/cache/restore@v3
      id: cache_load_build
      with:
        path: simulation/build/osx-${{ matrix.compiler }}-${{ matrix.build_type }}
        key: build-osx-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ github.event.pull_request.head.sha }}

    - name: Prepare for Build
      id: prepare
      run: |
        brew install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      if: steps.cache_load_build.outputs.cache-hit != 'true'
      run: |
        cd simulation
        cmake --preset osx-${{ matrix.compiler }}-${{ matrix.build_type }}

    - uses: actions/cache/save@v3
      id: cache_save_content
      if: always()
      with:
        path: simulation/build/.fetchcontent_cache
        key: fetchcontent-osx-${{ github.event.pull_request.head.sha }}

    - name: Build
      id: build
      if: steps.cache_load_build.outputs.cache-hit != 'true'
      run: |
        cd simulation
        cmake --build --preset osx-${{ matrix.compiler }}-${{ matrix.build_type }}

    - uses: actions/cache/save@v3
      id: cache_save_build
      if: always()
      with:
        path: simulation/build/osx-${{ matrix.compiler }}-${{ matrix.build_type }}
        key: build-osx-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ github.event.pull_request.head.sha }}

    - name: Run Tests
      id: run_tests
      run: |
        export ECOSYSTEM_ROOT=`pwd`
        cd simulation
        ctest --preset test-osx-${{ matrix.compiler }}-${{ matrix.build_type }}

  test-windows:
    name: Test on Windows
    runs-on: windows-2022
    strategy:
      matrix:
        compiler: [msvc]
        build_type: [dbg, rel]
        include:
          - compiler: msvc
            dependencies: 'ninja'
    steps:
    - uses: actions/checkout@v3

    - uses: fountainhead/action-wait-for-check@v1.1.0
      id: wait_for_build
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build-windows
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - uses: ilammy/msvc-dev-cmd@v1.10.0
    - uses: actions/cache/restore@v3
      id: cache_load_content
      with:
        path: simulation/build/.fetchcontent_cache
        key: fetchcontent-win-${{ github.event.pull_request.head.sha }}
    - uses: actions/cache/restore@v3
      id: cache_load_build
      with:
        path: simulation/build/win-${{ matrix.compiler }}-${{ matrix.build_type }}
        key: build-win-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ github.event.pull_request.head.sha }}

    - name: Prepare for Build
      id: prepare
      run: |
        choco install ${{ matrix.dependencies }}

    - name: Configure for Build
      id: configure
      if: steps.cache_load_build.outputs.cache-hit != 'true'
      run: |
        cd simulation
        cmake --preset win-${{ matrix.compiler }}-${{ matrix.build_type }}

    - uses: actions/cache/save@v3
      id: cache_save_content
      if: always()
      with:
        path: simulation/build/.fetchcontent_cache
        key: fetchcontent-win-${{ github.event.pull_request.head.sha }}

    - name: Build
      id: build
      if: steps.cache_load_build.outputs.cache-hit != 'true'
      run: |
        cd simulation
        cmake --build --preset win-${{ matrix.compiler }}-${{ matrix.build_type }}

    - uses: actions/cache/save@v3
      id: cache_save_build
      if: always()
      with:
        path: simulation/build/win-${{ matrix.compiler }}-${{ matrix.build_type }}
        key: build-win-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ github.event.pull_request.head.sha }}

    - name: Run Tests
      id: run_tests
      run: |
        $env:ECOSYSTEM_ROOT = ($pwd).path
        cd simulation
        ctest --preset test-win-${{ matrix.compiler }}-${{ matrix.build_type }}
