// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SPECIESREPORT_VISUALISATION_H_
#define FLATBUFFERS_GENERATED_SPECIESREPORT_VISUALISATION_H_

#include "flatbuffers/flatbuffers.h"

namespace Visualisation {

struct SinglePlot;
struct SinglePlotBuilder;

struct MultiPlot;
struct MultiPlotBuilder;

struct SpeciesReport;
struct SpeciesReportBuilder;

inline const flatbuffers::TypeTable *SinglePlotTypeTable();

inline const flatbuffers::TypeTable *MultiPlotTypeTable();

inline const flatbuffers::TypeTable *SpeciesReportTypeTable();

struct SinglePlot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SinglePlotBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SinglePlotTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_X = 6,
    VT_Y = 8,
    VT_XLABEL = 10,
    VT_YLABEL = 12,
    VT_XMIN = 14,
    VT_XMAX = 16,
    VT_YMIN = 18,
    VT_YMAX = 20
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  flatbuffers::String *mutable_title() {
    return GetPointer<flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::Vector<float> *x() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_X);
  }
  flatbuffers::Vector<float> *mutable_x() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_X);
  }
  const flatbuffers::Vector<float> *y() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_Y);
  }
  flatbuffers::Vector<float> *mutable_y() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_Y);
  }
  const flatbuffers::String *xlabel() const {
    return GetPointer<const flatbuffers::String *>(VT_XLABEL);
  }
  flatbuffers::String *mutable_xlabel() {
    return GetPointer<flatbuffers::String *>(VT_XLABEL);
  }
  const flatbuffers::String *ylabel() const {
    return GetPointer<const flatbuffers::String *>(VT_YLABEL);
  }
  flatbuffers::String *mutable_ylabel() {
    return GetPointer<flatbuffers::String *>(VT_YLABEL);
  }
  float xmin() const {
    return GetField<float>(VT_XMIN, 0.0f);
  }
  bool mutate_xmin(float _xmin = 0.0f) {
    return SetField<float>(VT_XMIN, _xmin, 0.0f);
  }
  float xmax() const {
    return GetField<float>(VT_XMAX, 0.0f);
  }
  bool mutate_xmax(float _xmax = 0.0f) {
    return SetField<float>(VT_XMAX, _xmax, 0.0f);
  }
  float ymin() const {
    return GetField<float>(VT_YMIN, 0.0f);
  }
  bool mutate_ymin(float _ymin = 0.0f) {
    return SetField<float>(VT_YMIN, _ymin, 0.0f);
  }
  float ymax() const {
    return GetField<float>(VT_YMAX, 0.0f);
  }
  bool mutate_ymax(float _ymax = 0.0f) {
    return SetField<float>(VT_YMAX, _ymax, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_X) &&
           verifier.VerifyVector(x()) &&
           VerifyOffset(verifier, VT_Y) &&
           verifier.VerifyVector(y()) &&
           VerifyOffset(verifier, VT_XLABEL) &&
           verifier.VerifyString(xlabel()) &&
           VerifyOffset(verifier, VT_YLABEL) &&
           verifier.VerifyString(ylabel()) &&
           VerifyField<float>(verifier, VT_XMIN) &&
           VerifyField<float>(verifier, VT_XMAX) &&
           VerifyField<float>(verifier, VT_YMIN) &&
           VerifyField<float>(verifier, VT_YMAX) &&
           verifier.EndTable();
  }
};

struct SinglePlotBuilder {
  typedef SinglePlot Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(SinglePlot::VT_TITLE, title);
  }
  void add_x(flatbuffers::Offset<flatbuffers::Vector<float>> x) {
    fbb_.AddOffset(SinglePlot::VT_X, x);
  }
  void add_y(flatbuffers::Offset<flatbuffers::Vector<float>> y) {
    fbb_.AddOffset(SinglePlot::VT_Y, y);
  }
  void add_xlabel(flatbuffers::Offset<flatbuffers::String> xlabel) {
    fbb_.AddOffset(SinglePlot::VT_XLABEL, xlabel);
  }
  void add_ylabel(flatbuffers::Offset<flatbuffers::String> ylabel) {
    fbb_.AddOffset(SinglePlot::VT_YLABEL, ylabel);
  }
  void add_xmin(float xmin) {
    fbb_.AddElement<float>(SinglePlot::VT_XMIN, xmin, 0.0f);
  }
  void add_xmax(float xmax) {
    fbb_.AddElement<float>(SinglePlot::VT_XMAX, xmax, 0.0f);
  }
  void add_ymin(float ymin) {
    fbb_.AddElement<float>(SinglePlot::VT_YMIN, ymin, 0.0f);
  }
  void add_ymax(float ymax) {
    fbb_.AddElement<float>(SinglePlot::VT_YMAX, ymax, 0.0f);
  }
  explicit SinglePlotBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SinglePlot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SinglePlot>(end);
    return o;
  }
};

inline flatbuffers::Offset<SinglePlot> CreateSinglePlot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> x = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> y = 0,
    flatbuffers::Offset<flatbuffers::String> xlabel = 0,
    flatbuffers::Offset<flatbuffers::String> ylabel = 0,
    float xmin = 0.0f,
    float xmax = 0.0f,
    float ymin = 0.0f,
    float ymax = 0.0f) {
  SinglePlotBuilder builder_(_fbb);
  builder_.add_ymax(ymax);
  builder_.add_ymin(ymin);
  builder_.add_xmax(xmax);
  builder_.add_xmin(xmin);
  builder_.add_ylabel(ylabel);
  builder_.add_xlabel(xlabel);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_title(title);
  return builder_.Finish();
}

struct SinglePlot::Traits {
  using type = SinglePlot;
  static auto constexpr Create = CreateSinglePlot;
};

inline flatbuffers::Offset<SinglePlot> CreateSinglePlotDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const std::vector<float> *x = nullptr,
    const std::vector<float> *y = nullptr,
    const char *xlabel = nullptr,
    const char *ylabel = nullptr,
    float xmin = 0.0f,
    float xmax = 0.0f,
    float ymin = 0.0f,
    float ymax = 0.0f) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto x__ = x ? _fbb.CreateVector<float>(*x) : 0;
  auto y__ = y ? _fbb.CreateVector<float>(*y) : 0;
  auto xlabel__ = xlabel ? _fbb.CreateString(xlabel) : 0;
  auto ylabel__ = ylabel ? _fbb.CreateString(ylabel) : 0;
  return Visualisation::CreateSinglePlot(
      _fbb,
      title__,
      x__,
      y__,
      xlabel__,
      ylabel__,
      xmin,
      xmax,
      ymin,
      ymax);
}

struct MultiPlot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MultiPlotBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MultiPlotTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_PLOTS = 6
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  flatbuffers::String *mutable_title() {
    return GetPointer<flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Visualisation::SinglePlot>> *plots() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Visualisation::SinglePlot>> *>(VT_PLOTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<Visualisation::SinglePlot>> *mutable_plots() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Visualisation::SinglePlot>> *>(VT_PLOTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_PLOTS) &&
           verifier.VerifyVector(plots()) &&
           verifier.VerifyVectorOfTables(plots()) &&
           verifier.EndTable();
  }
};

struct MultiPlotBuilder {
  typedef MultiPlot Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(MultiPlot::VT_TITLE, title);
  }
  void add_plots(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Visualisation::SinglePlot>>> plots) {
    fbb_.AddOffset(MultiPlot::VT_PLOTS, plots);
  }
  explicit MultiPlotBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MultiPlot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MultiPlot>(end);
    return o;
  }
};

inline flatbuffers::Offset<MultiPlot> CreateMultiPlot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Visualisation::SinglePlot>>> plots = 0) {
  MultiPlotBuilder builder_(_fbb);
  builder_.add_plots(plots);
  builder_.add_title(title);
  return builder_.Finish();
}

struct MultiPlot::Traits {
  using type = MultiPlot;
  static auto constexpr Create = CreateMultiPlot;
};

inline flatbuffers::Offset<MultiPlot> CreateMultiPlotDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const std::vector<flatbuffers::Offset<Visualisation::SinglePlot>> *plots = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto plots__ = plots ? _fbb.CreateVector<flatbuffers::Offset<Visualisation::SinglePlot>>(*plots) : 0;
  return Visualisation::CreateMultiPlot(
      _fbb,
      title__,
      plots__);
}

struct SpeciesReport FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SpeciesReportBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SpeciesReportTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_SPECIES = 6,
    VT_DATE = 8,
    VT_PLOTS = 10
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  flatbuffers::String *mutable_title() {
    return GetPointer<flatbuffers::String *>(VT_TITLE);
  }
  bool KeyCompareLessThan(const SpeciesReport *o) const {
    return *title() < *o->title();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(title()->c_str(), val);
  }
  const flatbuffers::String *species() const {
    return GetPointer<const flatbuffers::String *>(VT_SPECIES);
  }
  flatbuffers::String *mutable_species() {
    return GetPointer<flatbuffers::String *>(VT_SPECIES);
  }
  const flatbuffers::String *date() const {
    return GetPointer<const flatbuffers::String *>(VT_DATE);
  }
  flatbuffers::String *mutable_date() {
    return GetPointer<flatbuffers::String *>(VT_DATE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Visualisation::MultiPlot>> *plots() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Visualisation::MultiPlot>> *>(VT_PLOTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<Visualisation::MultiPlot>> *mutable_plots() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Visualisation::MultiPlot>> *>(VT_PLOTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffsetRequired(verifier, VT_SPECIES) &&
           verifier.VerifyString(species()) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(date()) &&
           VerifyOffset(verifier, VT_PLOTS) &&
           verifier.VerifyVector(plots()) &&
           verifier.VerifyVectorOfTables(plots()) &&
           verifier.EndTable();
  }
};

struct SpeciesReportBuilder {
  typedef SpeciesReport Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(SpeciesReport::VT_TITLE, title);
  }
  void add_species(flatbuffers::Offset<flatbuffers::String> species) {
    fbb_.AddOffset(SpeciesReport::VT_SPECIES, species);
  }
  void add_date(flatbuffers::Offset<flatbuffers::String> date) {
    fbb_.AddOffset(SpeciesReport::VT_DATE, date);
  }
  void add_plots(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Visualisation::MultiPlot>>> plots) {
    fbb_.AddOffset(SpeciesReport::VT_PLOTS, plots);
  }
  explicit SpeciesReportBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SpeciesReport> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SpeciesReport>(end);
    fbb_.Required(o, SpeciesReport::VT_TITLE);
    fbb_.Required(o, SpeciesReport::VT_SPECIES);
    return o;
  }
};

inline flatbuffers::Offset<SpeciesReport> CreateSpeciesReport(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> species = 0,
    flatbuffers::Offset<flatbuffers::String> date = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Visualisation::MultiPlot>>> plots = 0) {
  SpeciesReportBuilder builder_(_fbb);
  builder_.add_plots(plots);
  builder_.add_date(date);
  builder_.add_species(species);
  builder_.add_title(title);
  return builder_.Finish();
}

struct SpeciesReport::Traits {
  using type = SpeciesReport;
  static auto constexpr Create = CreateSpeciesReport;
};

inline flatbuffers::Offset<SpeciesReport> CreateSpeciesReportDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const char *species = nullptr,
    const char *date = nullptr,
    const std::vector<flatbuffers::Offset<Visualisation::MultiPlot>> *plots = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto species__ = species ? _fbb.CreateString(species) : 0;
  auto date__ = date ? _fbb.CreateString(date) : 0;
  auto plots__ = plots ? _fbb.CreateVector<flatbuffers::Offset<Visualisation::MultiPlot>>(*plots) : 0;
  return Visualisation::CreateSpeciesReport(
      _fbb,
      title__,
      species__,
      date__,
      plots__);
}

inline const flatbuffers::TypeTable *SinglePlotTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "title",
    "x",
    "y",
    "xlabel",
    "ylabel",
    "xmin",
    "xmax",
    "ymin",
    "ymax"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 9, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *MultiPlotTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Visualisation::SinglePlotTypeTable
  };
  static const char * const names[] = {
    "title",
    "plots"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *SpeciesReportTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Visualisation::MultiPlotTypeTable
  };
  static const char * const names[] = {
    "title",
    "species",
    "date",
    "plots"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const Visualisation::SpeciesReport *GetSpeciesReport(const void *buf) {
  return flatbuffers::GetRoot<Visualisation::SpeciesReport>(buf);
}

inline const Visualisation::SpeciesReport *GetSizePrefixedSpeciesReport(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Visualisation::SpeciesReport>(buf);
}

inline SpeciesReport *GetMutableSpeciesReport(void *buf) {
  return flatbuffers::GetMutableRoot<SpeciesReport>(buf);
}

inline Visualisation::SpeciesReport *GetMutableSizePrefixedSpeciesReport(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<Visualisation::SpeciesReport>(buf);
}

inline bool VerifySpeciesReportBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Visualisation::SpeciesReport>(nullptr);
}

inline bool VerifySizePrefixedSpeciesReportBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Visualisation::SpeciesReport>(nullptr);
}

inline void FinishSpeciesReportBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Visualisation::SpeciesReport> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSpeciesReportBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Visualisation::SpeciesReport> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Visualisation

#endif  // FLATBUFFERS_GENERATED_SPECIESREPORT_VISUALISATION_H_
