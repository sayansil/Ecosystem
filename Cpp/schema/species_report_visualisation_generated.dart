// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library visualisation;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SinglePlot {
  SinglePlot._(this._bc, this._bcOffset);
  factory SinglePlot(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SinglePlot> reader = _SinglePlotReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<double>? get x => const fb.ListReader<double>(fb.Float32Reader()).vTableGetNullable(_bc, _bcOffset, 6);
  List<double>? get y => const fb.ListReader<double>(fb.Float32Reader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SinglePlot{title: $title, x: $x, y: $y}';
  }

  SinglePlotT unpack() => SinglePlotT(
      title: title,
      x: const fb.ListReader<double>(fb.Float32Reader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      y: const fb.ListReader<double>(fb.Float32Reader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 8));

  static int pack(fb.Builder fbBuilder, SinglePlotT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SinglePlotT implements fb.Packable {
  String? title;
  List<double>? x;
  List<double>? y;

  SinglePlotT({
      this.title,
      this.x,
      this.y});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? xOffset = x == null ? null
        : fbBuilder.writeListFloat32(x!);
    final int? yOffset = y == null ? null
        : fbBuilder.writeListFloat32(y!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, xOffset);
    fbBuilder.addOffset(2, yOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SinglePlotT{title: $title, x: $x, y: $y}';
  }
}

class _SinglePlotReader extends fb.TableReader<SinglePlot> {
  const _SinglePlotReader();

  @override
  SinglePlot createObject(fb.BufferContext bc, int offset) => 
    SinglePlot._(bc, offset);
}

class SinglePlotBuilder {
  SinglePlotBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addXOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addYOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SinglePlotObjectBuilder extends fb.ObjectBuilder {
  final String? _title;
  final List<double>? _x;
  final List<double>? _y;

  SinglePlotObjectBuilder({
    String? title,
    List<double>? x,
    List<double>? y,
  })
      : _title = title,
        _x = x,
        _y = y;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? xOffset = _x == null ? null
        : fbBuilder.writeListFloat32(_x!);
    final int? yOffset = _y == null ? null
        : fbBuilder.writeListFloat32(_y!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, xOffset);
    fbBuilder.addOffset(2, yOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MultiPlot {
  MultiPlot._(this._bc, this._bcOffset);
  factory MultiPlot(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MultiPlot> reader = _MultiPlotReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get xlabel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get ylabel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<SinglePlot>? get plots => const fb.ListReader<SinglePlot>(SinglePlot.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'MultiPlot{title: $title, xlabel: $xlabel, ylabel: $ylabel, plots: $plots}';
  }

  MultiPlotT unpack() => MultiPlotT(
      title: title,
      xlabel: xlabel,
      ylabel: ylabel,
      plots: plots?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, MultiPlotT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MultiPlotT implements fb.Packable {
  String? title;
  String? xlabel;
  String? ylabel;
  List<SinglePlotT>? plots;

  MultiPlotT({
      this.title,
      this.xlabel,
      this.ylabel,
      this.plots});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? xlabelOffset = xlabel == null ? null
        : fbBuilder.writeString(xlabel!);
    final int? ylabelOffset = ylabel == null ? null
        : fbBuilder.writeString(ylabel!);
    final int? plotsOffset = plots == null ? null
        : fbBuilder.writeList(plots!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, xlabelOffset);
    fbBuilder.addOffset(2, ylabelOffset);
    fbBuilder.addOffset(3, plotsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MultiPlotT{title: $title, xlabel: $xlabel, ylabel: $ylabel, plots: $plots}';
  }
}

class _MultiPlotReader extends fb.TableReader<MultiPlot> {
  const _MultiPlotReader();

  @override
  MultiPlot createObject(fb.BufferContext bc, int offset) => 
    MultiPlot._(bc, offset);
}

class MultiPlotBuilder {
  MultiPlotBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addXlabelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addYlabelOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPlotsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MultiPlotObjectBuilder extends fb.ObjectBuilder {
  final String? _title;
  final String? _xlabel;
  final String? _ylabel;
  final List<SinglePlotObjectBuilder>? _plots;

  MultiPlotObjectBuilder({
    String? title,
    String? xlabel,
    String? ylabel,
    List<SinglePlotObjectBuilder>? plots,
  })
      : _title = title,
        _xlabel = xlabel,
        _ylabel = ylabel,
        _plots = plots;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? xlabelOffset = _xlabel == null ? null
        : fbBuilder.writeString(_xlabel!);
    final int? ylabelOffset = _ylabel == null ? null
        : fbBuilder.writeString(_ylabel!);
    final int? plotsOffset = _plots == null ? null
        : fbBuilder.writeList(_plots!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, xlabelOffset);
    fbBuilder.addOffset(2, ylabelOffset);
    fbBuilder.addOffset(3, plotsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SpeciesReport {
  SpeciesReport._(this._bc, this._bcOffset);
  factory SpeciesReport(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SpeciesReport> reader = _SpeciesReportReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get species => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get timestamp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<MultiPlot>? get plots => const fb.ListReader<MultiPlot>(MultiPlot.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SpeciesReport{title: $title, species: $species, timestamp: $timestamp, plots: $plots}';
  }

  SpeciesReportT unpack() => SpeciesReportT(
      title: title,
      species: species,
      timestamp: timestamp,
      plots: plots?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SpeciesReportT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpeciesReportT implements fb.Packable {
  String? title;
  String? species;
  String? timestamp;
  List<MultiPlotT>? plots;

  SpeciesReportT({
      this.title,
      this.species,
      this.timestamp,
      this.plots});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? speciesOffset = species == null ? null
        : fbBuilder.writeString(species!);
    final int? timestampOffset = timestamp == null ? null
        : fbBuilder.writeString(timestamp!);
    final int? plotsOffset = plots == null ? null
        : fbBuilder.writeList(plots!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, speciesOffset);
    fbBuilder.addOffset(2, timestampOffset);
    fbBuilder.addOffset(3, plotsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpeciesReportT{title: $title, species: $species, timestamp: $timestamp, plots: $plots}';
  }
}

class _SpeciesReportReader extends fb.TableReader<SpeciesReport> {
  const _SpeciesReportReader();

  @override
  SpeciesReport createObject(fb.BufferContext bc, int offset) => 
    SpeciesReport._(bc, offset);
}

class SpeciesReportBuilder {
  SpeciesReportBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpeciesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestampOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPlotsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpeciesReportObjectBuilder extends fb.ObjectBuilder {
  final String? _title;
  final String? _species;
  final String? _timestamp;
  final List<MultiPlotObjectBuilder>? _plots;

  SpeciesReportObjectBuilder({
    String? title,
    String? species,
    String? timestamp,
    List<MultiPlotObjectBuilder>? plots,
  })
      : _title = title,
        _species = species,
        _timestamp = timestamp,
        _plots = plots;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? speciesOffset = _species == null ? null
        : fbBuilder.writeString(_species!);
    final int? timestampOffset = _timestamp == null ? null
        : fbBuilder.writeString(_timestamp!);
    final int? plotsOffset = _plots == null ? null
        : fbBuilder.writeList(_plots!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, speciesOffset);
    fbBuilder.addOffset(2, timestampOffset);
    fbBuilder.addOffset(3, plotsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
