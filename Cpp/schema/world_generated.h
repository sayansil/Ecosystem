// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORLD_ECOSYSTEM_H_
#define FLATBUFFERS_GENERATED_WORLD_ECOSYSTEM_H_

#include "flatbuffers/flatbuffers.h"

namespace Ecosystem {

struct ChromosomeStrand;
struct ChromosomeStrandBuilder;

struct Organism;
struct OrganismBuilder;

struct Species;
struct SpeciesBuilder;

struct World;
struct WorldBuilder;

inline const flatbuffers::TypeTable *ChromosomeStrandTypeTable();

inline const flatbuffers::TypeTable *OrganismTypeTable();

inline const flatbuffers::TypeTable *SpeciesTypeTable();

inline const flatbuffers::TypeTable *WorldTypeTable();

enum class Gender : int8_t {
  Male = 0,
  Female = 1,
  MIN = Male,
  MAX = Female
};

inline const Gender (&EnumValuesGender())[2] {
  static const Gender values[] = {
    Gender::Male,
    Gender::Female
  };
  return values;
}

inline const char * const *EnumNamesGender() {
  static const char * const names[3] = {
    "Male",
    "Female",
    nullptr
  };
  return names;
}

inline const char *EnumNameGender(Gender e) {
  if (flatbuffers::IsOutRange(e, Gender::Male, Gender::Female)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGender()[index];
}

enum class Reproduction : int8_t {
  Sexual = 0,
  Asexual = 1,
  MIN = Sexual,
  MAX = Asexual
};

inline const Reproduction (&EnumValuesReproduction())[2] {
  static const Reproduction values[] = {
    Reproduction::Sexual,
    Reproduction::Asexual
  };
  return values;
}

inline const char * const *EnumNamesReproduction() {
  static const char * const names[3] = {
    "Sexual",
    "Asexual",
    nullptr
  };
  return names;
}

inline const char *EnumNameReproduction(Reproduction e) {
  if (flatbuffers::IsOutRange(e, Reproduction::Sexual, Reproduction::Asexual)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesReproduction()[index];
}

enum class Monitor : int8_t {
  None = 0,
  Simulation = 1,
  MIN = None,
  MAX = Simulation
};

inline const Monitor (&EnumValuesMonitor())[2] {
  static const Monitor values[] = {
    Monitor::None,
    Monitor::Simulation
  };
  return values;
}

inline const char * const *EnumNamesMonitor() {
  static const char * const names[3] = {
    "None",
    "Simulation",
    nullptr
  };
  return names;
}

inline const char *EnumNameMonitor(Monitor e) {
  if (flatbuffers::IsOutRange(e, Monitor::None, Monitor::Simulation)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMonitor()[index];
}

enum class Sleep : int8_t {
  Awake = 0,
  Drowsy = 1,
  Asleep = 2,
  MIN = Awake,
  MAX = Asleep
};

inline const Sleep (&EnumValuesSleep())[3] {
  static const Sleep values[] = {
    Sleep::Awake,
    Sleep::Drowsy,
    Sleep::Asleep
  };
  return values;
}

inline const char * const *EnumNamesSleep() {
  static const char * const names[4] = {
    "Awake",
    "Drowsy",
    "Asleep",
    nullptr
  };
  return names;
}

inline const char *EnumNameSleep(Sleep e) {
  if (flatbuffers::IsOutRange(e, Sleep::Awake, Sleep::Asleep)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSleep()[index];
}

struct ChromosomeStrand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChromosomeStrandBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ChromosomeStrandTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_START = 6,
    VT_LENGTH = 8
  };
  const flatbuffers::String *code() const {
    return GetPointer<const flatbuffers::String *>(VT_CODE);
  }
  flatbuffers::String *mutable_code() {
    return GetPointer<flatbuffers::String *>(VT_CODE);
  }
  bool KeyCompareLessThan(const ChromosomeStrand *o) const {
    return *code() < *o->code();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(code()->c_str(), val);
  }
  int32_t start() const {
    return GetField<int32_t>(VT_START, 0);
  }
  bool mutate_start(int32_t _start = 0) {
    return SetField<int32_t>(VT_START, _start, 0);
  }
  int32_t length() const {
    return GetField<int32_t>(VT_LENGTH, 0);
  }
  bool mutate_length(int32_t _length = 0) {
    return SetField<int32_t>(VT_LENGTH, _length, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyField<int32_t>(verifier, VT_START) &&
           VerifyField<int32_t>(verifier, VT_LENGTH) &&
           verifier.EndTable();
  }
};

struct ChromosomeStrandBuilder {
  typedef ChromosomeStrand Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(flatbuffers::Offset<flatbuffers::String> code) {
    fbb_.AddOffset(ChromosomeStrand::VT_CODE, code);
  }
  void add_start(int32_t start) {
    fbb_.AddElement<int32_t>(ChromosomeStrand::VT_START, start, 0);
  }
  void add_length(int32_t length) {
    fbb_.AddElement<int32_t>(ChromosomeStrand::VT_LENGTH, length, 0);
  }
  explicit ChromosomeStrandBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ChromosomeStrand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChromosomeStrand>(end);
    fbb_.Required(o, ChromosomeStrand::VT_CODE);
    return o;
  }
};

inline flatbuffers::Offset<ChromosomeStrand> CreateChromosomeStrand(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> code = 0,
    int32_t start = 0,
    int32_t length = 0) {
  ChromosomeStrandBuilder builder_(_fbb);
  builder_.add_length(length);
  builder_.add_start(start);
  builder_.add_code(code);
  return builder_.Finish();
}

struct ChromosomeStrand::Traits {
  using type = ChromosomeStrand;
  static auto constexpr Create = CreateChromosomeStrand;
};

inline flatbuffers::Offset<ChromosomeStrand> CreateChromosomeStrandDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr,
    int32_t start = 0,
    int32_t length = 0) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  return Ecosystem::CreateChromosomeStrand(
      _fbb,
      code__,
      start,
      length);
}

struct Organism FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OrganismBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return OrganismTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KIND = 4,
    VT_KINGDOM = 6,
    VT_CHROMOSOME_NUMBER = 8,
    VT_MONITOR = 10,
    VT_CHROMOSOME_STRUCTURE = 12,
    VT_FOOD_CHAIN_RANK = 14,
    VT_IS_ASEXUAL = 16,
    VT_AGE_FITNESS_ON_DEATH_RATIO = 18,
    VT_CONCEIVING_PROBABILITY = 20,
    VT_MATING_PROBABILITY = 22,
    VT_MATING_AGE_START = 24,
    VT_MATING_AGE_END = 26,
    VT_MAX_AGE = 28,
    VT_MUTATION_PROBABILITY = 30,
    VT_OFFSPRINGS_FACTOR = 32,
    VT_HEIGHT_ON_SPEED = 34,
    VT_HEIGHT_ON_STAMINA = 36,
    VT_HEIGHT_ON_VITALITY = 38,
    VT_WEIGHT_ON_SPEED = 40,
    VT_WEIGHT_ON_STAMINA = 42,
    VT_WEIGHT_ON_VITALITY = 44,
    VT_VITALITY_ON_APPETITE = 46,
    VT_VITALITY_ON_SPEED = 48,
    VT_STAMINA_ON_APPETITE = 50,
    VT_STAMINA_ON_SPEED = 52,
    VT_THEORETICAL_MAXIMUM_BASE_APPETITE = 54,
    VT_THEORETICAL_MAXIMUM_BASE_HEIGHT = 56,
    VT_THEORETICAL_MAXIMUM_BASE_SPEED = 58,
    VT_THEORETICAL_MAXIMUM_BASE_STAMINA = 60,
    VT_THEORETICAL_MAXIMUM_BASE_VITALITY = 62,
    VT_THEORETICAL_MAXIMUM_BASE_WEIGHT = 64,
    VT_THEORETICAL_MAXIMUM_HEIGHT = 66,
    VT_THEORETICAL_MAXIMUM_SPEED = 68,
    VT_THEORETICAL_MAXIMUM_WEIGHT = 70,
    VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER = 72,
    VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER = 74,
    VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER = 76,
    VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER = 78,
    VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER = 80,
    VT_NAME = 82,
    VT_CHROMOSOME = 84,
    VT_GENDER = 86,
    VT_GENERATION = 88,
    VT_IMMUNITY = 90,
    VT_BASE_APPETITE = 92,
    VT_BASE_HEIGHT = 94,
    VT_BASE_SPEED = 96,
    VT_BASE_STAMINA = 98,
    VT_BASE_VITALITY = 100,
    VT_BASE_WEIGHT = 102,
    VT_HEIGHT_MULTIPLIER = 104,
    VT_SPEED_MULTIPLIER = 106,
    VT_STAMINA_MULTIPLIER = 108,
    VT_VITALITY_MULTIPLIER = 110,
    VT_WEIGHT_MULTIPLIER = 112,
    VT_MAX_HEIGHT = 114,
    VT_MAX_WEIGHT = 116,
    VT_AGE = 118,
    VT_HEIGHT = 120,
    VT_WEIGHT = 122,
    VT_AGE_DEATH_FACTOR = 124,
    VT_FITNESS_DEATH_FACTOR = 126,
    VT_DEATH_FACTOR = 128,
    VT_STATIC_FITNESS = 130,
    VT_MAX_APPETITE_AT_AGE = 132,
    VT_MAX_SPEED_AT_AGE = 134,
    VT_MAX_STAMINA_AT_AGE = 136,
    VT_MAX_VITALITY_AT_AGE = 138,
    VT_APPETITE = 140,
    VT_SPEED = 142,
    VT_STAMINA = 144,
    VT_VITALITY = 146,
    VT_X = 148,
    VT_Y = 150,
    VT_VISION_RADIUS = 152,
    VT_SLEEP_RESTORE_FACTOR = 154,
    VT_ASLEEP = 156
  };
  /// Fixed for a species
  const flatbuffers::String *kind() const {
    return GetPointer<const flatbuffers::String *>(VT_KIND);
  }
  flatbuffers::String *mutable_kind() {
    return GetPointer<flatbuffers::String *>(VT_KIND);
  }
  const flatbuffers::String *kingdom() const {
    return GetPointer<const flatbuffers::String *>(VT_KINGDOM);
  }
  flatbuffers::String *mutable_kingdom() {
    return GetPointer<flatbuffers::String *>(VT_KINGDOM);
  }
  uint64_t chromosome_number() const {
    return GetField<uint64_t>(VT_CHROMOSOME_NUMBER, 0);
  }
  bool mutate_chromosome_number(uint64_t _chromosome_number = 0) {
    return SetField<uint64_t>(VT_CHROMOSOME_NUMBER, _chromosome_number, 0);
  }
  Ecosystem::Monitor monitor() const {
    return static_cast<Ecosystem::Monitor>(GetField<int8_t>(VT_MONITOR, 0));
  }
  bool mutate_monitor(Ecosystem::Monitor _monitor = static_cast<Ecosystem::Monitor>(0)) {
    return SetField<int8_t>(VT_MONITOR, static_cast<int8_t>(_monitor), 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Ecosystem::ChromosomeStrand>> *chromosome_structure() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Ecosystem::ChromosomeStrand>> *>(VT_CHROMOSOME_STRUCTURE);
  }
  flatbuffers::Vector<flatbuffers::Offset<Ecosystem::ChromosomeStrand>> *mutable_chromosome_structure() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::ChromosomeStrand>> *>(VT_CHROMOSOME_STRUCTURE);
  }
  uint64_t food_chain_rank() const {
    return GetField<uint64_t>(VT_FOOD_CHAIN_RANK, 0);
  }
  bool mutate_food_chain_rank(uint64_t _food_chain_rank = 0) {
    return SetField<uint64_t>(VT_FOOD_CHAIN_RANK, _food_chain_rank, 0);
  }
  Ecosystem::Reproduction is_asexual() const {
    return static_cast<Ecosystem::Reproduction>(GetField<int8_t>(VT_IS_ASEXUAL, 0));
  }
  bool mutate_is_asexual(Ecosystem::Reproduction _is_asexual = static_cast<Ecosystem::Reproduction>(0)) {
    return SetField<int8_t>(VT_IS_ASEXUAL, static_cast<int8_t>(_is_asexual), 0);
  }
  double age_fitness_on_death_ratio() const {
    return GetField<double>(VT_AGE_FITNESS_ON_DEATH_RATIO, 0.0);
  }
  bool mutate_age_fitness_on_death_ratio(double _age_fitness_on_death_ratio = 0.0) {
    return SetField<double>(VT_AGE_FITNESS_ON_DEATH_RATIO, _age_fitness_on_death_ratio, 0.0);
  }
  double conceiving_probability() const {
    return GetField<double>(VT_CONCEIVING_PROBABILITY, 0.0);
  }
  bool mutate_conceiving_probability(double _conceiving_probability = 0.0) {
    return SetField<double>(VT_CONCEIVING_PROBABILITY, _conceiving_probability, 0.0);
  }
  double mating_probability() const {
    return GetField<double>(VT_MATING_PROBABILITY, 0.0);
  }
  bool mutate_mating_probability(double _mating_probability = 0.0) {
    return SetField<double>(VT_MATING_PROBABILITY, _mating_probability, 0.0);
  }
  uint64_t mating_age_start() const {
    return GetField<uint64_t>(VT_MATING_AGE_START, 0);
  }
  bool mutate_mating_age_start(uint64_t _mating_age_start = 0) {
    return SetField<uint64_t>(VT_MATING_AGE_START, _mating_age_start, 0);
  }
  uint64_t mating_age_end() const {
    return GetField<uint64_t>(VT_MATING_AGE_END, 0);
  }
  bool mutate_mating_age_end(uint64_t _mating_age_end = 0) {
    return SetField<uint64_t>(VT_MATING_AGE_END, _mating_age_end, 0);
  }
  uint64_t max_age() const {
    return GetField<uint64_t>(VT_MAX_AGE, 0);
  }
  bool mutate_max_age(uint64_t _max_age = 0) {
    return SetField<uint64_t>(VT_MAX_AGE, _max_age, 0);
  }
  double mutation_probability() const {
    return GetField<double>(VT_MUTATION_PROBABILITY, 0.0);
  }
  bool mutate_mutation_probability(double _mutation_probability = 0.0) {
    return SetField<double>(VT_MUTATION_PROBABILITY, _mutation_probability, 0.0);
  }
  double offsprings_factor() const {
    return GetField<double>(VT_OFFSPRINGS_FACTOR, 0.0);
  }
  bool mutate_offsprings_factor(double _offsprings_factor = 0.0) {
    return SetField<double>(VT_OFFSPRINGS_FACTOR, _offsprings_factor, 0.0);
  }
  double height_on_speed() const {
    return GetField<double>(VT_HEIGHT_ON_SPEED, 0.0);
  }
  bool mutate_height_on_speed(double _height_on_speed = 0.0) {
    return SetField<double>(VT_HEIGHT_ON_SPEED, _height_on_speed, 0.0);
  }
  double height_on_stamina() const {
    return GetField<double>(VT_HEIGHT_ON_STAMINA, 0.0);
  }
  bool mutate_height_on_stamina(double _height_on_stamina = 0.0) {
    return SetField<double>(VT_HEIGHT_ON_STAMINA, _height_on_stamina, 0.0);
  }
  double height_on_vitality() const {
    return GetField<double>(VT_HEIGHT_ON_VITALITY, 0.0);
  }
  bool mutate_height_on_vitality(double _height_on_vitality = 0.0) {
    return SetField<double>(VT_HEIGHT_ON_VITALITY, _height_on_vitality, 0.0);
  }
  double weight_on_speed() const {
    return GetField<double>(VT_WEIGHT_ON_SPEED, 0.0);
  }
  bool mutate_weight_on_speed(double _weight_on_speed = 0.0) {
    return SetField<double>(VT_WEIGHT_ON_SPEED, _weight_on_speed, 0.0);
  }
  double weight_on_stamina() const {
    return GetField<double>(VT_WEIGHT_ON_STAMINA, 0.0);
  }
  bool mutate_weight_on_stamina(double _weight_on_stamina = 0.0) {
    return SetField<double>(VT_WEIGHT_ON_STAMINA, _weight_on_stamina, 0.0);
  }
  double weight_on_vitality() const {
    return GetField<double>(VT_WEIGHT_ON_VITALITY, 0.0);
  }
  bool mutate_weight_on_vitality(double _weight_on_vitality = 0.0) {
    return SetField<double>(VT_WEIGHT_ON_VITALITY, _weight_on_vitality, 0.0);
  }
  double vitality_on_appetite() const {
    return GetField<double>(VT_VITALITY_ON_APPETITE, 0.0);
  }
  bool mutate_vitality_on_appetite(double _vitality_on_appetite = 0.0) {
    return SetField<double>(VT_VITALITY_ON_APPETITE, _vitality_on_appetite, 0.0);
  }
  double vitality_on_speed() const {
    return GetField<double>(VT_VITALITY_ON_SPEED, 0.0);
  }
  bool mutate_vitality_on_speed(double _vitality_on_speed = 0.0) {
    return SetField<double>(VT_VITALITY_ON_SPEED, _vitality_on_speed, 0.0);
  }
  double stamina_on_appetite() const {
    return GetField<double>(VT_STAMINA_ON_APPETITE, 0.0);
  }
  bool mutate_stamina_on_appetite(double _stamina_on_appetite = 0.0) {
    return SetField<double>(VT_STAMINA_ON_APPETITE, _stamina_on_appetite, 0.0);
  }
  double stamina_on_speed() const {
    return GetField<double>(VT_STAMINA_ON_SPEED, 0.0);
  }
  bool mutate_stamina_on_speed(double _stamina_on_speed = 0.0) {
    return SetField<double>(VT_STAMINA_ON_SPEED, _stamina_on_speed, 0.0);
  }
  double theoretical_maximum_base_appetite() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_APPETITE, 0.0);
  }
  bool mutate_theoretical_maximum_base_appetite(double _theoretical_maximum_base_appetite = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_APPETITE, _theoretical_maximum_base_appetite, 0.0);
  }
  double theoretical_maximum_base_height() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, 0.0);
  }
  bool mutate_theoretical_maximum_base_height(double _theoretical_maximum_base_height = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, _theoretical_maximum_base_height, 0.0);
  }
  double theoretical_maximum_base_speed() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_SPEED, 0.0);
  }
  bool mutate_theoretical_maximum_base_speed(double _theoretical_maximum_base_speed = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_SPEED, _theoretical_maximum_base_speed, 0.0);
  }
  double theoretical_maximum_base_stamina() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_STAMINA, 0.0);
  }
  bool mutate_theoretical_maximum_base_stamina(double _theoretical_maximum_base_stamina = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_STAMINA, _theoretical_maximum_base_stamina, 0.0);
  }
  double theoretical_maximum_base_vitality() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_VITALITY, 0.0);
  }
  bool mutate_theoretical_maximum_base_vitality(double _theoretical_maximum_base_vitality = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_VITALITY, _theoretical_maximum_base_vitality, 0.0);
  }
  double theoretical_maximum_base_weight() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, 0.0);
  }
  bool mutate_theoretical_maximum_base_weight(double _theoretical_maximum_base_weight = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, _theoretical_maximum_base_weight, 0.0);
  }
  double theoretical_maximum_height() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT, 0.0);
  }
  bool mutate_theoretical_maximum_height(double _theoretical_maximum_height = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT, _theoretical_maximum_height, 0.0);
  }
  double theoretical_maximum_speed() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_SPEED, 0.0);
  }
  bool mutate_theoretical_maximum_speed(double _theoretical_maximum_speed = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_SPEED, _theoretical_maximum_speed, 0.0);
  }
  double theoretical_maximum_weight() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT, 0.0);
  }
  bool mutate_theoretical_maximum_weight(double _theoretical_maximum_weight = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT, _theoretical_maximum_weight, 0.0);
  }
  double theoretical_maximum_height_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, 0.0);
  }
  bool mutate_theoretical_maximum_height_multiplier(double _theoretical_maximum_height_multiplier = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, _theoretical_maximum_height_multiplier, 0.0);
  }
  double theoretical_maximum_speed_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, 0.0);
  }
  bool mutate_theoretical_maximum_speed_multiplier(double _theoretical_maximum_speed_multiplier = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, _theoretical_maximum_speed_multiplier, 0.0);
  }
  double theoretical_maximum_stamina_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, 0.0);
  }
  bool mutate_theoretical_maximum_stamina_multiplier(double _theoretical_maximum_stamina_multiplier = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, _theoretical_maximum_stamina_multiplier, 0.0);
  }
  double theoretical_maximum_vitality_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, 0.0);
  }
  bool mutate_theoretical_maximum_vitality_multiplier(double _theoretical_maximum_vitality_multiplier = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, _theoretical_maximum_vitality_multiplier, 0.0);
  }
  double theoretical_maximum_weight_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, 0.0);
  }
  bool mutate_theoretical_maximum_weight_multiplier(double _theoretical_maximum_weight_multiplier = 0.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, _theoretical_maximum_weight_multiplier, 0.0);
  }
  ///  Fixed for an organism
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Organism *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  const flatbuffers::String *chromosome() const {
    return GetPointer<const flatbuffers::String *>(VT_CHROMOSOME);
  }
  flatbuffers::String *mutable_chromosome() {
    return GetPointer<flatbuffers::String *>(VT_CHROMOSOME);
  }
  Ecosystem::Gender gender() const {
    return static_cast<Ecosystem::Gender>(GetField<int8_t>(VT_GENDER, 0));
  }
  bool mutate_gender(Ecosystem::Gender _gender = static_cast<Ecosystem::Gender>(0)) {
    return SetField<int8_t>(VT_GENDER, static_cast<int8_t>(_gender), 0);
  }
  uint64_t generation() const {
    return GetField<uint64_t>(VT_GENERATION, 0);
  }
  bool mutate_generation(uint64_t _generation = 0) {
    return SetField<uint64_t>(VT_GENERATION, _generation, 0);
  }
  double immunity() const {
    return GetField<double>(VT_IMMUNITY, 0.0);
  }
  bool mutate_immunity(double _immunity = 0.0) {
    return SetField<double>(VT_IMMUNITY, _immunity, 0.0);
  }
  double base_appetite() const {
    return GetField<double>(VT_BASE_APPETITE, 0.0);
  }
  bool mutate_base_appetite(double _base_appetite = 0.0) {
    return SetField<double>(VT_BASE_APPETITE, _base_appetite, 0.0);
  }
  double base_height() const {
    return GetField<double>(VT_BASE_HEIGHT, 0.0);
  }
  bool mutate_base_height(double _base_height = 0.0) {
    return SetField<double>(VT_BASE_HEIGHT, _base_height, 0.0);
  }
  double base_speed() const {
    return GetField<double>(VT_BASE_SPEED, 0.0);
  }
  bool mutate_base_speed(double _base_speed = 0.0) {
    return SetField<double>(VT_BASE_SPEED, _base_speed, 0.0);
  }
  double base_stamina() const {
    return GetField<double>(VT_BASE_STAMINA, 0.0);
  }
  bool mutate_base_stamina(double _base_stamina = 0.0) {
    return SetField<double>(VT_BASE_STAMINA, _base_stamina, 0.0);
  }
  double base_vitality() const {
    return GetField<double>(VT_BASE_VITALITY, 0.0);
  }
  bool mutate_base_vitality(double _base_vitality = 0.0) {
    return SetField<double>(VT_BASE_VITALITY, _base_vitality, 0.0);
  }
  double base_weight() const {
    return GetField<double>(VT_BASE_WEIGHT, 0.0);
  }
  bool mutate_base_weight(double _base_weight = 0.0) {
    return SetField<double>(VT_BASE_WEIGHT, _base_weight, 0.0);
  }
  double height_multiplier() const {
    return GetField<double>(VT_HEIGHT_MULTIPLIER, 0.0);
  }
  bool mutate_height_multiplier(double _height_multiplier = 0.0) {
    return SetField<double>(VT_HEIGHT_MULTIPLIER, _height_multiplier, 0.0);
  }
  double speed_multiplier() const {
    return GetField<double>(VT_SPEED_MULTIPLIER, 0.0);
  }
  bool mutate_speed_multiplier(double _speed_multiplier = 0.0) {
    return SetField<double>(VT_SPEED_MULTIPLIER, _speed_multiplier, 0.0);
  }
  double stamina_multiplier() const {
    return GetField<double>(VT_STAMINA_MULTIPLIER, 0.0);
  }
  bool mutate_stamina_multiplier(double _stamina_multiplier = 0.0) {
    return SetField<double>(VT_STAMINA_MULTIPLIER, _stamina_multiplier, 0.0);
  }
  double vitality_multiplier() const {
    return GetField<double>(VT_VITALITY_MULTIPLIER, 0.0);
  }
  bool mutate_vitality_multiplier(double _vitality_multiplier = 0.0) {
    return SetField<double>(VT_VITALITY_MULTIPLIER, _vitality_multiplier, 0.0);
  }
  double weight_multiplier() const {
    return GetField<double>(VT_WEIGHT_MULTIPLIER, 0.0);
  }
  bool mutate_weight_multiplier(double _weight_multiplier = 0.0) {
    return SetField<double>(VT_WEIGHT_MULTIPLIER, _weight_multiplier, 0.0);
  }
  double max_height() const {
    return GetField<double>(VT_MAX_HEIGHT, 0.0);
  }
  bool mutate_max_height(double _max_height = 0.0) {
    return SetField<double>(VT_MAX_HEIGHT, _max_height, 0.0);
  }
  double max_weight() const {
    return GetField<double>(VT_MAX_WEIGHT, 0.0);
  }
  bool mutate_max_weight(double _max_weight = 0.0) {
    return SetField<double>(VT_MAX_WEIGHT, _max_weight, 0.0);
  }
  /// Stats affected by age
  uint64_t age() const {
    return GetField<uint64_t>(VT_AGE, 0);
  }
  bool mutate_age(uint64_t _age = 0) {
    return SetField<uint64_t>(VT_AGE, _age, 0);
  }
  double height() const {
    return GetField<double>(VT_HEIGHT, 0.0);
  }
  bool mutate_height(double _height = 0.0) {
    return SetField<double>(VT_HEIGHT, _height, 0.0);
  }
  double weight() const {
    return GetField<double>(VT_WEIGHT, 0.0);
  }
  bool mutate_weight(double _weight = 0.0) {
    return SetField<double>(VT_WEIGHT, _weight, 0.0);
  }
  double age_death_factor() const {
    return GetField<double>(VT_AGE_DEATH_FACTOR, 0.0);
  }
  bool mutate_age_death_factor(double _age_death_factor = 0.0) {
    return SetField<double>(VT_AGE_DEATH_FACTOR, _age_death_factor, 0.0);
  }
  double fitness_death_factor() const {
    return GetField<double>(VT_FITNESS_DEATH_FACTOR, 0.0);
  }
  bool mutate_fitness_death_factor(double _fitness_death_factor = 0.0) {
    return SetField<double>(VT_FITNESS_DEATH_FACTOR, _fitness_death_factor, 0.0);
  }
  double death_factor() const {
    return GetField<double>(VT_DEATH_FACTOR, 0.0);
  }
  bool mutate_death_factor(double _death_factor = 0.0) {
    return SetField<double>(VT_DEATH_FACTOR, _death_factor, 0.0);
  }
  double static_fitness() const {
    return GetField<double>(VT_STATIC_FITNESS, 0.0);
  }
  bool mutate_static_fitness(double _static_fitness = 0.0) {
    return SetField<double>(VT_STATIC_FITNESS, _static_fitness, 0.0);
  }
  double max_appetite_at_age() const {
    return GetField<double>(VT_MAX_APPETITE_AT_AGE, 0.0);
  }
  bool mutate_max_appetite_at_age(double _max_appetite_at_age = 0.0) {
    return SetField<double>(VT_MAX_APPETITE_AT_AGE, _max_appetite_at_age, 0.0);
  }
  double max_speed_at_age() const {
    return GetField<double>(VT_MAX_SPEED_AT_AGE, 0.0);
  }
  bool mutate_max_speed_at_age(double _max_speed_at_age = 0.0) {
    return SetField<double>(VT_MAX_SPEED_AT_AGE, _max_speed_at_age, 0.0);
  }
  double max_stamina_at_age() const {
    return GetField<double>(VT_MAX_STAMINA_AT_AGE, 0.0);
  }
  bool mutate_max_stamina_at_age(double _max_stamina_at_age = 0.0) {
    return SetField<double>(VT_MAX_STAMINA_AT_AGE, _max_stamina_at_age, 0.0);
  }
  double max_vitality_at_age() const {
    return GetField<double>(VT_MAX_VITALITY_AT_AGE, 0.0);
  }
  bool mutate_max_vitality_at_age(double _max_vitality_at_age = 0.0) {
    return SetField<double>(VT_MAX_VITALITY_AT_AGE, _max_vitality_at_age, 0.0);
  }
  double appetite() const {
    return GetField<double>(VT_APPETITE, 0.0);
  }
  bool mutate_appetite(double _appetite = 0.0) {
    return SetField<double>(VT_APPETITE, _appetite, 0.0);
  }
  double speed() const {
    return GetField<double>(VT_SPEED, 0.0);
  }
  bool mutate_speed(double _speed = 0.0) {
    return SetField<double>(VT_SPEED, _speed, 0.0);
  }
  double stamina() const {
    return GetField<double>(VT_STAMINA, 0.0);
  }
  bool mutate_stamina(double _stamina = 0.0) {
    return SetField<double>(VT_STAMINA, _stamina, 0.0);
  }
  double vitality() const {
    return GetField<double>(VT_VITALITY, 0.0);
  }
  bool mutate_vitality(double _vitality = 0.0) {
    return SetField<double>(VT_VITALITY, _vitality, 0.0);
  }
  uint64_t X() const {
    return GetField<uint64_t>(VT_X, 0);
  }
  bool mutate_X(uint64_t _X = 0) {
    return SetField<uint64_t>(VT_X, _X, 0);
  }
  uint64_t Y() const {
    return GetField<uint64_t>(VT_Y, 0);
  }
  bool mutate_Y(uint64_t _Y = 0) {
    return SetField<uint64_t>(VT_Y, _Y, 0);
  }
  /// Miscellaneous attributes
  double vision_radius() const {
    return GetField<double>(VT_VISION_RADIUS, 0.0);
  }
  bool mutate_vision_radius(double _vision_radius = 0.0) {
    return SetField<double>(VT_VISION_RADIUS, _vision_radius, 0.0);
  }
  double sleep_restore_factor() const {
    return GetField<double>(VT_SLEEP_RESTORE_FACTOR, 0.0);
  }
  bool mutate_sleep_restore_factor(double _sleep_restore_factor = 0.0) {
    return SetField<double>(VT_SLEEP_RESTORE_FACTOR, _sleep_restore_factor, 0.0);
  }
  Ecosystem::Sleep asleep() const {
    return static_cast<Ecosystem::Sleep>(GetField<int8_t>(VT_ASLEEP, 0));
  }
  bool mutate_asleep(Ecosystem::Sleep _asleep = static_cast<Ecosystem::Sleep>(0)) {
    return SetField<int8_t>(VT_ASLEEP, static_cast<int8_t>(_asleep), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KIND) &&
           verifier.VerifyString(kind()) &&
           VerifyOffsetRequired(verifier, VT_KINGDOM) &&
           verifier.VerifyString(kingdom()) &&
           VerifyField<uint64_t>(verifier, VT_CHROMOSOME_NUMBER) &&
           VerifyField<int8_t>(verifier, VT_MONITOR) &&
           VerifyOffset(verifier, VT_CHROMOSOME_STRUCTURE) &&
           verifier.VerifyVector(chromosome_structure()) &&
           verifier.VerifyVectorOfTables(chromosome_structure()) &&
           VerifyField<uint64_t>(verifier, VT_FOOD_CHAIN_RANK) &&
           VerifyField<int8_t>(verifier, VT_IS_ASEXUAL) &&
           VerifyField<double>(verifier, VT_AGE_FITNESS_ON_DEATH_RATIO) &&
           VerifyField<double>(verifier, VT_CONCEIVING_PROBABILITY) &&
           VerifyField<double>(verifier, VT_MATING_PROBABILITY) &&
           VerifyField<uint64_t>(verifier, VT_MATING_AGE_START) &&
           VerifyField<uint64_t>(verifier, VT_MATING_AGE_END) &&
           VerifyField<uint64_t>(verifier, VT_MAX_AGE) &&
           VerifyField<double>(verifier, VT_MUTATION_PROBABILITY) &&
           VerifyField<double>(verifier, VT_OFFSPRINGS_FACTOR) &&
           VerifyField<double>(verifier, VT_HEIGHT_ON_SPEED) &&
           VerifyField<double>(verifier, VT_HEIGHT_ON_STAMINA) &&
           VerifyField<double>(verifier, VT_HEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_WEIGHT_ON_SPEED) &&
           VerifyField<double>(verifier, VT_WEIGHT_ON_STAMINA) &&
           VerifyField<double>(verifier, VT_WEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_VITALITY_ON_APPETITE) &&
           VerifyField<double>(verifier, VT_VITALITY_ON_SPEED) &&
           VerifyField<double>(verifier, VT_STAMINA_ON_APPETITE) &&
           VerifyField<double>(verifier, VT_STAMINA_ON_SPEED) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_APPETITE) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_HEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_SPEED) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_STAMINA) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_VITALITY) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_WEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_HEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_SPEED) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_WEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_CHROMOSOME) &&
           verifier.VerifyString(chromosome()) &&
           VerifyField<int8_t>(verifier, VT_GENDER) &&
           VerifyField<uint64_t>(verifier, VT_GENERATION) &&
           VerifyField<double>(verifier, VT_IMMUNITY) &&
           VerifyField<double>(verifier, VT_BASE_APPETITE) &&
           VerifyField<double>(verifier, VT_BASE_HEIGHT) &&
           VerifyField<double>(verifier, VT_BASE_SPEED) &&
           VerifyField<double>(verifier, VT_BASE_STAMINA) &&
           VerifyField<double>(verifier, VT_BASE_VITALITY) &&
           VerifyField<double>(verifier, VT_BASE_WEIGHT) &&
           VerifyField<double>(verifier, VT_HEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_SPEED_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_STAMINA_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_VITALITY_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_WEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_MAX_HEIGHT) &&
           VerifyField<double>(verifier, VT_MAX_WEIGHT) &&
           VerifyField<uint64_t>(verifier, VT_AGE) &&
           VerifyField<double>(verifier, VT_HEIGHT) &&
           VerifyField<double>(verifier, VT_WEIGHT) &&
           VerifyField<double>(verifier, VT_AGE_DEATH_FACTOR) &&
           VerifyField<double>(verifier, VT_FITNESS_DEATH_FACTOR) &&
           VerifyField<double>(verifier, VT_DEATH_FACTOR) &&
           VerifyField<double>(verifier, VT_STATIC_FITNESS) &&
           VerifyField<double>(verifier, VT_MAX_APPETITE_AT_AGE) &&
           VerifyField<double>(verifier, VT_MAX_SPEED_AT_AGE) &&
           VerifyField<double>(verifier, VT_MAX_STAMINA_AT_AGE) &&
           VerifyField<double>(verifier, VT_MAX_VITALITY_AT_AGE) &&
           VerifyField<double>(verifier, VT_APPETITE) &&
           VerifyField<double>(verifier, VT_SPEED) &&
           VerifyField<double>(verifier, VT_STAMINA) &&
           VerifyField<double>(verifier, VT_VITALITY) &&
           VerifyField<uint64_t>(verifier, VT_X) &&
           VerifyField<uint64_t>(verifier, VT_Y) &&
           VerifyField<double>(verifier, VT_VISION_RADIUS) &&
           VerifyField<double>(verifier, VT_SLEEP_RESTORE_FACTOR) &&
           VerifyField<int8_t>(verifier, VT_ASLEEP) &&
           verifier.EndTable();
  }
};

struct OrganismBuilder {
  typedef Organism Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kind(flatbuffers::Offset<flatbuffers::String> kind) {
    fbb_.AddOffset(Organism::VT_KIND, kind);
  }
  void add_kingdom(flatbuffers::Offset<flatbuffers::String> kingdom) {
    fbb_.AddOffset(Organism::VT_KINGDOM, kingdom);
  }
  void add_chromosome_number(uint64_t chromosome_number) {
    fbb_.AddElement<uint64_t>(Organism::VT_CHROMOSOME_NUMBER, chromosome_number, 0);
  }
  void add_monitor(Ecosystem::Monitor monitor) {
    fbb_.AddElement<int8_t>(Organism::VT_MONITOR, static_cast<int8_t>(monitor), 0);
  }
  void add_chromosome_structure(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::ChromosomeStrand>>> chromosome_structure) {
    fbb_.AddOffset(Organism::VT_CHROMOSOME_STRUCTURE, chromosome_structure);
  }
  void add_food_chain_rank(uint64_t food_chain_rank) {
    fbb_.AddElement<uint64_t>(Organism::VT_FOOD_CHAIN_RANK, food_chain_rank, 0);
  }
  void add_is_asexual(Ecosystem::Reproduction is_asexual) {
    fbb_.AddElement<int8_t>(Organism::VT_IS_ASEXUAL, static_cast<int8_t>(is_asexual), 0);
  }
  void add_age_fitness_on_death_ratio(double age_fitness_on_death_ratio) {
    fbb_.AddElement<double>(Organism::VT_AGE_FITNESS_ON_DEATH_RATIO, age_fitness_on_death_ratio, 0.0);
  }
  void add_conceiving_probability(double conceiving_probability) {
    fbb_.AddElement<double>(Organism::VT_CONCEIVING_PROBABILITY, conceiving_probability, 0.0);
  }
  void add_mating_probability(double mating_probability) {
    fbb_.AddElement<double>(Organism::VT_MATING_PROBABILITY, mating_probability, 0.0);
  }
  void add_mating_age_start(uint64_t mating_age_start) {
    fbb_.AddElement<uint64_t>(Organism::VT_MATING_AGE_START, mating_age_start, 0);
  }
  void add_mating_age_end(uint64_t mating_age_end) {
    fbb_.AddElement<uint64_t>(Organism::VT_MATING_AGE_END, mating_age_end, 0);
  }
  void add_max_age(uint64_t max_age) {
    fbb_.AddElement<uint64_t>(Organism::VT_MAX_AGE, max_age, 0);
  }
  void add_mutation_probability(double mutation_probability) {
    fbb_.AddElement<double>(Organism::VT_MUTATION_PROBABILITY, mutation_probability, 0.0);
  }
  void add_offsprings_factor(double offsprings_factor) {
    fbb_.AddElement<double>(Organism::VT_OFFSPRINGS_FACTOR, offsprings_factor, 0.0);
  }
  void add_height_on_speed(double height_on_speed) {
    fbb_.AddElement<double>(Organism::VT_HEIGHT_ON_SPEED, height_on_speed, 0.0);
  }
  void add_height_on_stamina(double height_on_stamina) {
    fbb_.AddElement<double>(Organism::VT_HEIGHT_ON_STAMINA, height_on_stamina, 0.0);
  }
  void add_height_on_vitality(double height_on_vitality) {
    fbb_.AddElement<double>(Organism::VT_HEIGHT_ON_VITALITY, height_on_vitality, 0.0);
  }
  void add_weight_on_speed(double weight_on_speed) {
    fbb_.AddElement<double>(Organism::VT_WEIGHT_ON_SPEED, weight_on_speed, 0.0);
  }
  void add_weight_on_stamina(double weight_on_stamina) {
    fbb_.AddElement<double>(Organism::VT_WEIGHT_ON_STAMINA, weight_on_stamina, 0.0);
  }
  void add_weight_on_vitality(double weight_on_vitality) {
    fbb_.AddElement<double>(Organism::VT_WEIGHT_ON_VITALITY, weight_on_vitality, 0.0);
  }
  void add_vitality_on_appetite(double vitality_on_appetite) {
    fbb_.AddElement<double>(Organism::VT_VITALITY_ON_APPETITE, vitality_on_appetite, 0.0);
  }
  void add_vitality_on_speed(double vitality_on_speed) {
    fbb_.AddElement<double>(Organism::VT_VITALITY_ON_SPEED, vitality_on_speed, 0.0);
  }
  void add_stamina_on_appetite(double stamina_on_appetite) {
    fbb_.AddElement<double>(Organism::VT_STAMINA_ON_APPETITE, stamina_on_appetite, 0.0);
  }
  void add_stamina_on_speed(double stamina_on_speed) {
    fbb_.AddElement<double>(Organism::VT_STAMINA_ON_SPEED, stamina_on_speed, 0.0);
  }
  void add_theoretical_maximum_base_appetite(double theoretical_maximum_base_appetite) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_BASE_APPETITE, theoretical_maximum_base_appetite, 0.0);
  }
  void add_theoretical_maximum_base_height(double theoretical_maximum_base_height) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, theoretical_maximum_base_height, 0.0);
  }
  void add_theoretical_maximum_base_speed(double theoretical_maximum_base_speed) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_BASE_SPEED, theoretical_maximum_base_speed, 0.0);
  }
  void add_theoretical_maximum_base_stamina(double theoretical_maximum_base_stamina) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_BASE_STAMINA, theoretical_maximum_base_stamina, 0.0);
  }
  void add_theoretical_maximum_base_vitality(double theoretical_maximum_base_vitality) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_BASE_VITALITY, theoretical_maximum_base_vitality, 0.0);
  }
  void add_theoretical_maximum_base_weight(double theoretical_maximum_base_weight) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, theoretical_maximum_base_weight, 0.0);
  }
  void add_theoretical_maximum_height(double theoretical_maximum_height) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_HEIGHT, theoretical_maximum_height, 0.0);
  }
  void add_theoretical_maximum_speed(double theoretical_maximum_speed) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_SPEED, theoretical_maximum_speed, 0.0);
  }
  void add_theoretical_maximum_weight(double theoretical_maximum_weight) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_WEIGHT, theoretical_maximum_weight, 0.0);
  }
  void add_theoretical_maximum_height_multiplier(double theoretical_maximum_height_multiplier) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, theoretical_maximum_height_multiplier, 0.0);
  }
  void add_theoretical_maximum_speed_multiplier(double theoretical_maximum_speed_multiplier) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, theoretical_maximum_speed_multiplier, 0.0);
  }
  void add_theoretical_maximum_stamina_multiplier(double theoretical_maximum_stamina_multiplier) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, theoretical_maximum_stamina_multiplier, 0.0);
  }
  void add_theoretical_maximum_vitality_multiplier(double theoretical_maximum_vitality_multiplier) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, theoretical_maximum_vitality_multiplier, 0.0);
  }
  void add_theoretical_maximum_weight_multiplier(double theoretical_maximum_weight_multiplier) {
    fbb_.AddElement<double>(Organism::VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, theoretical_maximum_weight_multiplier, 0.0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Organism::VT_NAME, name);
  }
  void add_chromosome(flatbuffers::Offset<flatbuffers::String> chromosome) {
    fbb_.AddOffset(Organism::VT_CHROMOSOME, chromosome);
  }
  void add_gender(Ecosystem::Gender gender) {
    fbb_.AddElement<int8_t>(Organism::VT_GENDER, static_cast<int8_t>(gender), 0);
  }
  void add_generation(uint64_t generation) {
    fbb_.AddElement<uint64_t>(Organism::VT_GENERATION, generation, 0);
  }
  void add_immunity(double immunity) {
    fbb_.AddElement<double>(Organism::VT_IMMUNITY, immunity, 0.0);
  }
  void add_base_appetite(double base_appetite) {
    fbb_.AddElement<double>(Organism::VT_BASE_APPETITE, base_appetite, 0.0);
  }
  void add_base_height(double base_height) {
    fbb_.AddElement<double>(Organism::VT_BASE_HEIGHT, base_height, 0.0);
  }
  void add_base_speed(double base_speed) {
    fbb_.AddElement<double>(Organism::VT_BASE_SPEED, base_speed, 0.0);
  }
  void add_base_stamina(double base_stamina) {
    fbb_.AddElement<double>(Organism::VT_BASE_STAMINA, base_stamina, 0.0);
  }
  void add_base_vitality(double base_vitality) {
    fbb_.AddElement<double>(Organism::VT_BASE_VITALITY, base_vitality, 0.0);
  }
  void add_base_weight(double base_weight) {
    fbb_.AddElement<double>(Organism::VT_BASE_WEIGHT, base_weight, 0.0);
  }
  void add_height_multiplier(double height_multiplier) {
    fbb_.AddElement<double>(Organism::VT_HEIGHT_MULTIPLIER, height_multiplier, 0.0);
  }
  void add_speed_multiplier(double speed_multiplier) {
    fbb_.AddElement<double>(Organism::VT_SPEED_MULTIPLIER, speed_multiplier, 0.0);
  }
  void add_stamina_multiplier(double stamina_multiplier) {
    fbb_.AddElement<double>(Organism::VT_STAMINA_MULTIPLIER, stamina_multiplier, 0.0);
  }
  void add_vitality_multiplier(double vitality_multiplier) {
    fbb_.AddElement<double>(Organism::VT_VITALITY_MULTIPLIER, vitality_multiplier, 0.0);
  }
  void add_weight_multiplier(double weight_multiplier) {
    fbb_.AddElement<double>(Organism::VT_WEIGHT_MULTIPLIER, weight_multiplier, 0.0);
  }
  void add_max_height(double max_height) {
    fbb_.AddElement<double>(Organism::VT_MAX_HEIGHT, max_height, 0.0);
  }
  void add_max_weight(double max_weight) {
    fbb_.AddElement<double>(Organism::VT_MAX_WEIGHT, max_weight, 0.0);
  }
  void add_age(uint64_t age) {
    fbb_.AddElement<uint64_t>(Organism::VT_AGE, age, 0);
  }
  void add_height(double height) {
    fbb_.AddElement<double>(Organism::VT_HEIGHT, height, 0.0);
  }
  void add_weight(double weight) {
    fbb_.AddElement<double>(Organism::VT_WEIGHT, weight, 0.0);
  }
  void add_age_death_factor(double age_death_factor) {
    fbb_.AddElement<double>(Organism::VT_AGE_DEATH_FACTOR, age_death_factor, 0.0);
  }
  void add_fitness_death_factor(double fitness_death_factor) {
    fbb_.AddElement<double>(Organism::VT_FITNESS_DEATH_FACTOR, fitness_death_factor, 0.0);
  }
  void add_death_factor(double death_factor) {
    fbb_.AddElement<double>(Organism::VT_DEATH_FACTOR, death_factor, 0.0);
  }
  void add_static_fitness(double static_fitness) {
    fbb_.AddElement<double>(Organism::VT_STATIC_FITNESS, static_fitness, 0.0);
  }
  void add_max_appetite_at_age(double max_appetite_at_age) {
    fbb_.AddElement<double>(Organism::VT_MAX_APPETITE_AT_AGE, max_appetite_at_age, 0.0);
  }
  void add_max_speed_at_age(double max_speed_at_age) {
    fbb_.AddElement<double>(Organism::VT_MAX_SPEED_AT_AGE, max_speed_at_age, 0.0);
  }
  void add_max_stamina_at_age(double max_stamina_at_age) {
    fbb_.AddElement<double>(Organism::VT_MAX_STAMINA_AT_AGE, max_stamina_at_age, 0.0);
  }
  void add_max_vitality_at_age(double max_vitality_at_age) {
    fbb_.AddElement<double>(Organism::VT_MAX_VITALITY_AT_AGE, max_vitality_at_age, 0.0);
  }
  void add_appetite(double appetite) {
    fbb_.AddElement<double>(Organism::VT_APPETITE, appetite, 0.0);
  }
  void add_speed(double speed) {
    fbb_.AddElement<double>(Organism::VT_SPEED, speed, 0.0);
  }
  void add_stamina(double stamina) {
    fbb_.AddElement<double>(Organism::VT_STAMINA, stamina, 0.0);
  }
  void add_vitality(double vitality) {
    fbb_.AddElement<double>(Organism::VT_VITALITY, vitality, 0.0);
  }
  void add_X(uint64_t X) {
    fbb_.AddElement<uint64_t>(Organism::VT_X, X, 0);
  }
  void add_Y(uint64_t Y) {
    fbb_.AddElement<uint64_t>(Organism::VT_Y, Y, 0);
  }
  void add_vision_radius(double vision_radius) {
    fbb_.AddElement<double>(Organism::VT_VISION_RADIUS, vision_radius, 0.0);
  }
  void add_sleep_restore_factor(double sleep_restore_factor) {
    fbb_.AddElement<double>(Organism::VT_SLEEP_RESTORE_FACTOR, sleep_restore_factor, 0.0);
  }
  void add_asleep(Ecosystem::Sleep asleep) {
    fbb_.AddElement<int8_t>(Organism::VT_ASLEEP, static_cast<int8_t>(asleep), 0);
  }
  explicit OrganismBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Organism> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Organism>(end);
    fbb_.Required(o, Organism::VT_KIND);
    fbb_.Required(o, Organism::VT_KINGDOM);
    fbb_.Required(o, Organism::VT_NAME);
    fbb_.Required(o, Organism::VT_CHROMOSOME);
    return o;
  }
};

inline flatbuffers::Offset<Organism> CreateOrganism(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> kind = 0,
    flatbuffers::Offset<flatbuffers::String> kingdom = 0,
    uint64_t chromosome_number = 0,
    Ecosystem::Monitor monitor = Ecosystem::Monitor::None,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::ChromosomeStrand>>> chromosome_structure = 0,
    uint64_t food_chain_rank = 0,
    Ecosystem::Reproduction is_asexual = Ecosystem::Reproduction::Sexual,
    double age_fitness_on_death_ratio = 0.0,
    double conceiving_probability = 0.0,
    double mating_probability = 0.0,
    uint64_t mating_age_start = 0,
    uint64_t mating_age_end = 0,
    uint64_t max_age = 0,
    double mutation_probability = 0.0,
    double offsprings_factor = 0.0,
    double height_on_speed = 0.0,
    double height_on_stamina = 0.0,
    double height_on_vitality = 0.0,
    double weight_on_speed = 0.0,
    double weight_on_stamina = 0.0,
    double weight_on_vitality = 0.0,
    double vitality_on_appetite = 0.0,
    double vitality_on_speed = 0.0,
    double stamina_on_appetite = 0.0,
    double stamina_on_speed = 0.0,
    double theoretical_maximum_base_appetite = 0.0,
    double theoretical_maximum_base_height = 0.0,
    double theoretical_maximum_base_speed = 0.0,
    double theoretical_maximum_base_stamina = 0.0,
    double theoretical_maximum_base_vitality = 0.0,
    double theoretical_maximum_base_weight = 0.0,
    double theoretical_maximum_height = 0.0,
    double theoretical_maximum_speed = 0.0,
    double theoretical_maximum_weight = 0.0,
    double theoretical_maximum_height_multiplier = 0.0,
    double theoretical_maximum_speed_multiplier = 0.0,
    double theoretical_maximum_stamina_multiplier = 0.0,
    double theoretical_maximum_vitality_multiplier = 0.0,
    double theoretical_maximum_weight_multiplier = 0.0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> chromosome = 0,
    Ecosystem::Gender gender = Ecosystem::Gender::Male,
    uint64_t generation = 0,
    double immunity = 0.0,
    double base_appetite = 0.0,
    double base_height = 0.0,
    double base_speed = 0.0,
    double base_stamina = 0.0,
    double base_vitality = 0.0,
    double base_weight = 0.0,
    double height_multiplier = 0.0,
    double speed_multiplier = 0.0,
    double stamina_multiplier = 0.0,
    double vitality_multiplier = 0.0,
    double weight_multiplier = 0.0,
    double max_height = 0.0,
    double max_weight = 0.0,
    uint64_t age = 0,
    double height = 0.0,
    double weight = 0.0,
    double age_death_factor = 0.0,
    double fitness_death_factor = 0.0,
    double death_factor = 0.0,
    double static_fitness = 0.0,
    double max_appetite_at_age = 0.0,
    double max_speed_at_age = 0.0,
    double max_stamina_at_age = 0.0,
    double max_vitality_at_age = 0.0,
    double appetite = 0.0,
    double speed = 0.0,
    double stamina = 0.0,
    double vitality = 0.0,
    uint64_t X = 0,
    uint64_t Y = 0,
    double vision_radius = 0.0,
    double sleep_restore_factor = 0.0,
    Ecosystem::Sleep asleep = Ecosystem::Sleep::Awake) {
  OrganismBuilder builder_(_fbb);
  builder_.add_sleep_restore_factor(sleep_restore_factor);
  builder_.add_vision_radius(vision_radius);
  builder_.add_Y(Y);
  builder_.add_X(X);
  builder_.add_vitality(vitality);
  builder_.add_stamina(stamina);
  builder_.add_speed(speed);
  builder_.add_appetite(appetite);
  builder_.add_max_vitality_at_age(max_vitality_at_age);
  builder_.add_max_stamina_at_age(max_stamina_at_age);
  builder_.add_max_speed_at_age(max_speed_at_age);
  builder_.add_max_appetite_at_age(max_appetite_at_age);
  builder_.add_static_fitness(static_fitness);
  builder_.add_death_factor(death_factor);
  builder_.add_fitness_death_factor(fitness_death_factor);
  builder_.add_age_death_factor(age_death_factor);
  builder_.add_weight(weight);
  builder_.add_height(height);
  builder_.add_age(age);
  builder_.add_max_weight(max_weight);
  builder_.add_max_height(max_height);
  builder_.add_weight_multiplier(weight_multiplier);
  builder_.add_vitality_multiplier(vitality_multiplier);
  builder_.add_stamina_multiplier(stamina_multiplier);
  builder_.add_speed_multiplier(speed_multiplier);
  builder_.add_height_multiplier(height_multiplier);
  builder_.add_base_weight(base_weight);
  builder_.add_base_vitality(base_vitality);
  builder_.add_base_stamina(base_stamina);
  builder_.add_base_speed(base_speed);
  builder_.add_base_height(base_height);
  builder_.add_base_appetite(base_appetite);
  builder_.add_immunity(immunity);
  builder_.add_generation(generation);
  builder_.add_theoretical_maximum_weight_multiplier(theoretical_maximum_weight_multiplier);
  builder_.add_theoretical_maximum_vitality_multiplier(theoretical_maximum_vitality_multiplier);
  builder_.add_theoretical_maximum_stamina_multiplier(theoretical_maximum_stamina_multiplier);
  builder_.add_theoretical_maximum_speed_multiplier(theoretical_maximum_speed_multiplier);
  builder_.add_theoretical_maximum_height_multiplier(theoretical_maximum_height_multiplier);
  builder_.add_theoretical_maximum_weight(theoretical_maximum_weight);
  builder_.add_theoretical_maximum_speed(theoretical_maximum_speed);
  builder_.add_theoretical_maximum_height(theoretical_maximum_height);
  builder_.add_theoretical_maximum_base_weight(theoretical_maximum_base_weight);
  builder_.add_theoretical_maximum_base_vitality(theoretical_maximum_base_vitality);
  builder_.add_theoretical_maximum_base_stamina(theoretical_maximum_base_stamina);
  builder_.add_theoretical_maximum_base_speed(theoretical_maximum_base_speed);
  builder_.add_theoretical_maximum_base_height(theoretical_maximum_base_height);
  builder_.add_theoretical_maximum_base_appetite(theoretical_maximum_base_appetite);
  builder_.add_stamina_on_speed(stamina_on_speed);
  builder_.add_stamina_on_appetite(stamina_on_appetite);
  builder_.add_vitality_on_speed(vitality_on_speed);
  builder_.add_vitality_on_appetite(vitality_on_appetite);
  builder_.add_weight_on_vitality(weight_on_vitality);
  builder_.add_weight_on_stamina(weight_on_stamina);
  builder_.add_weight_on_speed(weight_on_speed);
  builder_.add_height_on_vitality(height_on_vitality);
  builder_.add_height_on_stamina(height_on_stamina);
  builder_.add_height_on_speed(height_on_speed);
  builder_.add_offsprings_factor(offsprings_factor);
  builder_.add_mutation_probability(mutation_probability);
  builder_.add_max_age(max_age);
  builder_.add_mating_age_end(mating_age_end);
  builder_.add_mating_age_start(mating_age_start);
  builder_.add_mating_probability(mating_probability);
  builder_.add_conceiving_probability(conceiving_probability);
  builder_.add_age_fitness_on_death_ratio(age_fitness_on_death_ratio);
  builder_.add_food_chain_rank(food_chain_rank);
  builder_.add_chromosome_number(chromosome_number);
  builder_.add_chromosome(chromosome);
  builder_.add_name(name);
  builder_.add_chromosome_structure(chromosome_structure);
  builder_.add_kingdom(kingdom);
  builder_.add_kind(kind);
  builder_.add_asleep(asleep);
  builder_.add_gender(gender);
  builder_.add_is_asexual(is_asexual);
  builder_.add_monitor(monitor);
  return builder_.Finish();
}

struct Organism::Traits {
  using type = Organism;
  static auto constexpr Create = CreateOrganism;
};

inline flatbuffers::Offset<Organism> CreateOrganismDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *kind = nullptr,
    const char *kingdom = nullptr,
    uint64_t chromosome_number = 0,
    Ecosystem::Monitor monitor = Ecosystem::Monitor::None,
    std::vector<flatbuffers::Offset<Ecosystem::ChromosomeStrand>> *chromosome_structure = nullptr,
    uint64_t food_chain_rank = 0,
    Ecosystem::Reproduction is_asexual = Ecosystem::Reproduction::Sexual,
    double age_fitness_on_death_ratio = 0.0,
    double conceiving_probability = 0.0,
    double mating_probability = 0.0,
    uint64_t mating_age_start = 0,
    uint64_t mating_age_end = 0,
    uint64_t max_age = 0,
    double mutation_probability = 0.0,
    double offsprings_factor = 0.0,
    double height_on_speed = 0.0,
    double height_on_stamina = 0.0,
    double height_on_vitality = 0.0,
    double weight_on_speed = 0.0,
    double weight_on_stamina = 0.0,
    double weight_on_vitality = 0.0,
    double vitality_on_appetite = 0.0,
    double vitality_on_speed = 0.0,
    double stamina_on_appetite = 0.0,
    double stamina_on_speed = 0.0,
    double theoretical_maximum_base_appetite = 0.0,
    double theoretical_maximum_base_height = 0.0,
    double theoretical_maximum_base_speed = 0.0,
    double theoretical_maximum_base_stamina = 0.0,
    double theoretical_maximum_base_vitality = 0.0,
    double theoretical_maximum_base_weight = 0.0,
    double theoretical_maximum_height = 0.0,
    double theoretical_maximum_speed = 0.0,
    double theoretical_maximum_weight = 0.0,
    double theoretical_maximum_height_multiplier = 0.0,
    double theoretical_maximum_speed_multiplier = 0.0,
    double theoretical_maximum_stamina_multiplier = 0.0,
    double theoretical_maximum_vitality_multiplier = 0.0,
    double theoretical_maximum_weight_multiplier = 0.0,
    const char *name = nullptr,
    const char *chromosome = nullptr,
    Ecosystem::Gender gender = Ecosystem::Gender::Male,
    uint64_t generation = 0,
    double immunity = 0.0,
    double base_appetite = 0.0,
    double base_height = 0.0,
    double base_speed = 0.0,
    double base_stamina = 0.0,
    double base_vitality = 0.0,
    double base_weight = 0.0,
    double height_multiplier = 0.0,
    double speed_multiplier = 0.0,
    double stamina_multiplier = 0.0,
    double vitality_multiplier = 0.0,
    double weight_multiplier = 0.0,
    double max_height = 0.0,
    double max_weight = 0.0,
    uint64_t age = 0,
    double height = 0.0,
    double weight = 0.0,
    double age_death_factor = 0.0,
    double fitness_death_factor = 0.0,
    double death_factor = 0.0,
    double static_fitness = 0.0,
    double max_appetite_at_age = 0.0,
    double max_speed_at_age = 0.0,
    double max_stamina_at_age = 0.0,
    double max_vitality_at_age = 0.0,
    double appetite = 0.0,
    double speed = 0.0,
    double stamina = 0.0,
    double vitality = 0.0,
    uint64_t X = 0,
    uint64_t Y = 0,
    double vision_radius = 0.0,
    double sleep_restore_factor = 0.0,
    Ecosystem::Sleep asleep = Ecosystem::Sleep::Awake) {
  auto kind__ = kind ? _fbb.CreateString(kind) : 0;
  auto kingdom__ = kingdom ? _fbb.CreateString(kingdom) : 0;
  auto chromosome_structure__ = chromosome_structure ? _fbb.CreateVectorOfSortedTables<Ecosystem::ChromosomeStrand>(chromosome_structure) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto chromosome__ = chromosome ? _fbb.CreateString(chromosome) : 0;
  return Ecosystem::CreateOrganism(
      _fbb,
      kind__,
      kingdom__,
      chromosome_number,
      monitor,
      chromosome_structure__,
      food_chain_rank,
      is_asexual,
      age_fitness_on_death_ratio,
      conceiving_probability,
      mating_probability,
      mating_age_start,
      mating_age_end,
      max_age,
      mutation_probability,
      offsprings_factor,
      height_on_speed,
      height_on_stamina,
      height_on_vitality,
      weight_on_speed,
      weight_on_stamina,
      weight_on_vitality,
      vitality_on_appetite,
      vitality_on_speed,
      stamina_on_appetite,
      stamina_on_speed,
      theoretical_maximum_base_appetite,
      theoretical_maximum_base_height,
      theoretical_maximum_base_speed,
      theoretical_maximum_base_stamina,
      theoretical_maximum_base_vitality,
      theoretical_maximum_base_weight,
      theoretical_maximum_height,
      theoretical_maximum_speed,
      theoretical_maximum_weight,
      theoretical_maximum_height_multiplier,
      theoretical_maximum_speed_multiplier,
      theoretical_maximum_stamina_multiplier,
      theoretical_maximum_vitality_multiplier,
      theoretical_maximum_weight_multiplier,
      name__,
      chromosome__,
      gender,
      generation,
      immunity,
      base_appetite,
      base_height,
      base_speed,
      base_stamina,
      base_vitality,
      base_weight,
      height_multiplier,
      speed_multiplier,
      stamina_multiplier,
      vitality_multiplier,
      weight_multiplier,
      max_height,
      max_weight,
      age,
      height,
      weight,
      age_death_factor,
      fitness_death_factor,
      death_factor,
      static_fitness,
      max_appetite_at_age,
      max_speed_at_age,
      max_stamina_at_age,
      max_vitality_at_age,
      appetite,
      speed,
      stamina,
      vitality,
      X,
      Y,
      vision_radius,
      sleep_restore_factor,
      asleep);
}

struct Species FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SpeciesBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SpeciesTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KIND = 4,
    VT_KINGDOM = 6,
    VT_ORGANISM = 8
  };
  const flatbuffers::String *kind() const {
    return GetPointer<const flatbuffers::String *>(VT_KIND);
  }
  flatbuffers::String *mutable_kind() {
    return GetPointer<flatbuffers::String *>(VT_KIND);
  }
  bool KeyCompareLessThan(const Species *o) const {
    return *kind() < *o->kind();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(kind()->c_str(), val);
  }
  const flatbuffers::String *kingdom() const {
    return GetPointer<const flatbuffers::String *>(VT_KINGDOM);
  }
  flatbuffers::String *mutable_kingdom() {
    return GetPointer<flatbuffers::String *>(VT_KINGDOM);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Organism>> *organism() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Organism>> *>(VT_ORGANISM);
  }
  flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Organism>> *mutable_organism() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Organism>> *>(VT_ORGANISM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KIND) &&
           verifier.VerifyString(kind()) &&
           VerifyOffsetRequired(verifier, VT_KINGDOM) &&
           verifier.VerifyString(kingdom()) &&
           VerifyOffset(verifier, VT_ORGANISM) &&
           verifier.VerifyVector(organism()) &&
           verifier.VerifyVectorOfTables(organism()) &&
           verifier.EndTable();
  }
};

struct SpeciesBuilder {
  typedef Species Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kind(flatbuffers::Offset<flatbuffers::String> kind) {
    fbb_.AddOffset(Species::VT_KIND, kind);
  }
  void add_kingdom(flatbuffers::Offset<flatbuffers::String> kingdom) {
    fbb_.AddOffset(Species::VT_KINGDOM, kingdom);
  }
  void add_organism(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Organism>>> organism) {
    fbb_.AddOffset(Species::VT_ORGANISM, organism);
  }
  explicit SpeciesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Species> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Species>(end);
    fbb_.Required(o, Species::VT_KIND);
    fbb_.Required(o, Species::VT_KINGDOM);
    return o;
  }
};

inline flatbuffers::Offset<Species> CreateSpecies(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> kind = 0,
    flatbuffers::Offset<flatbuffers::String> kingdom = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Organism>>> organism = 0) {
  SpeciesBuilder builder_(_fbb);
  builder_.add_organism(organism);
  builder_.add_kingdom(kingdom);
  builder_.add_kind(kind);
  return builder_.Finish();
}

struct Species::Traits {
  using type = Species;
  static auto constexpr Create = CreateSpecies;
};

inline flatbuffers::Offset<Species> CreateSpeciesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *kind = nullptr,
    const char *kingdom = nullptr,
    std::vector<flatbuffers::Offset<Ecosystem::Organism>> *organism = nullptr) {
  auto kind__ = kind ? _fbb.CreateString(kind) : 0;
  auto kingdom__ = kingdom ? _fbb.CreateString(kingdom) : 0;
  auto organism__ = organism ? _fbb.CreateVectorOfSortedTables<Ecosystem::Organism>(organism) : 0;
  return Ecosystem::CreateSpecies(
      _fbb,
      kind__,
      kingdom__,
      organism__);
}

struct World FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WorldBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return WorldTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_YEAR = 4,
    VT_SPECIES = 6
  };
  const flatbuffers::String *year() const {
    return GetPointer<const flatbuffers::String *>(VT_YEAR);
  }
  flatbuffers::String *mutable_year() {
    return GetPointer<flatbuffers::String *>(VT_YEAR);
  }
  bool KeyCompareLessThan(const World *o) const {
    return *year() < *o->year();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(year()->c_str(), val);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Species>> *species() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Species>> *>(VT_SPECIES);
  }
  flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Species>> *mutable_species() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Species>> *>(VT_SPECIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_YEAR) &&
           verifier.VerifyString(year()) &&
           VerifyOffset(verifier, VT_SPECIES) &&
           verifier.VerifyVector(species()) &&
           verifier.VerifyVectorOfTables(species()) &&
           verifier.EndTable();
  }
};

struct WorldBuilder {
  typedef World Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_year(flatbuffers::Offset<flatbuffers::String> year) {
    fbb_.AddOffset(World::VT_YEAR, year);
  }
  void add_species(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Species>>> species) {
    fbb_.AddOffset(World::VT_SPECIES, species);
  }
  explicit WorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<World> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<World>(end);
    fbb_.Required(o, World::VT_YEAR);
    return o;
  }
};

inline flatbuffers::Offset<World> CreateWorld(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> year = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Ecosystem::Species>>> species = 0) {
  WorldBuilder builder_(_fbb);
  builder_.add_species(species);
  builder_.add_year(year);
  return builder_.Finish();
}

struct World::Traits {
  using type = World;
  static auto constexpr Create = CreateWorld;
};

inline flatbuffers::Offset<World> CreateWorldDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *year = nullptr,
    std::vector<flatbuffers::Offset<Ecosystem::Species>> *species = nullptr) {
  auto year__ = year ? _fbb.CreateString(year) : 0;
  auto species__ = species ? _fbb.CreateVectorOfSortedTables<Ecosystem::Species>(species) : 0;
  return Ecosystem::CreateWorld(
      _fbb,
      year__,
      species__);
}

inline const flatbuffers::TypeTable *GenderTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::GenderTypeTable
  };
  static const char * const names[] = {
    "Male",
    "Female"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ReproductionTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::ReproductionTypeTable
  };
  static const char * const names[] = {
    "Sexual",
    "Asexual"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *MonitorTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::MonitorTypeTable
  };
  static const char * const names[] = {
    "None",
    "Simulation"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *SleepTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::SleepTypeTable
  };
  static const char * const names[] = {
    "Awake",
    "Drowsy",
    "Asleep"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ChromosomeStrandTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "code",
    "start",
    "length"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *OrganismTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 1, 1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 2 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 3 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 4 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::MonitorTypeTable,
    Ecosystem::ChromosomeStrandTypeTable,
    Ecosystem::ReproductionTypeTable,
    Ecosystem::GenderTypeTable,
    Ecosystem::SleepTypeTable
  };
  static const char * const names[] = {
    "kind",
    "kingdom",
    "chromosome_number",
    "monitor",
    "chromosome_structure",
    "food_chain_rank",
    "is_asexual",
    "age_fitness_on_death_ratio",
    "conceiving_probability",
    "mating_probability",
    "mating_age_start",
    "mating_age_end",
    "max_age",
    "mutation_probability",
    "offsprings_factor",
    "height_on_speed",
    "height_on_stamina",
    "height_on_vitality",
    "weight_on_speed",
    "weight_on_stamina",
    "weight_on_vitality",
    "vitality_on_appetite",
    "vitality_on_speed",
    "stamina_on_appetite",
    "stamina_on_speed",
    "theoretical_maximum_base_appetite",
    "theoretical_maximum_base_height",
    "theoretical_maximum_base_speed",
    "theoretical_maximum_base_stamina",
    "theoretical_maximum_base_vitality",
    "theoretical_maximum_base_weight",
    "theoretical_maximum_height",
    "theoretical_maximum_speed",
    "theoretical_maximum_weight",
    "theoretical_maximum_height_multiplier",
    "theoretical_maximum_speed_multiplier",
    "theoretical_maximum_stamina_multiplier",
    "theoretical_maximum_vitality_multiplier",
    "theoretical_maximum_weight_multiplier",
    "name",
    "chromosome",
    "gender",
    "generation",
    "immunity",
    "base_appetite",
    "base_height",
    "base_speed",
    "base_stamina",
    "base_vitality",
    "base_weight",
    "height_multiplier",
    "speed_multiplier",
    "stamina_multiplier",
    "vitality_multiplier",
    "weight_multiplier",
    "max_height",
    "max_weight",
    "age",
    "height",
    "weight",
    "age_death_factor",
    "fitness_death_factor",
    "death_factor",
    "static_fitness",
    "max_appetite_at_age",
    "max_speed_at_age",
    "max_stamina_at_age",
    "max_vitality_at_age",
    "appetite",
    "speed",
    "stamina",
    "vitality",
    "X",
    "Y",
    "vision_radius",
    "sleep_restore_factor",
    "asleep"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 77, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *SpeciesTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::OrganismTypeTable
  };
  static const char * const names[] = {
    "kind",
    "kingdom",
    "organism"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *WorldTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::SpeciesTypeTable
  };
  static const char * const names[] = {
    "year",
    "species"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const Ecosystem::World *GetWorld(const void *buf) {
  return flatbuffers::GetRoot<Ecosystem::World>(buf);
}

inline const Ecosystem::World *GetSizePrefixedWorld(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Ecosystem::World>(buf);
}

inline World *GetMutableWorld(void *buf) {
  return flatbuffers::GetMutableRoot<World>(buf);
}

inline Ecosystem::World *GetMutableSizePrefixedWorld(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<Ecosystem::World>(buf);
}

inline bool VerifyWorldBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Ecosystem::World>(nullptr);
}

inline bool VerifySizePrefixedWorldBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Ecosystem::World>(nullptr);
}

inline void FinishWorldBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Ecosystem::World> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWorldBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Ecosystem::World> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Ecosystem

#endif  // FLATBUFFERS_GENERATED_WORLD_ECOSYSTEM_H_
