// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEER_ECOSYSTEM_DEER_H_
#define FLATBUFFERS_GENERATED_DEER_ECOSYSTEM_DEER_H_

#include "flatbuffers/flatbuffers.h"

#include "world_generated.h"

namespace Ecosystem {
namespace Deer {

struct Base;
struct BaseBuilder;

struct Modify;
struct ModifyBuilder;

inline const flatbuffers::TypeTable *BaseTypeTable();

inline const flatbuffers::TypeTable *ModifyTypeTable();

struct Base FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BaseBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return BaseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAX_AGE = 4,
    VT_CHROMOSOME_NUMBER = 6,
    VT_AGE_FITNESS_ON_DEATH_RATIO = 8,
    VT_HEIGHT_ON_VITALITY = 10,
    VT_WEIGHT_ON_VITALITY = 12,
    VT_HEIGHT_ON_STAMINA = 14,
    VT_WEIGHT_ON_STAMINA = 16,
    VT_HEIGHT_ON_SPEED = 18,
    VT_WEIGHT_ON_SPEED = 20,
    VT_VITALITY_ON_APPETITE = 22,
    VT_STAMINA_ON_APPETITE = 24,
    VT_VITALITY_ON_SPEED = 26,
    VT_STAMINA_ON_SPEED = 28,
    VT_SLEEP_RESTORE_FACTOR = 30,
    VT_THEORETICAL_MAXIMUM_BASE_VITALITY = 32,
    VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER = 34,
    VT_THEORETICAL_MAXIMUM_BASE_STAMINA = 36,
    VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER = 38,
    VT_THEORETICAL_MAXIMUM_HEIGHT = 40,
    VT_THEORETICAL_MAXIMUM_WEIGHT = 42,
    VT_THEORETICAL_MAXIMUM_BASE_HEIGHT = 44,
    VT_THEORETICAL_MAXIMUM_BASE_WEIGHT = 46,
    VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER = 48,
    VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER = 50,
    VT_THEORETICAL_MAXIMUM_SPEED = 52,
    VT_THEORETICAL_MAXIMUM_BASE_SPEED = 54,
    VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER = 56,
    VT_THEORETICAL_MAXIMUM_BASE_APPETITE = 58,
    VT_MATING_AGE_START = 60,
    VT_MATING_AGE_END = 62,
    VT_MUTATION_PROBABILITY = 64,
    VT_MATING_PROBABILITY = 66,
    VT_CONCEIVING_PROBABILITY = 68,
    VT_OFFSPRINGS_FACTOR = 70,
    VT_FOOD_CHAIN_RANK = 72,
    VT_VISION_RADIUS = 74,
    VT_IS_ASEXUAL = 76,
    VT_CHROMOSOME_STRUCTURE_BV_START = 78,
    VT_CHROMOSOME_STRUCTURE_BV_LENGTH = 80,
    VT_CHROMOSOME_STRUCTURE_VM_START = 82,
    VT_CHROMOSOME_STRUCTURE_VM_LENGTH = 84,
    VT_CHROMOSOME_STRUCTURE_BS_START = 86,
    VT_CHROMOSOME_STRUCTURE_BS_LENGTH = 88,
    VT_CHROMOSOME_STRUCTURE_SM_START = 90,
    VT_CHROMOSOME_STRUCTURE_SM_LENGTH = 92,
    VT_CHROMOSOME_STRUCTURE_MH_START = 94,
    VT_CHROMOSOME_STRUCTURE_MH_LENGTH = 96,
    VT_CHROMOSOME_STRUCTURE_MW_START = 98,
    VT_CHROMOSOME_STRUCTURE_MW_LENGTH = 100,
    VT_CHROMOSOME_STRUCTURE_BH_START = 102,
    VT_CHROMOSOME_STRUCTURE_BH_LENGTH = 104,
    VT_CHROMOSOME_STRUCTURE_BW_START = 106,
    VT_CHROMOSOME_STRUCTURE_BW_LENGTH = 108,
    VT_CHROMOSOME_STRUCTURE_HM_START = 110,
    VT_CHROMOSOME_STRUCTURE_HM_LENGTH = 112,
    VT_CHROMOSOME_STRUCTURE_WM_START = 114,
    VT_CHROMOSOME_STRUCTURE_WM_LENGTH = 116,
    VT_CHROMOSOME_STRUCTURE_BP_START = 118,
    VT_CHROMOSOME_STRUCTURE_BP_LENGTH = 120,
    VT_CHROMOSOME_STRUCTURE_PM_START = 122,
    VT_CHROMOSOME_STRUCTURE_PM_LENGTH = 124,
    VT_CHROMOSOME_STRUCTURE_BA_START = 126,
    VT_CHROMOSOME_STRUCTURE_BA_LENGTH = 128,
    VT_CHROMOSOME_STRUCTURE_IM_START = 130,
    VT_CHROMOSOME_STRUCTURE_IM_LENGTH = 132,
    VT_CHROMOSOME_STRUCTURE_GN_START = 134,
    VT_CHROMOSOME_STRUCTURE_GN_LENGTH = 136
  };
  uint64_t max_age() const {
    return GetField<uint64_t>(VT_MAX_AGE, 30ULL);
  }
  bool mutate_max_age(uint64_t _max_age = 30ULL) {
    return SetField<uint64_t>(VT_MAX_AGE, _max_age, 30ULL);
  }
  uint64_t chromosome_number() const {
    return GetField<uint64_t>(VT_CHROMOSOME_NUMBER, 131ULL);
  }
  bool mutate_chromosome_number(uint64_t _chromosome_number = 131ULL) {
    return SetField<uint64_t>(VT_CHROMOSOME_NUMBER, _chromosome_number, 131ULL);
  }
  double age_fitness_on_death_ratio() const {
    return GetField<double>(VT_AGE_FITNESS_ON_DEATH_RATIO, 1.0);
  }
  bool mutate_age_fitness_on_death_ratio(double _age_fitness_on_death_ratio = 1.0) {
    return SetField<double>(VT_AGE_FITNESS_ON_DEATH_RATIO, _age_fitness_on_death_ratio, 1.0);
  }
  double height_on_vitality() const {
    return GetField<double>(VT_HEIGHT_ON_VITALITY, 0.1);
  }
  bool mutate_height_on_vitality(double _height_on_vitality = 0.1) {
    return SetField<double>(VT_HEIGHT_ON_VITALITY, _height_on_vitality, 0.1);
  }
  double weight_on_vitality() const {
    return GetField<double>(VT_WEIGHT_ON_VITALITY, 0.25);
  }
  bool mutate_weight_on_vitality(double _weight_on_vitality = 0.25) {
    return SetField<double>(VT_WEIGHT_ON_VITALITY, _weight_on_vitality, 0.25);
  }
  double height_on_stamina() const {
    return GetField<double>(VT_HEIGHT_ON_STAMINA, -0.05);
  }
  bool mutate_height_on_stamina(double _height_on_stamina = -0.05) {
    return SetField<double>(VT_HEIGHT_ON_STAMINA, _height_on_stamina, -0.05);
  }
  double weight_on_stamina() const {
    return GetField<double>(VT_WEIGHT_ON_STAMINA, -0.25);
  }
  bool mutate_weight_on_stamina(double _weight_on_stamina = -0.25) {
    return SetField<double>(VT_WEIGHT_ON_STAMINA, _weight_on_stamina, -0.25);
  }
  double height_on_speed() const {
    return GetField<double>(VT_HEIGHT_ON_SPEED, -0.05);
  }
  bool mutate_height_on_speed(double _height_on_speed = -0.05) {
    return SetField<double>(VT_HEIGHT_ON_SPEED, _height_on_speed, -0.05);
  }
  double weight_on_speed() const {
    return GetField<double>(VT_WEIGHT_ON_SPEED, -0.0);
  }
  bool mutate_weight_on_speed(double _weight_on_speed = -0.0) {
    return SetField<double>(VT_WEIGHT_ON_SPEED, _weight_on_speed, -0.0);
  }
  double vitality_on_appetite() const {
    return GetField<double>(VT_VITALITY_ON_APPETITE, -0.3);
  }
  bool mutate_vitality_on_appetite(double _vitality_on_appetite = -0.3) {
    return SetField<double>(VT_VITALITY_ON_APPETITE, _vitality_on_appetite, -0.3);
  }
  double stamina_on_appetite() const {
    return GetField<double>(VT_STAMINA_ON_APPETITE, -0.3);
  }
  bool mutate_stamina_on_appetite(double _stamina_on_appetite = -0.3) {
    return SetField<double>(VT_STAMINA_ON_APPETITE, _stamina_on_appetite, -0.3);
  }
  double vitality_on_speed() const {
    return GetField<double>(VT_VITALITY_ON_SPEED, 0.0);
  }
  bool mutate_vitality_on_speed(double _vitality_on_speed = 0.0) {
    return SetField<double>(VT_VITALITY_ON_SPEED, _vitality_on_speed, 0.0);
  }
  double stamina_on_speed() const {
    return GetField<double>(VT_STAMINA_ON_SPEED, 0.5);
  }
  bool mutate_stamina_on_speed(double _stamina_on_speed = 0.5) {
    return SetField<double>(VT_STAMINA_ON_SPEED, _stamina_on_speed, 0.5);
  }
  double sleep_restore_factor() const {
    return GetField<double>(VT_SLEEP_RESTORE_FACTOR, 30.0);
  }
  bool mutate_sleep_restore_factor(double _sleep_restore_factor = 30.0) {
    return SetField<double>(VT_SLEEP_RESTORE_FACTOR, _sleep_restore_factor, 30.0);
  }
  double theoretical_maximum_base_vitality() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_VITALITY, 10000.0);
  }
  bool mutate_theoretical_maximum_base_vitality(double _theoretical_maximum_base_vitality = 10000.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_VITALITY, _theoretical_maximum_base_vitality, 10000.0);
  }
  double theoretical_maximum_vitality_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, 1.0);
  }
  bool mutate_theoretical_maximum_vitality_multiplier(double _theoretical_maximum_vitality_multiplier = 1.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, _theoretical_maximum_vitality_multiplier, 1.0);
  }
  double theoretical_maximum_base_stamina() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_STAMINA, 10000.0);
  }
  bool mutate_theoretical_maximum_base_stamina(double _theoretical_maximum_base_stamina = 10000.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_STAMINA, _theoretical_maximum_base_stamina, 10000.0);
  }
  double theoretical_maximum_stamina_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, 1.0);
  }
  bool mutate_theoretical_maximum_stamina_multiplier(double _theoretical_maximum_stamina_multiplier = 1.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, _theoretical_maximum_stamina_multiplier, 1.0);
  }
  double theoretical_maximum_height() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT, 5.0);
  }
  bool mutate_theoretical_maximum_height(double _theoretical_maximum_height = 5.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT, _theoretical_maximum_height, 5.0);
  }
  double theoretical_maximum_weight() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT, 400.0);
  }
  bool mutate_theoretical_maximum_weight(double _theoretical_maximum_weight = 400.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT, _theoretical_maximum_weight, 400.0);
  }
  double theoretical_maximum_base_height() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, 0.5);
  }
  bool mutate_theoretical_maximum_base_height(double _theoretical_maximum_base_height = 0.5) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, _theoretical_maximum_base_height, 0.5);
  }
  double theoretical_maximum_base_weight() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, 20.0);
  }
  bool mutate_theoretical_maximum_base_weight(double _theoretical_maximum_base_weight = 20.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, _theoretical_maximum_base_weight, 20.0);
  }
  double theoretical_maximum_height_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, 1.0);
  }
  bool mutate_theoretical_maximum_height_multiplier(double _theoretical_maximum_height_multiplier = 1.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, _theoretical_maximum_height_multiplier, 1.0);
  }
  double theoretical_maximum_weight_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, 1.0);
  }
  bool mutate_theoretical_maximum_weight_multiplier(double _theoretical_maximum_weight_multiplier = 1.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, _theoretical_maximum_weight_multiplier, 1.0);
  }
  double theoretical_maximum_speed() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_SPEED, 80.0);
  }
  bool mutate_theoretical_maximum_speed(double _theoretical_maximum_speed = 80.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_SPEED, _theoretical_maximum_speed, 80.0);
  }
  double theoretical_maximum_base_speed() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_SPEED, 5.0);
  }
  bool mutate_theoretical_maximum_base_speed(double _theoretical_maximum_base_speed = 5.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_SPEED, _theoretical_maximum_base_speed, 5.0);
  }
  double theoretical_maximum_speed_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, 0.75);
  }
  bool mutate_theoretical_maximum_speed_multiplier(double _theoretical_maximum_speed_multiplier = 0.75) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, _theoretical_maximum_speed_multiplier, 0.75);
  }
  double theoretical_maximum_base_appetite() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_APPETITE, 10000.0);
  }
  bool mutate_theoretical_maximum_base_appetite(double _theoretical_maximum_base_appetite = 10000.0) {
    return SetField<double>(VT_THEORETICAL_MAXIMUM_BASE_APPETITE, _theoretical_maximum_base_appetite, 10000.0);
  }
  uint64_t mating_age_start() const {
    return GetField<uint64_t>(VT_MATING_AGE_START, 10ULL);
  }
  bool mutate_mating_age_start(uint64_t _mating_age_start = 10ULL) {
    return SetField<uint64_t>(VT_MATING_AGE_START, _mating_age_start, 10ULL);
  }
  uint64_t mating_age_end() const {
    return GetField<uint64_t>(VT_MATING_AGE_END, 25ULL);
  }
  bool mutate_mating_age_end(uint64_t _mating_age_end = 25ULL) {
    return SetField<uint64_t>(VT_MATING_AGE_END, _mating_age_end, 25ULL);
  }
  double mutation_probability() const {
    return GetField<double>(VT_MUTATION_PROBABILITY, 0.01);
  }
  bool mutate_mutation_probability(double _mutation_probability = 0.01) {
    return SetField<double>(VT_MUTATION_PROBABILITY, _mutation_probability, 0.01);
  }
  double mating_probability() const {
    return GetField<double>(VT_MATING_PROBABILITY, 0.5);
  }
  bool mutate_mating_probability(double _mating_probability = 0.5) {
    return SetField<double>(VT_MATING_PROBABILITY, _mating_probability, 0.5);
  }
  double conceiving_probability() const {
    return GetField<double>(VT_CONCEIVING_PROBABILITY, 0.80);
  }
  bool mutate_conceiving_probability(double _conceiving_probability = 0.80) {
    return SetField<double>(VT_CONCEIVING_PROBABILITY, _conceiving_probability, 0.80);
  }
  double offsprings_factor() const {
    return GetField<double>(VT_OFFSPRINGS_FACTOR, 2.0);
  }
  bool mutate_offsprings_factor(double _offsprings_factor = 2.0) {
    return SetField<double>(VT_OFFSPRINGS_FACTOR, _offsprings_factor, 2.0);
  }
  uint64_t food_chain_rank() const {
    return GetField<uint64_t>(VT_FOOD_CHAIN_RANK, 1ULL);
  }
  bool mutate_food_chain_rank(uint64_t _food_chain_rank = 1ULL) {
    return SetField<uint64_t>(VT_FOOD_CHAIN_RANK, _food_chain_rank, 1ULL);
  }
  double vision_radius() const {
    return GetField<double>(VT_VISION_RADIUS, 100.0);
  }
  bool mutate_vision_radius(double _vision_radius = 100.0) {
    return SetField<double>(VT_VISION_RADIUS, _vision_radius, 100.0);
  }
  Ecosystem::Reproduction is_asexual() const {
    return static_cast<Ecosystem::Reproduction>(GetField<int8_t>(VT_IS_ASEXUAL, 0));
  }
  bool mutate_is_asexual(Ecosystem::Reproduction _is_asexual = static_cast<Ecosystem::Reproduction>(0)) {
    return SetField<int8_t>(VT_IS_ASEXUAL, static_cast<int8_t>(_is_asexual), 0);
  }
  int32_t chromosome_structure_bv_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BV_START, 0);
  }
  bool mutate_chromosome_structure_bv_start(int32_t _chromosome_structure_bv_start = 0) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BV_START, _chromosome_structure_bv_start, 0);
  }
  int32_t chromosome_structure_bv_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BV_LENGTH, 10);
  }
  bool mutate_chromosome_structure_bv_length(int32_t _chromosome_structure_bv_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BV_LENGTH, _chromosome_structure_bv_length, 10);
  }
  int32_t chromosome_structure_vm_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_VM_START, 10);
  }
  bool mutate_chromosome_structure_vm_start(int32_t _chromosome_structure_vm_start = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_VM_START, _chromosome_structure_vm_start, 10);
  }
  int32_t chromosome_structure_vm_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_VM_LENGTH, 8);
  }
  bool mutate_chromosome_structure_vm_length(int32_t _chromosome_structure_vm_length = 8) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_VM_LENGTH, _chromosome_structure_vm_length, 8);
  }
  int32_t chromosome_structure_bs_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BS_START, 18);
  }
  bool mutate_chromosome_structure_bs_start(int32_t _chromosome_structure_bs_start = 18) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BS_START, _chromosome_structure_bs_start, 18);
  }
  int32_t chromosome_structure_bs_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BS_LENGTH, 10);
  }
  bool mutate_chromosome_structure_bs_length(int32_t _chromosome_structure_bs_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BS_LENGTH, _chromosome_structure_bs_length, 10);
  }
  int32_t chromosome_structure_sm_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_SM_START, 28);
  }
  bool mutate_chromosome_structure_sm_start(int32_t _chromosome_structure_sm_start = 28) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_SM_START, _chromosome_structure_sm_start, 28);
  }
  int32_t chromosome_structure_sm_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_SM_LENGTH, 8);
  }
  bool mutate_chromosome_structure_sm_length(int32_t _chromosome_structure_sm_length = 8) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_SM_LENGTH, _chromosome_structure_sm_length, 8);
  }
  int32_t chromosome_structure_mh_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MH_START, 36);
  }
  bool mutate_chromosome_structure_mh_start(int32_t _chromosome_structure_mh_start = 36) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MH_START, _chromosome_structure_mh_start, 36);
  }
  int32_t chromosome_structure_mh_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MH_LENGTH, 10);
  }
  bool mutate_chromosome_structure_mh_length(int32_t _chromosome_structure_mh_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MH_LENGTH, _chromosome_structure_mh_length, 10);
  }
  int32_t chromosome_structure_mw_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MW_START, 46);
  }
  bool mutate_chromosome_structure_mw_start(int32_t _chromosome_structure_mw_start = 46) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MW_START, _chromosome_structure_mw_start, 46);
  }
  int32_t chromosome_structure_mw_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MW_LENGTH, 10);
  }
  bool mutate_chromosome_structure_mw_length(int32_t _chromosome_structure_mw_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_MW_LENGTH, _chromosome_structure_mw_length, 10);
  }
  int32_t chromosome_structure_bh_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BH_START, 56);
  }
  bool mutate_chromosome_structure_bh_start(int32_t _chromosome_structure_bh_start = 56) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BH_START, _chromosome_structure_bh_start, 56);
  }
  int32_t chromosome_structure_bh_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BH_LENGTH, 10);
  }
  bool mutate_chromosome_structure_bh_length(int32_t _chromosome_structure_bh_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BH_LENGTH, _chromosome_structure_bh_length, 10);
  }
  int32_t chromosome_structure_bw_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BW_START, 66);
  }
  bool mutate_chromosome_structure_bw_start(int32_t _chromosome_structure_bw_start = 66) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BW_START, _chromosome_structure_bw_start, 66);
  }
  int32_t chromosome_structure_bw_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BW_LENGTH, 10);
  }
  bool mutate_chromosome_structure_bw_length(int32_t _chromosome_structure_bw_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BW_LENGTH, _chromosome_structure_bw_length, 10);
  }
  int32_t chromosome_structure_hm_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_HM_START, 76);
  }
  bool mutate_chromosome_structure_hm_start(int32_t _chromosome_structure_hm_start = 76) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_HM_START, _chromosome_structure_hm_start, 76);
  }
  int32_t chromosome_structure_hm_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_HM_LENGTH, 8);
  }
  bool mutate_chromosome_structure_hm_length(int32_t _chromosome_structure_hm_length = 8) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_HM_LENGTH, _chromosome_structure_hm_length, 8);
  }
  int32_t chromosome_structure_wm_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_WM_START, 84);
  }
  bool mutate_chromosome_structure_wm_start(int32_t _chromosome_structure_wm_start = 84) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_WM_START, _chromosome_structure_wm_start, 84);
  }
  int32_t chromosome_structure_wm_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_WM_LENGTH, 8);
  }
  bool mutate_chromosome_structure_wm_length(int32_t _chromosome_structure_wm_length = 8) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_WM_LENGTH, _chromosome_structure_wm_length, 8);
  }
  int32_t chromosome_structure_bp_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BP_START, 92);
  }
  bool mutate_chromosome_structure_bp_start(int32_t _chromosome_structure_bp_start = 92) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BP_START, _chromosome_structure_bp_start, 92);
  }
  int32_t chromosome_structure_bp_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BP_LENGTH, 10);
  }
  bool mutate_chromosome_structure_bp_length(int32_t _chromosome_structure_bp_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BP_LENGTH, _chromosome_structure_bp_length, 10);
  }
  int32_t chromosome_structure_pm_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_PM_START, 102);
  }
  bool mutate_chromosome_structure_pm_start(int32_t _chromosome_structure_pm_start = 102) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_PM_START, _chromosome_structure_pm_start, 102);
  }
  int32_t chromosome_structure_pm_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_PM_LENGTH, 8);
  }
  bool mutate_chromosome_structure_pm_length(int32_t _chromosome_structure_pm_length = 8) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_PM_LENGTH, _chromosome_structure_pm_length, 8);
  }
  int32_t chromosome_structure_ba_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BA_START, 110);
  }
  bool mutate_chromosome_structure_ba_start(int32_t _chromosome_structure_ba_start = 110) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BA_START, _chromosome_structure_ba_start, 110);
  }
  int32_t chromosome_structure_ba_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BA_LENGTH, 10);
  }
  bool mutate_chromosome_structure_ba_length(int32_t _chromosome_structure_ba_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_BA_LENGTH, _chromosome_structure_ba_length, 10);
  }
  int32_t chromosome_structure_im_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_IM_START, 120);
  }
  bool mutate_chromosome_structure_im_start(int32_t _chromosome_structure_im_start = 120) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_IM_START, _chromosome_structure_im_start, 120);
  }
  int32_t chromosome_structure_im_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_IM_LENGTH, 10);
  }
  bool mutate_chromosome_structure_im_length(int32_t _chromosome_structure_im_length = 10) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_IM_LENGTH, _chromosome_structure_im_length, 10);
  }
  int32_t chromosome_structure_gn_start() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_GN_START, 130);
  }
  bool mutate_chromosome_structure_gn_start(int32_t _chromosome_structure_gn_start = 130) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_GN_START, _chromosome_structure_gn_start, 130);
  }
  int32_t chromosome_structure_gn_length() const {
    return GetField<int32_t>(VT_CHROMOSOME_STRUCTURE_GN_LENGTH, 1);
  }
  bool mutate_chromosome_structure_gn_length(int32_t _chromosome_structure_gn_length = 1) {
    return SetField<int32_t>(VT_CHROMOSOME_STRUCTURE_GN_LENGTH, _chromosome_structure_gn_length, 1);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_MAX_AGE) &&
           VerifyField<uint64_t>(verifier, VT_CHROMOSOME_NUMBER) &&
           VerifyField<double>(verifier, VT_AGE_FITNESS_ON_DEATH_RATIO) &&
           VerifyField<double>(verifier, VT_HEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_WEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_HEIGHT_ON_STAMINA) &&
           VerifyField<double>(verifier, VT_WEIGHT_ON_STAMINA) &&
           VerifyField<double>(verifier, VT_HEIGHT_ON_SPEED) &&
           VerifyField<double>(verifier, VT_WEIGHT_ON_SPEED) &&
           VerifyField<double>(verifier, VT_VITALITY_ON_APPETITE) &&
           VerifyField<double>(verifier, VT_STAMINA_ON_APPETITE) &&
           VerifyField<double>(verifier, VT_VITALITY_ON_SPEED) &&
           VerifyField<double>(verifier, VT_STAMINA_ON_SPEED) &&
           VerifyField<double>(verifier, VT_SLEEP_RESTORE_FACTOR) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_VITALITY) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_STAMINA) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_HEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_WEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_HEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_WEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_SPEED) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_SPEED) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_APPETITE) &&
           VerifyField<uint64_t>(verifier, VT_MATING_AGE_START) &&
           VerifyField<uint64_t>(verifier, VT_MATING_AGE_END) &&
           VerifyField<double>(verifier, VT_MUTATION_PROBABILITY) &&
           VerifyField<double>(verifier, VT_MATING_PROBABILITY) &&
           VerifyField<double>(verifier, VT_CONCEIVING_PROBABILITY) &&
           VerifyField<double>(verifier, VT_OFFSPRINGS_FACTOR) &&
           VerifyField<uint64_t>(verifier, VT_FOOD_CHAIN_RANK) &&
           VerifyField<double>(verifier, VT_VISION_RADIUS) &&
           VerifyField<int8_t>(verifier, VT_IS_ASEXUAL) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BV_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BV_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_VM_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_VM_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BS_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BS_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_SM_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_SM_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_MH_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_MH_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_MW_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_MW_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BH_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BH_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BW_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BW_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_HM_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_HM_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_WM_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_WM_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BP_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BP_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_PM_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_PM_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BA_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_BA_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_IM_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_IM_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_GN_START) &&
           VerifyField<int32_t>(verifier, VT_CHROMOSOME_STRUCTURE_GN_LENGTH) &&
           verifier.EndTable();
  }
};

struct BaseBuilder {
  typedef Base Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_max_age(uint64_t max_age) {
    fbb_.AddElement<uint64_t>(Base::VT_MAX_AGE, max_age, 30ULL);
  }
  void add_chromosome_number(uint64_t chromosome_number) {
    fbb_.AddElement<uint64_t>(Base::VT_CHROMOSOME_NUMBER, chromosome_number, 131ULL);
  }
  void add_age_fitness_on_death_ratio(double age_fitness_on_death_ratio) {
    fbb_.AddElement<double>(Base::VT_AGE_FITNESS_ON_DEATH_RATIO, age_fitness_on_death_ratio, 1.0);
  }
  void add_height_on_vitality(double height_on_vitality) {
    fbb_.AddElement<double>(Base::VT_HEIGHT_ON_VITALITY, height_on_vitality, 0.1);
  }
  void add_weight_on_vitality(double weight_on_vitality) {
    fbb_.AddElement<double>(Base::VT_WEIGHT_ON_VITALITY, weight_on_vitality, 0.25);
  }
  void add_height_on_stamina(double height_on_stamina) {
    fbb_.AddElement<double>(Base::VT_HEIGHT_ON_STAMINA, height_on_stamina, -0.05);
  }
  void add_weight_on_stamina(double weight_on_stamina) {
    fbb_.AddElement<double>(Base::VT_WEIGHT_ON_STAMINA, weight_on_stamina, -0.25);
  }
  void add_height_on_speed(double height_on_speed) {
    fbb_.AddElement<double>(Base::VT_HEIGHT_ON_SPEED, height_on_speed, -0.05);
  }
  void add_weight_on_speed(double weight_on_speed) {
    fbb_.AddElement<double>(Base::VT_WEIGHT_ON_SPEED, weight_on_speed, -0.0);
  }
  void add_vitality_on_appetite(double vitality_on_appetite) {
    fbb_.AddElement<double>(Base::VT_VITALITY_ON_APPETITE, vitality_on_appetite, -0.3);
  }
  void add_stamina_on_appetite(double stamina_on_appetite) {
    fbb_.AddElement<double>(Base::VT_STAMINA_ON_APPETITE, stamina_on_appetite, -0.3);
  }
  void add_vitality_on_speed(double vitality_on_speed) {
    fbb_.AddElement<double>(Base::VT_VITALITY_ON_SPEED, vitality_on_speed, 0.0);
  }
  void add_stamina_on_speed(double stamina_on_speed) {
    fbb_.AddElement<double>(Base::VT_STAMINA_ON_SPEED, stamina_on_speed, 0.5);
  }
  void add_sleep_restore_factor(double sleep_restore_factor) {
    fbb_.AddElement<double>(Base::VT_SLEEP_RESTORE_FACTOR, sleep_restore_factor, 30.0);
  }
  void add_theoretical_maximum_base_vitality(double theoretical_maximum_base_vitality) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_BASE_VITALITY, theoretical_maximum_base_vitality, 10000.0);
  }
  void add_theoretical_maximum_vitality_multiplier(double theoretical_maximum_vitality_multiplier) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, theoretical_maximum_vitality_multiplier, 1.0);
  }
  void add_theoretical_maximum_base_stamina(double theoretical_maximum_base_stamina) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_BASE_STAMINA, theoretical_maximum_base_stamina, 10000.0);
  }
  void add_theoretical_maximum_stamina_multiplier(double theoretical_maximum_stamina_multiplier) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, theoretical_maximum_stamina_multiplier, 1.0);
  }
  void add_theoretical_maximum_height(double theoretical_maximum_height) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_HEIGHT, theoretical_maximum_height, 5.0);
  }
  void add_theoretical_maximum_weight(double theoretical_maximum_weight) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_WEIGHT, theoretical_maximum_weight, 400.0);
  }
  void add_theoretical_maximum_base_height(double theoretical_maximum_base_height) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, theoretical_maximum_base_height, 0.5);
  }
  void add_theoretical_maximum_base_weight(double theoretical_maximum_base_weight) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, theoretical_maximum_base_weight, 20.0);
  }
  void add_theoretical_maximum_height_multiplier(double theoretical_maximum_height_multiplier) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, theoretical_maximum_height_multiplier, 1.0);
  }
  void add_theoretical_maximum_weight_multiplier(double theoretical_maximum_weight_multiplier) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, theoretical_maximum_weight_multiplier, 1.0);
  }
  void add_theoretical_maximum_speed(double theoretical_maximum_speed) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_SPEED, theoretical_maximum_speed, 80.0);
  }
  void add_theoretical_maximum_base_speed(double theoretical_maximum_base_speed) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_BASE_SPEED, theoretical_maximum_base_speed, 5.0);
  }
  void add_theoretical_maximum_speed_multiplier(double theoretical_maximum_speed_multiplier) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, theoretical_maximum_speed_multiplier, 0.75);
  }
  void add_theoretical_maximum_base_appetite(double theoretical_maximum_base_appetite) {
    fbb_.AddElement<double>(Base::VT_THEORETICAL_MAXIMUM_BASE_APPETITE, theoretical_maximum_base_appetite, 10000.0);
  }
  void add_mating_age_start(uint64_t mating_age_start) {
    fbb_.AddElement<uint64_t>(Base::VT_MATING_AGE_START, mating_age_start, 10ULL);
  }
  void add_mating_age_end(uint64_t mating_age_end) {
    fbb_.AddElement<uint64_t>(Base::VT_MATING_AGE_END, mating_age_end, 25ULL);
  }
  void add_mutation_probability(double mutation_probability) {
    fbb_.AddElement<double>(Base::VT_MUTATION_PROBABILITY, mutation_probability, 0.01);
  }
  void add_mating_probability(double mating_probability) {
    fbb_.AddElement<double>(Base::VT_MATING_PROBABILITY, mating_probability, 0.5);
  }
  void add_conceiving_probability(double conceiving_probability) {
    fbb_.AddElement<double>(Base::VT_CONCEIVING_PROBABILITY, conceiving_probability, 0.80);
  }
  void add_offsprings_factor(double offsprings_factor) {
    fbb_.AddElement<double>(Base::VT_OFFSPRINGS_FACTOR, offsprings_factor, 2.0);
  }
  void add_food_chain_rank(uint64_t food_chain_rank) {
    fbb_.AddElement<uint64_t>(Base::VT_FOOD_CHAIN_RANK, food_chain_rank, 1ULL);
  }
  void add_vision_radius(double vision_radius) {
    fbb_.AddElement<double>(Base::VT_VISION_RADIUS, vision_radius, 100.0);
  }
  void add_is_asexual(Ecosystem::Reproduction is_asexual) {
    fbb_.AddElement<int8_t>(Base::VT_IS_ASEXUAL, static_cast<int8_t>(is_asexual), 0);
  }
  void add_chromosome_structure_bv_start(int32_t chromosome_structure_bv_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BV_START, chromosome_structure_bv_start, 0);
  }
  void add_chromosome_structure_bv_length(int32_t chromosome_structure_bv_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BV_LENGTH, chromosome_structure_bv_length, 10);
  }
  void add_chromosome_structure_vm_start(int32_t chromosome_structure_vm_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_VM_START, chromosome_structure_vm_start, 10);
  }
  void add_chromosome_structure_vm_length(int32_t chromosome_structure_vm_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_VM_LENGTH, chromosome_structure_vm_length, 8);
  }
  void add_chromosome_structure_bs_start(int32_t chromosome_structure_bs_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BS_START, chromosome_structure_bs_start, 18);
  }
  void add_chromosome_structure_bs_length(int32_t chromosome_structure_bs_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BS_LENGTH, chromosome_structure_bs_length, 10);
  }
  void add_chromosome_structure_sm_start(int32_t chromosome_structure_sm_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_SM_START, chromosome_structure_sm_start, 28);
  }
  void add_chromosome_structure_sm_length(int32_t chromosome_structure_sm_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_SM_LENGTH, chromosome_structure_sm_length, 8);
  }
  void add_chromosome_structure_mh_start(int32_t chromosome_structure_mh_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_MH_START, chromosome_structure_mh_start, 36);
  }
  void add_chromosome_structure_mh_length(int32_t chromosome_structure_mh_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_MH_LENGTH, chromosome_structure_mh_length, 10);
  }
  void add_chromosome_structure_mw_start(int32_t chromosome_structure_mw_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_MW_START, chromosome_structure_mw_start, 46);
  }
  void add_chromosome_structure_mw_length(int32_t chromosome_structure_mw_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_MW_LENGTH, chromosome_structure_mw_length, 10);
  }
  void add_chromosome_structure_bh_start(int32_t chromosome_structure_bh_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BH_START, chromosome_structure_bh_start, 56);
  }
  void add_chromosome_structure_bh_length(int32_t chromosome_structure_bh_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BH_LENGTH, chromosome_structure_bh_length, 10);
  }
  void add_chromosome_structure_bw_start(int32_t chromosome_structure_bw_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BW_START, chromosome_structure_bw_start, 66);
  }
  void add_chromosome_structure_bw_length(int32_t chromosome_structure_bw_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BW_LENGTH, chromosome_structure_bw_length, 10);
  }
  void add_chromosome_structure_hm_start(int32_t chromosome_structure_hm_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_HM_START, chromosome_structure_hm_start, 76);
  }
  void add_chromosome_structure_hm_length(int32_t chromosome_structure_hm_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_HM_LENGTH, chromosome_structure_hm_length, 8);
  }
  void add_chromosome_structure_wm_start(int32_t chromosome_structure_wm_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_WM_START, chromosome_structure_wm_start, 84);
  }
  void add_chromosome_structure_wm_length(int32_t chromosome_structure_wm_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_WM_LENGTH, chromosome_structure_wm_length, 8);
  }
  void add_chromosome_structure_bp_start(int32_t chromosome_structure_bp_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BP_START, chromosome_structure_bp_start, 92);
  }
  void add_chromosome_structure_bp_length(int32_t chromosome_structure_bp_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BP_LENGTH, chromosome_structure_bp_length, 10);
  }
  void add_chromosome_structure_pm_start(int32_t chromosome_structure_pm_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_PM_START, chromosome_structure_pm_start, 102);
  }
  void add_chromosome_structure_pm_length(int32_t chromosome_structure_pm_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_PM_LENGTH, chromosome_structure_pm_length, 8);
  }
  void add_chromosome_structure_ba_start(int32_t chromosome_structure_ba_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BA_START, chromosome_structure_ba_start, 110);
  }
  void add_chromosome_structure_ba_length(int32_t chromosome_structure_ba_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_BA_LENGTH, chromosome_structure_ba_length, 10);
  }
  void add_chromosome_structure_im_start(int32_t chromosome_structure_im_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_IM_START, chromosome_structure_im_start, 120);
  }
  void add_chromosome_structure_im_length(int32_t chromosome_structure_im_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_IM_LENGTH, chromosome_structure_im_length, 10);
  }
  void add_chromosome_structure_gn_start(int32_t chromosome_structure_gn_start) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_GN_START, chromosome_structure_gn_start, 130);
  }
  void add_chromosome_structure_gn_length(int32_t chromosome_structure_gn_length) {
    fbb_.AddElement<int32_t>(Base::VT_CHROMOSOME_STRUCTURE_GN_LENGTH, chromosome_structure_gn_length, 1);
  }
  explicit BaseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Base> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Base>(end);
    return o;
  }
};

inline flatbuffers::Offset<Base> CreateBase(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t max_age = 30ULL,
    uint64_t chromosome_number = 131ULL,
    double age_fitness_on_death_ratio = 1.0,
    double height_on_vitality = 0.1,
    double weight_on_vitality = 0.25,
    double height_on_stamina = -0.05,
    double weight_on_stamina = -0.25,
    double height_on_speed = -0.05,
    double weight_on_speed = -0.0,
    double vitality_on_appetite = -0.3,
    double stamina_on_appetite = -0.3,
    double vitality_on_speed = 0.0,
    double stamina_on_speed = 0.5,
    double sleep_restore_factor = 30.0,
    double theoretical_maximum_base_vitality = 10000.0,
    double theoretical_maximum_vitality_multiplier = 1.0,
    double theoretical_maximum_base_stamina = 10000.0,
    double theoretical_maximum_stamina_multiplier = 1.0,
    double theoretical_maximum_height = 5.0,
    double theoretical_maximum_weight = 400.0,
    double theoretical_maximum_base_height = 0.5,
    double theoretical_maximum_base_weight = 20.0,
    double theoretical_maximum_height_multiplier = 1.0,
    double theoretical_maximum_weight_multiplier = 1.0,
    double theoretical_maximum_speed = 80.0,
    double theoretical_maximum_base_speed = 5.0,
    double theoretical_maximum_speed_multiplier = 0.75,
    double theoretical_maximum_base_appetite = 10000.0,
    uint64_t mating_age_start = 10ULL,
    uint64_t mating_age_end = 25ULL,
    double mutation_probability = 0.01,
    double mating_probability = 0.5,
    double conceiving_probability = 0.80,
    double offsprings_factor = 2.0,
    uint64_t food_chain_rank = 1ULL,
    double vision_radius = 100.0,
    Ecosystem::Reproduction is_asexual = Ecosystem::Reproduction::Sexual,
    int32_t chromosome_structure_bv_start = 0,
    int32_t chromosome_structure_bv_length = 10,
    int32_t chromosome_structure_vm_start = 10,
    int32_t chromosome_structure_vm_length = 8,
    int32_t chromosome_structure_bs_start = 18,
    int32_t chromosome_structure_bs_length = 10,
    int32_t chromosome_structure_sm_start = 28,
    int32_t chromosome_structure_sm_length = 8,
    int32_t chromosome_structure_mh_start = 36,
    int32_t chromosome_structure_mh_length = 10,
    int32_t chromosome_structure_mw_start = 46,
    int32_t chromosome_structure_mw_length = 10,
    int32_t chromosome_structure_bh_start = 56,
    int32_t chromosome_structure_bh_length = 10,
    int32_t chromosome_structure_bw_start = 66,
    int32_t chromosome_structure_bw_length = 10,
    int32_t chromosome_structure_hm_start = 76,
    int32_t chromosome_structure_hm_length = 8,
    int32_t chromosome_structure_wm_start = 84,
    int32_t chromosome_structure_wm_length = 8,
    int32_t chromosome_structure_bp_start = 92,
    int32_t chromosome_structure_bp_length = 10,
    int32_t chromosome_structure_pm_start = 102,
    int32_t chromosome_structure_pm_length = 8,
    int32_t chromosome_structure_ba_start = 110,
    int32_t chromosome_structure_ba_length = 10,
    int32_t chromosome_structure_im_start = 120,
    int32_t chromosome_structure_im_length = 10,
    int32_t chromosome_structure_gn_start = 130,
    int32_t chromosome_structure_gn_length = 1) {
  BaseBuilder builder_(_fbb);
  builder_.add_vision_radius(vision_radius);
  builder_.add_food_chain_rank(food_chain_rank);
  builder_.add_offsprings_factor(offsprings_factor);
  builder_.add_conceiving_probability(conceiving_probability);
  builder_.add_mating_probability(mating_probability);
  builder_.add_mutation_probability(mutation_probability);
  builder_.add_mating_age_end(mating_age_end);
  builder_.add_mating_age_start(mating_age_start);
  builder_.add_theoretical_maximum_base_appetite(theoretical_maximum_base_appetite);
  builder_.add_theoretical_maximum_speed_multiplier(theoretical_maximum_speed_multiplier);
  builder_.add_theoretical_maximum_base_speed(theoretical_maximum_base_speed);
  builder_.add_theoretical_maximum_speed(theoretical_maximum_speed);
  builder_.add_theoretical_maximum_weight_multiplier(theoretical_maximum_weight_multiplier);
  builder_.add_theoretical_maximum_height_multiplier(theoretical_maximum_height_multiplier);
  builder_.add_theoretical_maximum_base_weight(theoretical_maximum_base_weight);
  builder_.add_theoretical_maximum_base_height(theoretical_maximum_base_height);
  builder_.add_theoretical_maximum_weight(theoretical_maximum_weight);
  builder_.add_theoretical_maximum_height(theoretical_maximum_height);
  builder_.add_theoretical_maximum_stamina_multiplier(theoretical_maximum_stamina_multiplier);
  builder_.add_theoretical_maximum_base_stamina(theoretical_maximum_base_stamina);
  builder_.add_theoretical_maximum_vitality_multiplier(theoretical_maximum_vitality_multiplier);
  builder_.add_theoretical_maximum_base_vitality(theoretical_maximum_base_vitality);
  builder_.add_sleep_restore_factor(sleep_restore_factor);
  builder_.add_stamina_on_speed(stamina_on_speed);
  builder_.add_vitality_on_speed(vitality_on_speed);
  builder_.add_stamina_on_appetite(stamina_on_appetite);
  builder_.add_vitality_on_appetite(vitality_on_appetite);
  builder_.add_weight_on_speed(weight_on_speed);
  builder_.add_height_on_speed(height_on_speed);
  builder_.add_weight_on_stamina(weight_on_stamina);
  builder_.add_height_on_stamina(height_on_stamina);
  builder_.add_weight_on_vitality(weight_on_vitality);
  builder_.add_height_on_vitality(height_on_vitality);
  builder_.add_age_fitness_on_death_ratio(age_fitness_on_death_ratio);
  builder_.add_chromosome_number(chromosome_number);
  builder_.add_max_age(max_age);
  builder_.add_chromosome_structure_gn_length(chromosome_structure_gn_length);
  builder_.add_chromosome_structure_gn_start(chromosome_structure_gn_start);
  builder_.add_chromosome_structure_im_length(chromosome_structure_im_length);
  builder_.add_chromosome_structure_im_start(chromosome_structure_im_start);
  builder_.add_chromosome_structure_ba_length(chromosome_structure_ba_length);
  builder_.add_chromosome_structure_ba_start(chromosome_structure_ba_start);
  builder_.add_chromosome_structure_pm_length(chromosome_structure_pm_length);
  builder_.add_chromosome_structure_pm_start(chromosome_structure_pm_start);
  builder_.add_chromosome_structure_bp_length(chromosome_structure_bp_length);
  builder_.add_chromosome_structure_bp_start(chromosome_structure_bp_start);
  builder_.add_chromosome_structure_wm_length(chromosome_structure_wm_length);
  builder_.add_chromosome_structure_wm_start(chromosome_structure_wm_start);
  builder_.add_chromosome_structure_hm_length(chromosome_structure_hm_length);
  builder_.add_chromosome_structure_hm_start(chromosome_structure_hm_start);
  builder_.add_chromosome_structure_bw_length(chromosome_structure_bw_length);
  builder_.add_chromosome_structure_bw_start(chromosome_structure_bw_start);
  builder_.add_chromosome_structure_bh_length(chromosome_structure_bh_length);
  builder_.add_chromosome_structure_bh_start(chromosome_structure_bh_start);
  builder_.add_chromosome_structure_mw_length(chromosome_structure_mw_length);
  builder_.add_chromosome_structure_mw_start(chromosome_structure_mw_start);
  builder_.add_chromosome_structure_mh_length(chromosome_structure_mh_length);
  builder_.add_chromosome_structure_mh_start(chromosome_structure_mh_start);
  builder_.add_chromosome_structure_sm_length(chromosome_structure_sm_length);
  builder_.add_chromosome_structure_sm_start(chromosome_structure_sm_start);
  builder_.add_chromosome_structure_bs_length(chromosome_structure_bs_length);
  builder_.add_chromosome_structure_bs_start(chromosome_structure_bs_start);
  builder_.add_chromosome_structure_vm_length(chromosome_structure_vm_length);
  builder_.add_chromosome_structure_vm_start(chromosome_structure_vm_start);
  builder_.add_chromosome_structure_bv_length(chromosome_structure_bv_length);
  builder_.add_chromosome_structure_bv_start(chromosome_structure_bv_start);
  builder_.add_is_asexual(is_asexual);
  return builder_.Finish();
}

struct Base::Traits {
  using type = Base;
  static auto constexpr Create = CreateBase;
};

struct Modify FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ModifyBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ModifyTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPECIES_MAX_AGE = 4,
    VT_SPECIES_AGE_FITNESS_ON_DEATH_RATIO = 6,
    VT_SPECIES_HEIGHT_ON_VITALITY = 8,
    VT_SPECIES_WEIGHT_ON_VITALITY = 10,
    VT_SPECIES_HEIGHT_ON_STAMINA = 12,
    VT_SPECIES_WEIGHT_ON_STAMINA = 14,
    VT_SPECIES_HEIGHT_ON_SPEED = 16,
    VT_SPECIES_WEIGHT_ON_SPEED = 18,
    VT_SPECIES_VITALITY_ON_APPETITE = 20,
    VT_SPECIES_STAMINA_ON_APPETITE = 22,
    VT_SPECIES_VITALITY_ON_SPEED = 24,
    VT_SPECIES_STAMINA_ON_SPEED = 26,
    VT_SPECIES_SLEEP_RESTORE_FACTOR = 28,
    VT_SPECIES_THEORETICAL_MAXIMUM_BASE_VITALITY = 30,
    VT_SPECIES_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER = 32,
    VT_SPECIES_THEORETICAL_MAXIMUM_BASE_STAMINA = 34,
    VT_SPECIES_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER = 36,
    VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT = 38,
    VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT = 40,
    VT_SPECIES_THEORETICAL_MAXIMUM_BASE_HEIGHT = 42,
    VT_SPECIES_THEORETICAL_MAXIMUM_BASE_WEIGHT = 44,
    VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER = 46,
    VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER = 48,
    VT_SPECIES_THEORETICAL_MAXIMUM_SPEED = 50,
    VT_SPECIES_THEORETICAL_MAXIMUM_BASE_SPEED = 52,
    VT_SPECIES_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER = 54,
    VT_SPECIES_THEORETICAL_MAXIMUM_BASE_APPETITE = 56,
    VT_MATING_AGE_START = 58,
    VT_MATING_AGE_END = 60,
    VT_MUTATION_PROBABILITY = 62,
    VT_MATING_PROBABILITY = 64,
    VT_CONCEIVING_PROBABILITY = 66,
    VT_OFFSPRINGS_FACTOR = 68,
    VT_VISION_RADIUS = 70
  };
  double species_max_age() const {
    return GetField<double>(VT_SPECIES_MAX_AGE, 0.1);
  }
  bool mutate_species_max_age(double _species_max_age = 0.1) {
    return SetField<double>(VT_SPECIES_MAX_AGE, _species_max_age, 0.1);
  }
  double species_age_fitness_on_death_ratio() const {
    return GetField<double>(VT_SPECIES_AGE_FITNESS_ON_DEATH_RATIO, 0.001);
  }
  bool mutate_species_age_fitness_on_death_ratio(double _species_age_fitness_on_death_ratio = 0.001) {
    return SetField<double>(VT_SPECIES_AGE_FITNESS_ON_DEATH_RATIO, _species_age_fitness_on_death_ratio, 0.001);
  }
  double species_height_on_vitality() const {
    return GetField<double>(VT_SPECIES_HEIGHT_ON_VITALITY, 0.01);
  }
  bool mutate_species_height_on_vitality(double _species_height_on_vitality = 0.01) {
    return SetField<double>(VT_SPECIES_HEIGHT_ON_VITALITY, _species_height_on_vitality, 0.01);
  }
  double species_weight_on_vitality() const {
    return GetField<double>(VT_SPECIES_WEIGHT_ON_VITALITY, 0.01);
  }
  bool mutate_species_weight_on_vitality(double _species_weight_on_vitality = 0.01) {
    return SetField<double>(VT_SPECIES_WEIGHT_ON_VITALITY, _species_weight_on_vitality, 0.01);
  }
  double species_height_on_stamina() const {
    return GetField<double>(VT_SPECIES_HEIGHT_ON_STAMINA, 0.01);
  }
  bool mutate_species_height_on_stamina(double _species_height_on_stamina = 0.01) {
    return SetField<double>(VT_SPECIES_HEIGHT_ON_STAMINA, _species_height_on_stamina, 0.01);
  }
  double species_weight_on_stamina() const {
    return GetField<double>(VT_SPECIES_WEIGHT_ON_STAMINA, 0.01);
  }
  bool mutate_species_weight_on_stamina(double _species_weight_on_stamina = 0.01) {
    return SetField<double>(VT_SPECIES_WEIGHT_ON_STAMINA, _species_weight_on_stamina, 0.01);
  }
  double species_height_on_speed() const {
    return GetField<double>(VT_SPECIES_HEIGHT_ON_SPEED, 0.01);
  }
  bool mutate_species_height_on_speed(double _species_height_on_speed = 0.01) {
    return SetField<double>(VT_SPECIES_HEIGHT_ON_SPEED, _species_height_on_speed, 0.01);
  }
  double species_weight_on_speed() const {
    return GetField<double>(VT_SPECIES_WEIGHT_ON_SPEED, 0.01);
  }
  bool mutate_species_weight_on_speed(double _species_weight_on_speed = 0.01) {
    return SetField<double>(VT_SPECIES_WEIGHT_ON_SPEED, _species_weight_on_speed, 0.01);
  }
  double species_vitality_on_appetite() const {
    return GetField<double>(VT_SPECIES_VITALITY_ON_APPETITE, 0.01);
  }
  bool mutate_species_vitality_on_appetite(double _species_vitality_on_appetite = 0.01) {
    return SetField<double>(VT_SPECIES_VITALITY_ON_APPETITE, _species_vitality_on_appetite, 0.01);
  }
  double species_stamina_on_appetite() const {
    return GetField<double>(VT_SPECIES_STAMINA_ON_APPETITE, 0.01);
  }
  bool mutate_species_stamina_on_appetite(double _species_stamina_on_appetite = 0.01) {
    return SetField<double>(VT_SPECIES_STAMINA_ON_APPETITE, _species_stamina_on_appetite, 0.01);
  }
  double species_vitality_on_speed() const {
    return GetField<double>(VT_SPECIES_VITALITY_ON_SPEED, 0.01);
  }
  bool mutate_species_vitality_on_speed(double _species_vitality_on_speed = 0.01) {
    return SetField<double>(VT_SPECIES_VITALITY_ON_SPEED, _species_vitality_on_speed, 0.01);
  }
  double species_stamina_on_speed() const {
    return GetField<double>(VT_SPECIES_STAMINA_ON_SPEED, 0.01);
  }
  bool mutate_species_stamina_on_speed(double _species_stamina_on_speed = 0.01) {
    return SetField<double>(VT_SPECIES_STAMINA_ON_SPEED, _species_stamina_on_speed, 0.01);
  }
  double species_sleep_restore_factor() const {
    return GetField<double>(VT_SPECIES_SLEEP_RESTORE_FACTOR, 0.01);
  }
  bool mutate_species_sleep_restore_factor(double _species_sleep_restore_factor = 0.01) {
    return SetField<double>(VT_SPECIES_SLEEP_RESTORE_FACTOR, _species_sleep_restore_factor, 0.01);
  }
  double species_theoretical_maximum_base_vitality() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_VITALITY, 0.01);
  }
  bool mutate_species_theoretical_maximum_base_vitality(double _species_theoretical_maximum_base_vitality = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_VITALITY, _species_theoretical_maximum_base_vitality, 0.01);
  }
  double species_theoretical_maximum_vitality_multiplier() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, 0.01);
  }
  bool mutate_species_theoretical_maximum_vitality_multiplier(double _species_theoretical_maximum_vitality_multiplier = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, _species_theoretical_maximum_vitality_multiplier, 0.01);
  }
  double species_theoretical_maximum_base_stamina() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_STAMINA, 0.01);
  }
  bool mutate_species_theoretical_maximum_base_stamina(double _species_theoretical_maximum_base_stamina = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_STAMINA, _species_theoretical_maximum_base_stamina, 0.01);
  }
  double species_theoretical_maximum_stamina_multiplier() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, 0.01);
  }
  bool mutate_species_theoretical_maximum_stamina_multiplier(double _species_theoretical_maximum_stamina_multiplier = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, _species_theoretical_maximum_stamina_multiplier, 0.01);
  }
  double species_theoretical_maximum_height() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT, 0.01);
  }
  bool mutate_species_theoretical_maximum_height(double _species_theoretical_maximum_height = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT, _species_theoretical_maximum_height, 0.01);
  }
  double species_theoretical_maximum_weight() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT, 0.01);
  }
  bool mutate_species_theoretical_maximum_weight(double _species_theoretical_maximum_weight = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT, _species_theoretical_maximum_weight, 0.01);
  }
  double species_theoretical_maximum_base_height() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_HEIGHT, 0.01);
  }
  bool mutate_species_theoretical_maximum_base_height(double _species_theoretical_maximum_base_height = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_HEIGHT, _species_theoretical_maximum_base_height, 0.01);
  }
  double species_theoretical_maximum_base_weight() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_WEIGHT, 0.01);
  }
  bool mutate_species_theoretical_maximum_base_weight(double _species_theoretical_maximum_base_weight = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_WEIGHT, _species_theoretical_maximum_base_weight, 0.01);
  }
  double species_theoretical_maximum_height_multiplier() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, 0.01);
  }
  bool mutate_species_theoretical_maximum_height_multiplier(double _species_theoretical_maximum_height_multiplier = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, _species_theoretical_maximum_height_multiplier, 0.01);
  }
  double species_theoretical_maximum_weight_multiplier() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, 0.01);
  }
  bool mutate_species_theoretical_maximum_weight_multiplier(double _species_theoretical_maximum_weight_multiplier = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, _species_theoretical_maximum_weight_multiplier, 0.01);
  }
  double species_theoretical_maximum_speed() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_SPEED, 0.01);
  }
  bool mutate_species_theoretical_maximum_speed(double _species_theoretical_maximum_speed = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_SPEED, _species_theoretical_maximum_speed, 0.01);
  }
  double species_theoretical_maximum_base_speed() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_SPEED, 0.01);
  }
  bool mutate_species_theoretical_maximum_base_speed(double _species_theoretical_maximum_base_speed = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_SPEED, _species_theoretical_maximum_base_speed, 0.01);
  }
  double species_theoretical_maximum_speed_multiplier() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, 0.01);
  }
  bool mutate_species_theoretical_maximum_speed_multiplier(double _species_theoretical_maximum_speed_multiplier = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, _species_theoretical_maximum_speed_multiplier, 0.01);
  }
  double species_theoretical_maximum_base_appetite() const {
    return GetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_APPETITE, 0.01);
  }
  bool mutate_species_theoretical_maximum_base_appetite(double _species_theoretical_maximum_base_appetite = 0.01) {
    return SetField<double>(VT_SPECIES_THEORETICAL_MAXIMUM_BASE_APPETITE, _species_theoretical_maximum_base_appetite, 0.01);
  }
  double mating_age_start() const {
    return GetField<double>(VT_MATING_AGE_START, 0.01);
  }
  bool mutate_mating_age_start(double _mating_age_start = 0.01) {
    return SetField<double>(VT_MATING_AGE_START, _mating_age_start, 0.01);
  }
  double mating_age_end() const {
    return GetField<double>(VT_MATING_AGE_END, 0.01);
  }
  bool mutate_mating_age_end(double _mating_age_end = 0.01) {
    return SetField<double>(VT_MATING_AGE_END, _mating_age_end, 0.01);
  }
  double mutation_probability() const {
    return GetField<double>(VT_MUTATION_PROBABILITY, 0.001);
  }
  bool mutate_mutation_probability(double _mutation_probability = 0.001) {
    return SetField<double>(VT_MUTATION_PROBABILITY, _mutation_probability, 0.001);
  }
  double mating_probability() const {
    return GetField<double>(VT_MATING_PROBABILITY, 0.01);
  }
  bool mutate_mating_probability(double _mating_probability = 0.01) {
    return SetField<double>(VT_MATING_PROBABILITY, _mating_probability, 0.01);
  }
  double conceiving_probability() const {
    return GetField<double>(VT_CONCEIVING_PROBABILITY, 0.01);
  }
  bool mutate_conceiving_probability(double _conceiving_probability = 0.01) {
    return SetField<double>(VT_CONCEIVING_PROBABILITY, _conceiving_probability, 0.01);
  }
  double offsprings_factor() const {
    return GetField<double>(VT_OFFSPRINGS_FACTOR, 0.001);
  }
  bool mutate_offsprings_factor(double _offsprings_factor = 0.001) {
    return SetField<double>(VT_OFFSPRINGS_FACTOR, _offsprings_factor, 0.001);
  }
  double vision_radius() const {
    return GetField<double>(VT_VISION_RADIUS, 0.05);
  }
  bool mutate_vision_radius(double _vision_radius = 0.05) {
    return SetField<double>(VT_VISION_RADIUS, _vision_radius, 0.05);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_SPECIES_MAX_AGE) &&
           VerifyField<double>(verifier, VT_SPECIES_AGE_FITNESS_ON_DEATH_RATIO) &&
           VerifyField<double>(verifier, VT_SPECIES_HEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_SPECIES_WEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_SPECIES_HEIGHT_ON_STAMINA) &&
           VerifyField<double>(verifier, VT_SPECIES_WEIGHT_ON_STAMINA) &&
           VerifyField<double>(verifier, VT_SPECIES_HEIGHT_ON_SPEED) &&
           VerifyField<double>(verifier, VT_SPECIES_WEIGHT_ON_SPEED) &&
           VerifyField<double>(verifier, VT_SPECIES_VITALITY_ON_APPETITE) &&
           VerifyField<double>(verifier, VT_SPECIES_STAMINA_ON_APPETITE) &&
           VerifyField<double>(verifier, VT_SPECIES_VITALITY_ON_SPEED) &&
           VerifyField<double>(verifier, VT_SPECIES_STAMINA_ON_SPEED) &&
           VerifyField<double>(verifier, VT_SPECIES_SLEEP_RESTORE_FACTOR) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_BASE_VITALITY) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_BASE_STAMINA) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_BASE_HEIGHT) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_BASE_WEIGHT) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_SPEED) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_BASE_SPEED) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_SPECIES_THEORETICAL_MAXIMUM_BASE_APPETITE) &&
           VerifyField<double>(verifier, VT_MATING_AGE_START) &&
           VerifyField<double>(verifier, VT_MATING_AGE_END) &&
           VerifyField<double>(verifier, VT_MUTATION_PROBABILITY) &&
           VerifyField<double>(verifier, VT_MATING_PROBABILITY) &&
           VerifyField<double>(verifier, VT_CONCEIVING_PROBABILITY) &&
           VerifyField<double>(verifier, VT_OFFSPRINGS_FACTOR) &&
           VerifyField<double>(verifier, VT_VISION_RADIUS) &&
           verifier.EndTable();
  }
};

struct ModifyBuilder {
  typedef Modify Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_species_max_age(double species_max_age) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_MAX_AGE, species_max_age, 0.1);
  }
  void add_species_age_fitness_on_death_ratio(double species_age_fitness_on_death_ratio) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_AGE_FITNESS_ON_DEATH_RATIO, species_age_fitness_on_death_ratio, 0.001);
  }
  void add_species_height_on_vitality(double species_height_on_vitality) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_HEIGHT_ON_VITALITY, species_height_on_vitality, 0.01);
  }
  void add_species_weight_on_vitality(double species_weight_on_vitality) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_WEIGHT_ON_VITALITY, species_weight_on_vitality, 0.01);
  }
  void add_species_height_on_stamina(double species_height_on_stamina) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_HEIGHT_ON_STAMINA, species_height_on_stamina, 0.01);
  }
  void add_species_weight_on_stamina(double species_weight_on_stamina) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_WEIGHT_ON_STAMINA, species_weight_on_stamina, 0.01);
  }
  void add_species_height_on_speed(double species_height_on_speed) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_HEIGHT_ON_SPEED, species_height_on_speed, 0.01);
  }
  void add_species_weight_on_speed(double species_weight_on_speed) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_WEIGHT_ON_SPEED, species_weight_on_speed, 0.01);
  }
  void add_species_vitality_on_appetite(double species_vitality_on_appetite) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_VITALITY_ON_APPETITE, species_vitality_on_appetite, 0.01);
  }
  void add_species_stamina_on_appetite(double species_stamina_on_appetite) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_STAMINA_ON_APPETITE, species_stamina_on_appetite, 0.01);
  }
  void add_species_vitality_on_speed(double species_vitality_on_speed) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_VITALITY_ON_SPEED, species_vitality_on_speed, 0.01);
  }
  void add_species_stamina_on_speed(double species_stamina_on_speed) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_STAMINA_ON_SPEED, species_stamina_on_speed, 0.01);
  }
  void add_species_sleep_restore_factor(double species_sleep_restore_factor) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_SLEEP_RESTORE_FACTOR, species_sleep_restore_factor, 0.01);
  }
  void add_species_theoretical_maximum_base_vitality(double species_theoretical_maximum_base_vitality) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_BASE_VITALITY, species_theoretical_maximum_base_vitality, 0.01);
  }
  void add_species_theoretical_maximum_vitality_multiplier(double species_theoretical_maximum_vitality_multiplier) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, species_theoretical_maximum_vitality_multiplier, 0.01);
  }
  void add_species_theoretical_maximum_base_stamina(double species_theoretical_maximum_base_stamina) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_BASE_STAMINA, species_theoretical_maximum_base_stamina, 0.01);
  }
  void add_species_theoretical_maximum_stamina_multiplier(double species_theoretical_maximum_stamina_multiplier) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_STAMINA_MULTIPLIER, species_theoretical_maximum_stamina_multiplier, 0.01);
  }
  void add_species_theoretical_maximum_height(double species_theoretical_maximum_height) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT, species_theoretical_maximum_height, 0.01);
  }
  void add_species_theoretical_maximum_weight(double species_theoretical_maximum_weight) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT, species_theoretical_maximum_weight, 0.01);
  }
  void add_species_theoretical_maximum_base_height(double species_theoretical_maximum_base_height) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_BASE_HEIGHT, species_theoretical_maximum_base_height, 0.01);
  }
  void add_species_theoretical_maximum_base_weight(double species_theoretical_maximum_base_weight) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_BASE_WEIGHT, species_theoretical_maximum_base_weight, 0.01);
  }
  void add_species_theoretical_maximum_height_multiplier(double species_theoretical_maximum_height_multiplier) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, species_theoretical_maximum_height_multiplier, 0.01);
  }
  void add_species_theoretical_maximum_weight_multiplier(double species_theoretical_maximum_weight_multiplier) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, species_theoretical_maximum_weight_multiplier, 0.01);
  }
  void add_species_theoretical_maximum_speed(double species_theoretical_maximum_speed) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_SPEED, species_theoretical_maximum_speed, 0.01);
  }
  void add_species_theoretical_maximum_base_speed(double species_theoretical_maximum_base_speed) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_BASE_SPEED, species_theoretical_maximum_base_speed, 0.01);
  }
  void add_species_theoretical_maximum_speed_multiplier(double species_theoretical_maximum_speed_multiplier) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_SPEED_MULTIPLIER, species_theoretical_maximum_speed_multiplier, 0.01);
  }
  void add_species_theoretical_maximum_base_appetite(double species_theoretical_maximum_base_appetite) {
    fbb_.AddElement<double>(Modify::VT_SPECIES_THEORETICAL_MAXIMUM_BASE_APPETITE, species_theoretical_maximum_base_appetite, 0.01);
  }
  void add_mating_age_start(double mating_age_start) {
    fbb_.AddElement<double>(Modify::VT_MATING_AGE_START, mating_age_start, 0.01);
  }
  void add_mating_age_end(double mating_age_end) {
    fbb_.AddElement<double>(Modify::VT_MATING_AGE_END, mating_age_end, 0.01);
  }
  void add_mutation_probability(double mutation_probability) {
    fbb_.AddElement<double>(Modify::VT_MUTATION_PROBABILITY, mutation_probability, 0.001);
  }
  void add_mating_probability(double mating_probability) {
    fbb_.AddElement<double>(Modify::VT_MATING_PROBABILITY, mating_probability, 0.01);
  }
  void add_conceiving_probability(double conceiving_probability) {
    fbb_.AddElement<double>(Modify::VT_CONCEIVING_PROBABILITY, conceiving_probability, 0.01);
  }
  void add_offsprings_factor(double offsprings_factor) {
    fbb_.AddElement<double>(Modify::VT_OFFSPRINGS_FACTOR, offsprings_factor, 0.001);
  }
  void add_vision_radius(double vision_radius) {
    fbb_.AddElement<double>(Modify::VT_VISION_RADIUS, vision_radius, 0.05);
  }
  explicit ModifyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Modify> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Modify>(end);
    return o;
  }
};

inline flatbuffers::Offset<Modify> CreateModify(
    flatbuffers::FlatBufferBuilder &_fbb,
    double species_max_age = 0.1,
    double species_age_fitness_on_death_ratio = 0.001,
    double species_height_on_vitality = 0.01,
    double species_weight_on_vitality = 0.01,
    double species_height_on_stamina = 0.01,
    double species_weight_on_stamina = 0.01,
    double species_height_on_speed = 0.01,
    double species_weight_on_speed = 0.01,
    double species_vitality_on_appetite = 0.01,
    double species_stamina_on_appetite = 0.01,
    double species_vitality_on_speed = 0.01,
    double species_stamina_on_speed = 0.01,
    double species_sleep_restore_factor = 0.01,
    double species_theoretical_maximum_base_vitality = 0.01,
    double species_theoretical_maximum_vitality_multiplier = 0.01,
    double species_theoretical_maximum_base_stamina = 0.01,
    double species_theoretical_maximum_stamina_multiplier = 0.01,
    double species_theoretical_maximum_height = 0.01,
    double species_theoretical_maximum_weight = 0.01,
    double species_theoretical_maximum_base_height = 0.01,
    double species_theoretical_maximum_base_weight = 0.01,
    double species_theoretical_maximum_height_multiplier = 0.01,
    double species_theoretical_maximum_weight_multiplier = 0.01,
    double species_theoretical_maximum_speed = 0.01,
    double species_theoretical_maximum_base_speed = 0.01,
    double species_theoretical_maximum_speed_multiplier = 0.01,
    double species_theoretical_maximum_base_appetite = 0.01,
    double mating_age_start = 0.01,
    double mating_age_end = 0.01,
    double mutation_probability = 0.001,
    double mating_probability = 0.01,
    double conceiving_probability = 0.01,
    double offsprings_factor = 0.001,
    double vision_radius = 0.05) {
  ModifyBuilder builder_(_fbb);
  builder_.add_vision_radius(vision_radius);
  builder_.add_offsprings_factor(offsprings_factor);
  builder_.add_conceiving_probability(conceiving_probability);
  builder_.add_mating_probability(mating_probability);
  builder_.add_mutation_probability(mutation_probability);
  builder_.add_mating_age_end(mating_age_end);
  builder_.add_mating_age_start(mating_age_start);
  builder_.add_species_theoretical_maximum_base_appetite(species_theoretical_maximum_base_appetite);
  builder_.add_species_theoretical_maximum_speed_multiplier(species_theoretical_maximum_speed_multiplier);
  builder_.add_species_theoretical_maximum_base_speed(species_theoretical_maximum_base_speed);
  builder_.add_species_theoretical_maximum_speed(species_theoretical_maximum_speed);
  builder_.add_species_theoretical_maximum_weight_multiplier(species_theoretical_maximum_weight_multiplier);
  builder_.add_species_theoretical_maximum_height_multiplier(species_theoretical_maximum_height_multiplier);
  builder_.add_species_theoretical_maximum_base_weight(species_theoretical_maximum_base_weight);
  builder_.add_species_theoretical_maximum_base_height(species_theoretical_maximum_base_height);
  builder_.add_species_theoretical_maximum_weight(species_theoretical_maximum_weight);
  builder_.add_species_theoretical_maximum_height(species_theoretical_maximum_height);
  builder_.add_species_theoretical_maximum_stamina_multiplier(species_theoretical_maximum_stamina_multiplier);
  builder_.add_species_theoretical_maximum_base_stamina(species_theoretical_maximum_base_stamina);
  builder_.add_species_theoretical_maximum_vitality_multiplier(species_theoretical_maximum_vitality_multiplier);
  builder_.add_species_theoretical_maximum_base_vitality(species_theoretical_maximum_base_vitality);
  builder_.add_species_sleep_restore_factor(species_sleep_restore_factor);
  builder_.add_species_stamina_on_speed(species_stamina_on_speed);
  builder_.add_species_vitality_on_speed(species_vitality_on_speed);
  builder_.add_species_stamina_on_appetite(species_stamina_on_appetite);
  builder_.add_species_vitality_on_appetite(species_vitality_on_appetite);
  builder_.add_species_weight_on_speed(species_weight_on_speed);
  builder_.add_species_height_on_speed(species_height_on_speed);
  builder_.add_species_weight_on_stamina(species_weight_on_stamina);
  builder_.add_species_height_on_stamina(species_height_on_stamina);
  builder_.add_species_weight_on_vitality(species_weight_on_vitality);
  builder_.add_species_height_on_vitality(species_height_on_vitality);
  builder_.add_species_age_fitness_on_death_ratio(species_age_fitness_on_death_ratio);
  builder_.add_species_max_age(species_max_age);
  return builder_.Finish();
}

struct Modify::Traits {
  using type = Modify;
  static auto constexpr Create = CreateModify;
};

inline const flatbuffers::TypeTable *BaseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Ecosystem::ReproductionTypeTable
  };
  static const char * const names[] = {
    "max_age",
    "chromosome_number",
    "age_fitness_on_death_ratio",
    "height_on_vitality",
    "weight_on_vitality",
    "height_on_stamina",
    "weight_on_stamina",
    "height_on_speed",
    "weight_on_speed",
    "vitality_on_appetite",
    "stamina_on_appetite",
    "vitality_on_speed",
    "stamina_on_speed",
    "sleep_restore_factor",
    "theoretical_maximum_base_vitality",
    "theoretical_maximum_vitality_multiplier",
    "theoretical_maximum_base_stamina",
    "theoretical_maximum_stamina_multiplier",
    "theoretical_maximum_height",
    "theoretical_maximum_weight",
    "theoretical_maximum_base_height",
    "theoretical_maximum_base_weight",
    "theoretical_maximum_height_multiplier",
    "theoretical_maximum_weight_multiplier",
    "theoretical_maximum_speed",
    "theoretical_maximum_base_speed",
    "theoretical_maximum_speed_multiplier",
    "theoretical_maximum_base_appetite",
    "mating_age_start",
    "mating_age_end",
    "mutation_probability",
    "mating_probability",
    "conceiving_probability",
    "offsprings_factor",
    "food_chain_rank",
    "vision_radius",
    "is_asexual",
    "chromosome_structure_bv_start",
    "chromosome_structure_bv_length",
    "chromosome_structure_vm_start",
    "chromosome_structure_vm_length",
    "chromosome_structure_bs_start",
    "chromosome_structure_bs_length",
    "chromosome_structure_sm_start",
    "chromosome_structure_sm_length",
    "chromosome_structure_mh_start",
    "chromosome_structure_mh_length",
    "chromosome_structure_mw_start",
    "chromosome_structure_mw_length",
    "chromosome_structure_bh_start",
    "chromosome_structure_bh_length",
    "chromosome_structure_bw_start",
    "chromosome_structure_bw_length",
    "chromosome_structure_hm_start",
    "chromosome_structure_hm_length",
    "chromosome_structure_wm_start",
    "chromosome_structure_wm_length",
    "chromosome_structure_bp_start",
    "chromosome_structure_bp_length",
    "chromosome_structure_pm_start",
    "chromosome_structure_pm_length",
    "chromosome_structure_ba_start",
    "chromosome_structure_ba_length",
    "chromosome_structure_im_start",
    "chromosome_structure_im_length",
    "chromosome_structure_gn_start",
    "chromosome_structure_gn_length"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 67, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ModifyTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "species_max_age",
    "species_age_fitness_on_death_ratio",
    "species_height_on_vitality",
    "species_weight_on_vitality",
    "species_height_on_stamina",
    "species_weight_on_stamina",
    "species_height_on_speed",
    "species_weight_on_speed",
    "species_vitality_on_appetite",
    "species_stamina_on_appetite",
    "species_vitality_on_speed",
    "species_stamina_on_speed",
    "species_sleep_restore_factor",
    "species_theoretical_maximum_base_vitality",
    "species_theoretical_maximum_vitality_multiplier",
    "species_theoretical_maximum_base_stamina",
    "species_theoretical_maximum_stamina_multiplier",
    "species_theoretical_maximum_height",
    "species_theoretical_maximum_weight",
    "species_theoretical_maximum_base_height",
    "species_theoretical_maximum_base_weight",
    "species_theoretical_maximum_height_multiplier",
    "species_theoretical_maximum_weight_multiplier",
    "species_theoretical_maximum_speed",
    "species_theoretical_maximum_base_speed",
    "species_theoretical_maximum_speed_multiplier",
    "species_theoretical_maximum_base_appetite",
    "mating_age_start",
    "mating_age_end",
    "mutation_probability",
    "mating_probability",
    "conceiving_probability",
    "offsprings_factor",
    "vision_radius"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 34, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const Ecosystem::Deer::Base *GetBase(const void *buf) {
  return flatbuffers::GetRoot<Ecosystem::Deer::Base>(buf);
}

inline const Ecosystem::Deer::Base *GetSizePrefixedBase(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Ecosystem::Deer::Base>(buf);
}

inline Base *GetMutableBase(void *buf) {
  return flatbuffers::GetMutableRoot<Base>(buf);
}

inline Ecosystem::Deer::Base *GetMutableSizePrefixedBase(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<Ecosystem::Deer::Base>(buf);
}

inline bool VerifyBaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Ecosystem::Deer::Base>(nullptr);
}

inline bool VerifySizePrefixedBaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Ecosystem::Deer::Base>(nullptr);
}

inline void FinishBaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Ecosystem::Deer::Base> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Ecosystem::Deer::Base> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Deer
}  // namespace Ecosystem

#endif  // FLATBUFFERS_GENERATED_DEER_ECOSYSTEM_DEER_H_
