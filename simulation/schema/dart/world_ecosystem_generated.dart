// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ecosystem;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Gender {
  final int value;
  const Gender._(this.value);

  factory Gender.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum Gender');
    }
    return result;
  }

  static Gender? _createOrNull(int? value) => 
      value == null ? null : Gender.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const Gender male = Gender._(0);
  static const Gender female = Gender._(1);
  static const Map<int, Gender> values = {
    0: male,
    1: female};

  static const fb.Reader<Gender> reader = _GenderReader();

  @override
  String toString() {
    return 'Gender{value: $value}';
  }
}

class _GenderReader extends fb.Reader<Gender> {
  const _GenderReader();

  @override
  int get size => 1;

  @override
  Gender read(fb.BufferContext bc, int offset) =>
      Gender.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Reproduction {
  final int value;
  const Reproduction._(this.value);

  factory Reproduction.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum Reproduction');
    }
    return result;
  }

  static Reproduction? _createOrNull(int? value) => 
      value == null ? null : Reproduction.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const Reproduction sexual = Reproduction._(0);
  static const Reproduction asexual = Reproduction._(1);
  static const Map<int, Reproduction> values = {
    0: sexual,
    1: asexual};

  static const fb.Reader<Reproduction> reader = _ReproductionReader();

  @override
  String toString() {
    return 'Reproduction{value: $value}';
  }
}

class _ReproductionReader extends fb.Reader<Reproduction> {
  const _ReproductionReader();

  @override
  int get size => 1;

  @override
  Reproduction read(fb.BufferContext bc, int offset) =>
      Reproduction.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Monitor {
  final int value;
  const Monitor._(this.value);

  factory Monitor.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum Monitor');
    }
    return result;
  }

  static Monitor? _createOrNull(int? value) => 
      value == null ? null : Monitor.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const Monitor none = Monitor._(0);
  static const Monitor simulation = Monitor._(1);
  static const Map<int, Monitor> values = {
    0: none,
    1: simulation};

  static const fb.Reader<Monitor> reader = _MonitorReader();

  @override
  String toString() {
    return 'Monitor{value: $value}';
  }
}

class _MonitorReader extends fb.Reader<Monitor> {
  const _MonitorReader();

  @override
  int get size => 1;

  @override
  Monitor read(fb.BufferContext bc, int offset) =>
      Monitor.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Sleep {
  final int value;
  const Sleep._(this.value);

  factory Sleep.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum Sleep');
    }
    return result;
  }

  static Sleep? _createOrNull(int? value) => 
      value == null ? null : Sleep.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const Sleep awake = Sleep._(0);
  static const Sleep drowsy = Sleep._(1);
  static const Sleep asleep = Sleep._(2);
  static const Map<int, Sleep> values = {
    0: awake,
    1: drowsy,
    2: asleep};

  static const fb.Reader<Sleep> reader = _SleepReader();

  @override
  String toString() {
    return 'Sleep{value: $value}';
  }
}

class _SleepReader extends fb.Reader<Sleep> {
  const _SleepReader();

  @override
  int get size => 1;

  @override
  Sleep read(fb.BufferContext bc, int offset) =>
      Sleep.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class KingdomE {
  final int value;
  const KingdomE._(this.value);

  factory KingdomE.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum KingdomE');
    }
    return result;
  }

  static KingdomE? _createOrNull(int? value) => 
      value == null ? null : KingdomE.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const KingdomE animal = KingdomE._(0);
  static const KingdomE plant = KingdomE._(1);
  static const Map<int, KingdomE> values = {
    0: animal,
    1: plant};

  static const fb.Reader<KingdomE> reader = _KingdomEReader();

  @override
  String toString() {
    return 'KingdomE{value: $value}';
  }
}

class _KingdomEReader extends fb.Reader<KingdomE> {
  const _KingdomEReader();

  @override
  int get size => 1;

  @override
  KingdomE read(fb.BufferContext bc, int offset) =>
      KingdomE.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class ChromosomeStrand {
  ChromosomeStrand._(this._bc, this._bcOffset);
  factory ChromosomeStrand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ChromosomeStrand> reader = _ChromosomeStrandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get code => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get start => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get length => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'ChromosomeStrand{code: ${code}, start: ${start}, length: ${length}}';
  }

  ChromosomeStrandT unpack() => ChromosomeStrandT(
      code: code,
      start: start,
      length: length);

  static int pack(fb.Builder fbBuilder, ChromosomeStrandT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ChromosomeStrandT implements fb.Packable {
  String? code;
  int start;
  int length;

  ChromosomeStrandT({
      this.code,
      this.start = 0,
      this.length = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? codeOffset = code == null ? null
        : fbBuilder.writeString(code!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, codeOffset);
    fbBuilder.addUint16(1, start);
    fbBuilder.addUint16(2, length);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ChromosomeStrandT{code: ${code}, start: ${start}, length: ${length}}';
  }
}

class _ChromosomeStrandReader extends fb.TableReader<ChromosomeStrand> {
  const _ChromosomeStrandReader();

  @override
  ChromosomeStrand createObject(fb.BufferContext bc, int offset) => 
    ChromosomeStrand._(bc, offset);
}

class ChromosomeStrandBuilder {
  ChromosomeStrandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addCodeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStart(int? start) {
    fbBuilder.addUint16(1, start);
    return fbBuilder.offset;
  }
  int addLength(int? length) {
    fbBuilder.addUint16(2, length);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ChromosomeStrandObjectBuilder extends fb.ObjectBuilder {
  final String? _code;
  final int? _start;
  final int? _length;

  ChromosomeStrandObjectBuilder({
    String? code,
    int? start,
    int? length,
  })
      : _code = code,
        _start = start,
        _length = length;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? codeOffset = _code == null ? null
        : fbBuilder.writeString(_code!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, codeOffset);
    fbBuilder.addUint16(1, _start);
    fbBuilder.addUint16(2, _length);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Organism {
  Organism._(this._bc, this._bcOffset);
  factory Organism(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Organism> reader = _OrganismReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Fixed for a species
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  KingdomE get kingdom => KingdomE.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  int get chromosomeNumber => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 8, 0);
  List<ChromosomeStrand>? get chromosomeStructure => const fb.ListReader<ChromosomeStrand>(ChromosomeStrand.reader).vTableGetNullable(_bc, _bcOffset, 10);
  int get foodChainRank => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 12, 0);
  Reproduction get sexuality => Reproduction.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  double get ageFitnessOnDeathRatio => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  double get conceivingProbability => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  double get matingProbability => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  int get matingAgeStart => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  int get matingAgeEnd => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  int get maxAge => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  double get mutationProbability => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  double get offspringsFactor => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  double get heightOnSpeed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  double get heightOnStamina => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  double get heightOnVitality => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  double get weightOnSpeed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  double get weightOnStamina => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  double get weightOnVitality => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  double get vitalityOnAppetite => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  double get vitalityOnSpeed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  double get staminaOnAppetite => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  double get staminaOnSpeed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  double get theoreticalMaximumBaseAppetite => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  double get theoreticalMaximumBaseHeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  double get theoreticalMaximumBaseSpeed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  double get theoreticalMaximumBaseStamina => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  double get theoreticalMaximumBaseVitality => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  double get theoreticalMaximumBaseWeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  double get theoreticalMaximumHeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  double get theoreticalMaximumSpeed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  double get theoreticalMaximumWeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  double get theoreticalMaximumHeightMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  double get theoreticalMaximumSpeedMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  double get theoreticalMaximumStaminaMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  double get theoreticalMaximumVitalityMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  double get theoreticalMaximumWeightMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///   Fixed for an organism
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  List<int>? get chromosome => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 82);
  Gender get gender => Gender.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 84, 0));
  int get generation => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  double get immunity => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  double get baseAppetite => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  double get baseHeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  double get baseSpeed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  double get baseStamina => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  double get baseVitality => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  double get baseWeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  double get heightMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  double get speedMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  double get staminaMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  double get vitalityMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  double get weightMultiplier => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  double get maxHeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  double get maxWeight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Stats affected by age
  int get age => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 116, 0);
  double get height => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  double get weight => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  double get staticFitness => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  double get maxAppetiteAtAge => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  double get maxSpeedAtAge => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  double get maxStaminaAtAge => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  double get maxVitalityAtAge => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  double get appetite => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  double get speed => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  double get stamina => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  double get vitality => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  int get x => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 140, 0);
  int get y => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 142, 0);
  double get dynamicFitness => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 144, 1.0);
  ///  Miscellaneous attributes
  double get visionRadius => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  double get sleepRestoreFactor => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  Sleep get asleep => Sleep.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 150, 0));
  Monitor get monitor => Monitor.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 152, 0));

  @override
  String toString() {
    return 'Organism{kind: ${kind}, kingdom: ${kingdom}, chromosomeNumber: ${chromosomeNumber}, chromosomeStructure: ${chromosomeStructure}, foodChainRank: ${foodChainRank}, sexuality: ${sexuality}, ageFitnessOnDeathRatio: ${ageFitnessOnDeathRatio}, conceivingProbability: ${conceivingProbability}, matingProbability: ${matingProbability}, matingAgeStart: ${matingAgeStart}, matingAgeEnd: ${matingAgeEnd}, maxAge: ${maxAge}, mutationProbability: ${mutationProbability}, offspringsFactor: ${offspringsFactor}, heightOnSpeed: ${heightOnSpeed}, heightOnStamina: ${heightOnStamina}, heightOnVitality: ${heightOnVitality}, weightOnSpeed: ${weightOnSpeed}, weightOnStamina: ${weightOnStamina}, weightOnVitality: ${weightOnVitality}, vitalityOnAppetite: ${vitalityOnAppetite}, vitalityOnSpeed: ${vitalityOnSpeed}, staminaOnAppetite: ${staminaOnAppetite}, staminaOnSpeed: ${staminaOnSpeed}, theoreticalMaximumBaseAppetite: ${theoreticalMaximumBaseAppetite}, theoreticalMaximumBaseHeight: ${theoreticalMaximumBaseHeight}, theoreticalMaximumBaseSpeed: ${theoreticalMaximumBaseSpeed}, theoreticalMaximumBaseStamina: ${theoreticalMaximumBaseStamina}, theoreticalMaximumBaseVitality: ${theoreticalMaximumBaseVitality}, theoreticalMaximumBaseWeight: ${theoreticalMaximumBaseWeight}, theoreticalMaximumHeight: ${theoreticalMaximumHeight}, theoreticalMaximumSpeed: ${theoreticalMaximumSpeed}, theoreticalMaximumWeight: ${theoreticalMaximumWeight}, theoreticalMaximumHeightMultiplier: ${theoreticalMaximumHeightMultiplier}, theoreticalMaximumSpeedMultiplier: ${theoreticalMaximumSpeedMultiplier}, theoreticalMaximumStaminaMultiplier: ${theoreticalMaximumStaminaMultiplier}, theoreticalMaximumVitalityMultiplier: ${theoreticalMaximumVitalityMultiplier}, theoreticalMaximumWeightMultiplier: ${theoreticalMaximumWeightMultiplier}, name: ${name}, chromosome: ${chromosome}, gender: ${gender}, generation: ${generation}, immunity: ${immunity}, baseAppetite: ${baseAppetite}, baseHeight: ${baseHeight}, baseSpeed: ${baseSpeed}, baseStamina: ${baseStamina}, baseVitality: ${baseVitality}, baseWeight: ${baseWeight}, heightMultiplier: ${heightMultiplier}, speedMultiplier: ${speedMultiplier}, staminaMultiplier: ${staminaMultiplier}, vitalityMultiplier: ${vitalityMultiplier}, weightMultiplier: ${weightMultiplier}, maxHeight: ${maxHeight}, maxWeight: ${maxWeight}, age: ${age}, height: ${height}, weight: ${weight}, staticFitness: ${staticFitness}, maxAppetiteAtAge: ${maxAppetiteAtAge}, maxSpeedAtAge: ${maxSpeedAtAge}, maxStaminaAtAge: ${maxStaminaAtAge}, maxVitalityAtAge: ${maxVitalityAtAge}, appetite: ${appetite}, speed: ${speed}, stamina: ${stamina}, vitality: ${vitality}, x: ${x}, y: ${y}, dynamicFitness: ${dynamicFitness}, visionRadius: ${visionRadius}, sleepRestoreFactor: ${sleepRestoreFactor}, asleep: ${asleep}, monitor: ${monitor}}';
  }

  OrganismT unpack() => OrganismT(
      kind: kind,
      kingdom: kingdom,
      chromosomeNumber: chromosomeNumber,
      chromosomeStructure: chromosomeStructure?.map((e) => e.unpack()).toList(),
      foodChainRank: foodChainRank,
      sexuality: sexuality,
      ageFitnessOnDeathRatio: ageFitnessOnDeathRatio,
      conceivingProbability: conceivingProbability,
      matingProbability: matingProbability,
      matingAgeStart: matingAgeStart,
      matingAgeEnd: matingAgeEnd,
      maxAge: maxAge,
      mutationProbability: mutationProbability,
      offspringsFactor: offspringsFactor,
      heightOnSpeed: heightOnSpeed,
      heightOnStamina: heightOnStamina,
      heightOnVitality: heightOnVitality,
      weightOnSpeed: weightOnSpeed,
      weightOnStamina: weightOnStamina,
      weightOnVitality: weightOnVitality,
      vitalityOnAppetite: vitalityOnAppetite,
      vitalityOnSpeed: vitalityOnSpeed,
      staminaOnAppetite: staminaOnAppetite,
      staminaOnSpeed: staminaOnSpeed,
      theoreticalMaximumBaseAppetite: theoreticalMaximumBaseAppetite,
      theoreticalMaximumBaseHeight: theoreticalMaximumBaseHeight,
      theoreticalMaximumBaseSpeed: theoreticalMaximumBaseSpeed,
      theoreticalMaximumBaseStamina: theoreticalMaximumBaseStamina,
      theoreticalMaximumBaseVitality: theoreticalMaximumBaseVitality,
      theoreticalMaximumBaseWeight: theoreticalMaximumBaseWeight,
      theoreticalMaximumHeight: theoreticalMaximumHeight,
      theoreticalMaximumSpeed: theoreticalMaximumSpeed,
      theoreticalMaximumWeight: theoreticalMaximumWeight,
      theoreticalMaximumHeightMultiplier: theoreticalMaximumHeightMultiplier,
      theoreticalMaximumSpeedMultiplier: theoreticalMaximumSpeedMultiplier,
      theoreticalMaximumStaminaMultiplier: theoreticalMaximumStaminaMultiplier,
      theoreticalMaximumVitalityMultiplier: theoreticalMaximumVitalityMultiplier,
      theoreticalMaximumWeightMultiplier: theoreticalMaximumWeightMultiplier,
      name: name,
      chromosome: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 82),
      gender: gender,
      generation: generation,
      immunity: immunity,
      baseAppetite: baseAppetite,
      baseHeight: baseHeight,
      baseSpeed: baseSpeed,
      baseStamina: baseStamina,
      baseVitality: baseVitality,
      baseWeight: baseWeight,
      heightMultiplier: heightMultiplier,
      speedMultiplier: speedMultiplier,
      staminaMultiplier: staminaMultiplier,
      vitalityMultiplier: vitalityMultiplier,
      weightMultiplier: weightMultiplier,
      maxHeight: maxHeight,
      maxWeight: maxWeight,
      age: age,
      height: height,
      weight: weight,
      staticFitness: staticFitness,
      maxAppetiteAtAge: maxAppetiteAtAge,
      maxSpeedAtAge: maxSpeedAtAge,
      maxStaminaAtAge: maxStaminaAtAge,
      maxVitalityAtAge: maxVitalityAtAge,
      appetite: appetite,
      speed: speed,
      stamina: stamina,
      vitality: vitality,
      x: x,
      y: y,
      dynamicFitness: dynamicFitness,
      visionRadius: visionRadius,
      sleepRestoreFactor: sleepRestoreFactor,
      asleep: asleep,
      monitor: monitor);

  static int pack(fb.Builder fbBuilder, OrganismT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class OrganismT implements fb.Packable {
  ///  Fixed for a species
  String? kind;
  KingdomE kingdom;
  int chromosomeNumber;
  List<ChromosomeStrandT>? chromosomeStructure;
  int foodChainRank;
  Reproduction sexuality;
  double ageFitnessOnDeathRatio;
  double conceivingProbability;
  double matingProbability;
  int matingAgeStart;
  int matingAgeEnd;
  int maxAge;
  double mutationProbability;
  double offspringsFactor;
  double heightOnSpeed;
  double heightOnStamina;
  double heightOnVitality;
  double weightOnSpeed;
  double weightOnStamina;
  double weightOnVitality;
  double vitalityOnAppetite;
  double vitalityOnSpeed;
  double staminaOnAppetite;
  double staminaOnSpeed;
  double theoreticalMaximumBaseAppetite;
  double theoreticalMaximumBaseHeight;
  double theoreticalMaximumBaseSpeed;
  double theoreticalMaximumBaseStamina;
  double theoreticalMaximumBaseVitality;
  double theoreticalMaximumBaseWeight;
  double theoreticalMaximumHeight;
  double theoreticalMaximumSpeed;
  double theoreticalMaximumWeight;
  double theoreticalMaximumHeightMultiplier;
  double theoreticalMaximumSpeedMultiplier;
  double theoreticalMaximumStaminaMultiplier;
  double theoreticalMaximumVitalityMultiplier;
  double theoreticalMaximumWeightMultiplier;
  ///   Fixed for an organism
  String? name;
  List<int>? chromosome;
  Gender gender;
  int generation;
  double immunity;
  double baseAppetite;
  double baseHeight;
  double baseSpeed;
  double baseStamina;
  double baseVitality;
  double baseWeight;
  double heightMultiplier;
  double speedMultiplier;
  double staminaMultiplier;
  double vitalityMultiplier;
  double weightMultiplier;
  double maxHeight;
  double maxWeight;
  ///  Stats affected by age
  int age;
  double height;
  double weight;
  double staticFitness;
  double maxAppetiteAtAge;
  double maxSpeedAtAge;
  double maxStaminaAtAge;
  double maxVitalityAtAge;
  double appetite;
  double speed;
  double stamina;
  double vitality;
  int x;
  int y;
  double dynamicFitness;
  ///  Miscellaneous attributes
  double visionRadius;
  double sleepRestoreFactor;
  Sleep asleep;
  Monitor monitor;

  OrganismT({
      this.kind,
      this.kingdom = KingdomE.animal,
      this.chromosomeNumber = 0,
      this.chromosomeStructure,
      this.foodChainRank = 0,
      this.sexuality = Reproduction.sexual,
      this.ageFitnessOnDeathRatio = 0.0,
      this.conceivingProbability = 0.0,
      this.matingProbability = 0.0,
      this.matingAgeStart = 0,
      this.matingAgeEnd = 0,
      this.maxAge = 0,
      this.mutationProbability = 0.0,
      this.offspringsFactor = 0.0,
      this.heightOnSpeed = 0.0,
      this.heightOnStamina = 0.0,
      this.heightOnVitality = 0.0,
      this.weightOnSpeed = 0.0,
      this.weightOnStamina = 0.0,
      this.weightOnVitality = 0.0,
      this.vitalityOnAppetite = 0.0,
      this.vitalityOnSpeed = 0.0,
      this.staminaOnAppetite = 0.0,
      this.staminaOnSpeed = 0.0,
      this.theoreticalMaximumBaseAppetite = 0.0,
      this.theoreticalMaximumBaseHeight = 0.0,
      this.theoreticalMaximumBaseSpeed = 0.0,
      this.theoreticalMaximumBaseStamina = 0.0,
      this.theoreticalMaximumBaseVitality = 0.0,
      this.theoreticalMaximumBaseWeight = 0.0,
      this.theoreticalMaximumHeight = 0.0,
      this.theoreticalMaximumSpeed = 0.0,
      this.theoreticalMaximumWeight = 0.0,
      this.theoreticalMaximumHeightMultiplier = 0.0,
      this.theoreticalMaximumSpeedMultiplier = 0.0,
      this.theoreticalMaximumStaminaMultiplier = 0.0,
      this.theoreticalMaximumVitalityMultiplier = 0.0,
      this.theoreticalMaximumWeightMultiplier = 0.0,
      this.name,
      this.chromosome,
      this.gender = Gender.male,
      this.generation = 0,
      this.immunity = 0.0,
      this.baseAppetite = 0.0,
      this.baseHeight = 0.0,
      this.baseSpeed = 0.0,
      this.baseStamina = 0.0,
      this.baseVitality = 0.0,
      this.baseWeight = 0.0,
      this.heightMultiplier = 0.0,
      this.speedMultiplier = 0.0,
      this.staminaMultiplier = 0.0,
      this.vitalityMultiplier = 0.0,
      this.weightMultiplier = 0.0,
      this.maxHeight = 0.0,
      this.maxWeight = 0.0,
      this.age = 0,
      this.height = 0.0,
      this.weight = 0.0,
      this.staticFitness = 0.0,
      this.maxAppetiteAtAge = 0.0,
      this.maxSpeedAtAge = 0.0,
      this.maxStaminaAtAge = 0.0,
      this.maxVitalityAtAge = 0.0,
      this.appetite = 0.0,
      this.speed = 0.0,
      this.stamina = 0.0,
      this.vitality = 0.0,
      this.x = 0,
      this.y = 0,
      this.dynamicFitness = 1.0,
      this.visionRadius = 0.0,
      this.sleepRestoreFactor = 0.0,
      this.asleep = Sleep.awake,
      this.monitor = Monitor.none});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? kindOffset = kind == null ? null
        : fbBuilder.writeString(kind!);
    final int? chromosomeStructureOffset = chromosomeStructure == null ? null
        : fbBuilder.writeList(chromosomeStructure!.map((b) => b.pack(fbBuilder)).toList());
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? chromosomeOffset = chromosome == null ? null
        : fbBuilder.writeListUint8(chromosome!);
    fbBuilder.startTable(75);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addUint8(1, kingdom.value);
    fbBuilder.addUint16(2, chromosomeNumber);
    fbBuilder.addOffset(3, chromosomeStructureOffset);
    fbBuilder.addUint8(4, foodChainRank);
    fbBuilder.addUint8(5, sexuality.value);
    fbBuilder.addFloat32(6, ageFitnessOnDeathRatio);
    fbBuilder.addFloat32(7, conceivingProbability);
    fbBuilder.addFloat32(8, matingProbability);
    fbBuilder.addUint32(9, matingAgeStart);
    fbBuilder.addUint32(10, matingAgeEnd);
    fbBuilder.addUint32(11, maxAge);
    fbBuilder.addFloat32(12, mutationProbability);
    fbBuilder.addFloat32(13, offspringsFactor);
    fbBuilder.addFloat32(14, heightOnSpeed);
    fbBuilder.addFloat32(15, heightOnStamina);
    fbBuilder.addFloat32(16, heightOnVitality);
    fbBuilder.addFloat32(17, weightOnSpeed);
    fbBuilder.addFloat32(18, weightOnStamina);
    fbBuilder.addFloat32(19, weightOnVitality);
    fbBuilder.addFloat32(20, vitalityOnAppetite);
    fbBuilder.addFloat32(21, vitalityOnSpeed);
    fbBuilder.addFloat32(22, staminaOnAppetite);
    fbBuilder.addFloat32(23, staminaOnSpeed);
    fbBuilder.addFloat32(24, theoreticalMaximumBaseAppetite);
    fbBuilder.addFloat32(25, theoreticalMaximumBaseHeight);
    fbBuilder.addFloat32(26, theoreticalMaximumBaseSpeed);
    fbBuilder.addFloat32(27, theoreticalMaximumBaseStamina);
    fbBuilder.addFloat32(28, theoreticalMaximumBaseVitality);
    fbBuilder.addFloat32(29, theoreticalMaximumBaseWeight);
    fbBuilder.addFloat32(30, theoreticalMaximumHeight);
    fbBuilder.addFloat32(31, theoreticalMaximumSpeed);
    fbBuilder.addFloat32(32, theoreticalMaximumWeight);
    fbBuilder.addFloat32(33, theoreticalMaximumHeightMultiplier);
    fbBuilder.addFloat32(34, theoreticalMaximumSpeedMultiplier);
    fbBuilder.addFloat32(35, theoreticalMaximumStaminaMultiplier);
    fbBuilder.addFloat32(36, theoreticalMaximumVitalityMultiplier);
    fbBuilder.addFloat32(37, theoreticalMaximumWeightMultiplier);
    fbBuilder.addOffset(38, nameOffset);
    fbBuilder.addOffset(39, chromosomeOffset);
    fbBuilder.addUint8(40, gender.value);
    fbBuilder.addUint32(41, generation);
    fbBuilder.addFloat32(42, immunity);
    fbBuilder.addFloat32(43, baseAppetite);
    fbBuilder.addFloat32(44, baseHeight);
    fbBuilder.addFloat32(45, baseSpeed);
    fbBuilder.addFloat32(46, baseStamina);
    fbBuilder.addFloat32(47, baseVitality);
    fbBuilder.addFloat32(48, baseWeight);
    fbBuilder.addFloat32(49, heightMultiplier);
    fbBuilder.addFloat32(50, speedMultiplier);
    fbBuilder.addFloat32(51, staminaMultiplier);
    fbBuilder.addFloat32(52, vitalityMultiplier);
    fbBuilder.addFloat32(53, weightMultiplier);
    fbBuilder.addFloat32(54, maxHeight);
    fbBuilder.addFloat32(55, maxWeight);
    fbBuilder.addUint32(56, age);
    fbBuilder.addFloat32(57, height);
    fbBuilder.addFloat32(58, weight);
    fbBuilder.addFloat32(59, staticFitness);
    fbBuilder.addFloat32(60, maxAppetiteAtAge);
    fbBuilder.addFloat32(61, maxSpeedAtAge);
    fbBuilder.addFloat32(62, maxStaminaAtAge);
    fbBuilder.addFloat32(63, maxVitalityAtAge);
    fbBuilder.addFloat32(64, appetite);
    fbBuilder.addFloat32(65, speed);
    fbBuilder.addFloat32(66, stamina);
    fbBuilder.addFloat32(67, vitality);
    fbBuilder.addUint64(68, x);
    fbBuilder.addUint64(69, y);
    fbBuilder.addFloat32(70, dynamicFitness);
    fbBuilder.addFloat32(71, visionRadius);
    fbBuilder.addFloat32(72, sleepRestoreFactor);
    fbBuilder.addUint8(73, asleep.value);
    fbBuilder.addUint8(74, monitor.value);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'OrganismT{kind: ${kind}, kingdom: ${kingdom}, chromosomeNumber: ${chromosomeNumber}, chromosomeStructure: ${chromosomeStructure}, foodChainRank: ${foodChainRank}, sexuality: ${sexuality}, ageFitnessOnDeathRatio: ${ageFitnessOnDeathRatio}, conceivingProbability: ${conceivingProbability}, matingProbability: ${matingProbability}, matingAgeStart: ${matingAgeStart}, matingAgeEnd: ${matingAgeEnd}, maxAge: ${maxAge}, mutationProbability: ${mutationProbability}, offspringsFactor: ${offspringsFactor}, heightOnSpeed: ${heightOnSpeed}, heightOnStamina: ${heightOnStamina}, heightOnVitality: ${heightOnVitality}, weightOnSpeed: ${weightOnSpeed}, weightOnStamina: ${weightOnStamina}, weightOnVitality: ${weightOnVitality}, vitalityOnAppetite: ${vitalityOnAppetite}, vitalityOnSpeed: ${vitalityOnSpeed}, staminaOnAppetite: ${staminaOnAppetite}, staminaOnSpeed: ${staminaOnSpeed}, theoreticalMaximumBaseAppetite: ${theoreticalMaximumBaseAppetite}, theoreticalMaximumBaseHeight: ${theoreticalMaximumBaseHeight}, theoreticalMaximumBaseSpeed: ${theoreticalMaximumBaseSpeed}, theoreticalMaximumBaseStamina: ${theoreticalMaximumBaseStamina}, theoreticalMaximumBaseVitality: ${theoreticalMaximumBaseVitality}, theoreticalMaximumBaseWeight: ${theoreticalMaximumBaseWeight}, theoreticalMaximumHeight: ${theoreticalMaximumHeight}, theoreticalMaximumSpeed: ${theoreticalMaximumSpeed}, theoreticalMaximumWeight: ${theoreticalMaximumWeight}, theoreticalMaximumHeightMultiplier: ${theoreticalMaximumHeightMultiplier}, theoreticalMaximumSpeedMultiplier: ${theoreticalMaximumSpeedMultiplier}, theoreticalMaximumStaminaMultiplier: ${theoreticalMaximumStaminaMultiplier}, theoreticalMaximumVitalityMultiplier: ${theoreticalMaximumVitalityMultiplier}, theoreticalMaximumWeightMultiplier: ${theoreticalMaximumWeightMultiplier}, name: ${name}, chromosome: ${chromosome}, gender: ${gender}, generation: ${generation}, immunity: ${immunity}, baseAppetite: ${baseAppetite}, baseHeight: ${baseHeight}, baseSpeed: ${baseSpeed}, baseStamina: ${baseStamina}, baseVitality: ${baseVitality}, baseWeight: ${baseWeight}, heightMultiplier: ${heightMultiplier}, speedMultiplier: ${speedMultiplier}, staminaMultiplier: ${staminaMultiplier}, vitalityMultiplier: ${vitalityMultiplier}, weightMultiplier: ${weightMultiplier}, maxHeight: ${maxHeight}, maxWeight: ${maxWeight}, age: ${age}, height: ${height}, weight: ${weight}, staticFitness: ${staticFitness}, maxAppetiteAtAge: ${maxAppetiteAtAge}, maxSpeedAtAge: ${maxSpeedAtAge}, maxStaminaAtAge: ${maxStaminaAtAge}, maxVitalityAtAge: ${maxVitalityAtAge}, appetite: ${appetite}, speed: ${speed}, stamina: ${stamina}, vitality: ${vitality}, x: ${x}, y: ${y}, dynamicFitness: ${dynamicFitness}, visionRadius: ${visionRadius}, sleepRestoreFactor: ${sleepRestoreFactor}, asleep: ${asleep}, monitor: ${monitor}}';
  }
}

class _OrganismReader extends fb.TableReader<Organism> {
  const _OrganismReader();

  @override
  Organism createObject(fb.BufferContext bc, int offset) => 
    Organism._(bc, offset);
}

class OrganismBuilder {
  OrganismBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(75);
  }

  int addKindOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKingdom(KingdomE? kingdom) {
    fbBuilder.addUint8(1, kingdom?.value);
    return fbBuilder.offset;
  }
  int addChromosomeNumber(int? chromosomeNumber) {
    fbBuilder.addUint16(2, chromosomeNumber);
    return fbBuilder.offset;
  }
  int addChromosomeStructureOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFoodChainRank(int? foodChainRank) {
    fbBuilder.addUint8(4, foodChainRank);
    return fbBuilder.offset;
  }
  int addSexuality(Reproduction? sexuality) {
    fbBuilder.addUint8(5, sexuality?.value);
    return fbBuilder.offset;
  }
  int addAgeFitnessOnDeathRatio(double? ageFitnessOnDeathRatio) {
    fbBuilder.addFloat32(6, ageFitnessOnDeathRatio);
    return fbBuilder.offset;
  }
  int addConceivingProbability(double? conceivingProbability) {
    fbBuilder.addFloat32(7, conceivingProbability);
    return fbBuilder.offset;
  }
  int addMatingProbability(double? matingProbability) {
    fbBuilder.addFloat32(8, matingProbability);
    return fbBuilder.offset;
  }
  int addMatingAgeStart(int? matingAgeStart) {
    fbBuilder.addUint32(9, matingAgeStart);
    return fbBuilder.offset;
  }
  int addMatingAgeEnd(int? matingAgeEnd) {
    fbBuilder.addUint32(10, matingAgeEnd);
    return fbBuilder.offset;
  }
  int addMaxAge(int? maxAge) {
    fbBuilder.addUint32(11, maxAge);
    return fbBuilder.offset;
  }
  int addMutationProbability(double? mutationProbability) {
    fbBuilder.addFloat32(12, mutationProbability);
    return fbBuilder.offset;
  }
  int addOffspringsFactor(double? offspringsFactor) {
    fbBuilder.addFloat32(13, offspringsFactor);
    return fbBuilder.offset;
  }
  int addHeightOnSpeed(double? heightOnSpeed) {
    fbBuilder.addFloat32(14, heightOnSpeed);
    return fbBuilder.offset;
  }
  int addHeightOnStamina(double? heightOnStamina) {
    fbBuilder.addFloat32(15, heightOnStamina);
    return fbBuilder.offset;
  }
  int addHeightOnVitality(double? heightOnVitality) {
    fbBuilder.addFloat32(16, heightOnVitality);
    return fbBuilder.offset;
  }
  int addWeightOnSpeed(double? weightOnSpeed) {
    fbBuilder.addFloat32(17, weightOnSpeed);
    return fbBuilder.offset;
  }
  int addWeightOnStamina(double? weightOnStamina) {
    fbBuilder.addFloat32(18, weightOnStamina);
    return fbBuilder.offset;
  }
  int addWeightOnVitality(double? weightOnVitality) {
    fbBuilder.addFloat32(19, weightOnVitality);
    return fbBuilder.offset;
  }
  int addVitalityOnAppetite(double? vitalityOnAppetite) {
    fbBuilder.addFloat32(20, vitalityOnAppetite);
    return fbBuilder.offset;
  }
  int addVitalityOnSpeed(double? vitalityOnSpeed) {
    fbBuilder.addFloat32(21, vitalityOnSpeed);
    return fbBuilder.offset;
  }
  int addStaminaOnAppetite(double? staminaOnAppetite) {
    fbBuilder.addFloat32(22, staminaOnAppetite);
    return fbBuilder.offset;
  }
  int addStaminaOnSpeed(double? staminaOnSpeed) {
    fbBuilder.addFloat32(23, staminaOnSpeed);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumBaseAppetite(double? theoreticalMaximumBaseAppetite) {
    fbBuilder.addFloat32(24, theoreticalMaximumBaseAppetite);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumBaseHeight(double? theoreticalMaximumBaseHeight) {
    fbBuilder.addFloat32(25, theoreticalMaximumBaseHeight);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumBaseSpeed(double? theoreticalMaximumBaseSpeed) {
    fbBuilder.addFloat32(26, theoreticalMaximumBaseSpeed);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumBaseStamina(double? theoreticalMaximumBaseStamina) {
    fbBuilder.addFloat32(27, theoreticalMaximumBaseStamina);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumBaseVitality(double? theoreticalMaximumBaseVitality) {
    fbBuilder.addFloat32(28, theoreticalMaximumBaseVitality);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumBaseWeight(double? theoreticalMaximumBaseWeight) {
    fbBuilder.addFloat32(29, theoreticalMaximumBaseWeight);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumHeight(double? theoreticalMaximumHeight) {
    fbBuilder.addFloat32(30, theoreticalMaximumHeight);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumSpeed(double? theoreticalMaximumSpeed) {
    fbBuilder.addFloat32(31, theoreticalMaximumSpeed);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumWeight(double? theoreticalMaximumWeight) {
    fbBuilder.addFloat32(32, theoreticalMaximumWeight);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumHeightMultiplier(double? theoreticalMaximumHeightMultiplier) {
    fbBuilder.addFloat32(33, theoreticalMaximumHeightMultiplier);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumSpeedMultiplier(double? theoreticalMaximumSpeedMultiplier) {
    fbBuilder.addFloat32(34, theoreticalMaximumSpeedMultiplier);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumStaminaMultiplier(double? theoreticalMaximumStaminaMultiplier) {
    fbBuilder.addFloat32(35, theoreticalMaximumStaminaMultiplier);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumVitalityMultiplier(double? theoreticalMaximumVitalityMultiplier) {
    fbBuilder.addFloat32(36, theoreticalMaximumVitalityMultiplier);
    return fbBuilder.offset;
  }
  int addTheoreticalMaximumWeightMultiplier(double? theoreticalMaximumWeightMultiplier) {
    fbBuilder.addFloat32(37, theoreticalMaximumWeightMultiplier);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addChromosomeOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addGender(Gender? gender) {
    fbBuilder.addUint8(40, gender?.value);
    return fbBuilder.offset;
  }
  int addGeneration(int? generation) {
    fbBuilder.addUint32(41, generation);
    return fbBuilder.offset;
  }
  int addImmunity(double? immunity) {
    fbBuilder.addFloat32(42, immunity);
    return fbBuilder.offset;
  }
  int addBaseAppetite(double? baseAppetite) {
    fbBuilder.addFloat32(43, baseAppetite);
    return fbBuilder.offset;
  }
  int addBaseHeight(double? baseHeight) {
    fbBuilder.addFloat32(44, baseHeight);
    return fbBuilder.offset;
  }
  int addBaseSpeed(double? baseSpeed) {
    fbBuilder.addFloat32(45, baseSpeed);
    return fbBuilder.offset;
  }
  int addBaseStamina(double? baseStamina) {
    fbBuilder.addFloat32(46, baseStamina);
    return fbBuilder.offset;
  }
  int addBaseVitality(double? baseVitality) {
    fbBuilder.addFloat32(47, baseVitality);
    return fbBuilder.offset;
  }
  int addBaseWeight(double? baseWeight) {
    fbBuilder.addFloat32(48, baseWeight);
    return fbBuilder.offset;
  }
  int addHeightMultiplier(double? heightMultiplier) {
    fbBuilder.addFloat32(49, heightMultiplier);
    return fbBuilder.offset;
  }
  int addSpeedMultiplier(double? speedMultiplier) {
    fbBuilder.addFloat32(50, speedMultiplier);
    return fbBuilder.offset;
  }
  int addStaminaMultiplier(double? staminaMultiplier) {
    fbBuilder.addFloat32(51, staminaMultiplier);
    return fbBuilder.offset;
  }
  int addVitalityMultiplier(double? vitalityMultiplier) {
    fbBuilder.addFloat32(52, vitalityMultiplier);
    return fbBuilder.offset;
  }
  int addWeightMultiplier(double? weightMultiplier) {
    fbBuilder.addFloat32(53, weightMultiplier);
    return fbBuilder.offset;
  }
  int addMaxHeight(double? maxHeight) {
    fbBuilder.addFloat32(54, maxHeight);
    return fbBuilder.offset;
  }
  int addMaxWeight(double? maxWeight) {
    fbBuilder.addFloat32(55, maxWeight);
    return fbBuilder.offset;
  }
  int addAge(int? age) {
    fbBuilder.addUint32(56, age);
    return fbBuilder.offset;
  }
  int addHeight(double? height) {
    fbBuilder.addFloat32(57, height);
    return fbBuilder.offset;
  }
  int addWeight(double? weight) {
    fbBuilder.addFloat32(58, weight);
    return fbBuilder.offset;
  }
  int addStaticFitness(double? staticFitness) {
    fbBuilder.addFloat32(59, staticFitness);
    return fbBuilder.offset;
  }
  int addMaxAppetiteAtAge(double? maxAppetiteAtAge) {
    fbBuilder.addFloat32(60, maxAppetiteAtAge);
    return fbBuilder.offset;
  }
  int addMaxSpeedAtAge(double? maxSpeedAtAge) {
    fbBuilder.addFloat32(61, maxSpeedAtAge);
    return fbBuilder.offset;
  }
  int addMaxStaminaAtAge(double? maxStaminaAtAge) {
    fbBuilder.addFloat32(62, maxStaminaAtAge);
    return fbBuilder.offset;
  }
  int addMaxVitalityAtAge(double? maxVitalityAtAge) {
    fbBuilder.addFloat32(63, maxVitalityAtAge);
    return fbBuilder.offset;
  }
  int addAppetite(double? appetite) {
    fbBuilder.addFloat32(64, appetite);
    return fbBuilder.offset;
  }
  int addSpeed(double? speed) {
    fbBuilder.addFloat32(65, speed);
    return fbBuilder.offset;
  }
  int addStamina(double? stamina) {
    fbBuilder.addFloat32(66, stamina);
    return fbBuilder.offset;
  }
  int addVitality(double? vitality) {
    fbBuilder.addFloat32(67, vitality);
    return fbBuilder.offset;
  }
  int addX(int? x) {
    fbBuilder.addUint64(68, x);
    return fbBuilder.offset;
  }
  int addY(int? y) {
    fbBuilder.addUint64(69, y);
    return fbBuilder.offset;
  }
  int addDynamicFitness(double? dynamicFitness) {
    fbBuilder.addFloat32(70, dynamicFitness);
    return fbBuilder.offset;
  }
  int addVisionRadius(double? visionRadius) {
    fbBuilder.addFloat32(71, visionRadius);
    return fbBuilder.offset;
  }
  int addSleepRestoreFactor(double? sleepRestoreFactor) {
    fbBuilder.addFloat32(72, sleepRestoreFactor);
    return fbBuilder.offset;
  }
  int addAsleep(Sleep? asleep) {
    fbBuilder.addUint8(73, asleep?.value);
    return fbBuilder.offset;
  }
  int addMonitor(Monitor? monitor) {
    fbBuilder.addUint8(74, monitor?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OrganismObjectBuilder extends fb.ObjectBuilder {
  final String? _kind;
  final KingdomE? _kingdom;
  final int? _chromosomeNumber;
  final List<ChromosomeStrandObjectBuilder>? _chromosomeStructure;
  final int? _foodChainRank;
  final Reproduction? _sexuality;
  final double? _ageFitnessOnDeathRatio;
  final double? _conceivingProbability;
  final double? _matingProbability;
  final int? _matingAgeStart;
  final int? _matingAgeEnd;
  final int? _maxAge;
  final double? _mutationProbability;
  final double? _offspringsFactor;
  final double? _heightOnSpeed;
  final double? _heightOnStamina;
  final double? _heightOnVitality;
  final double? _weightOnSpeed;
  final double? _weightOnStamina;
  final double? _weightOnVitality;
  final double? _vitalityOnAppetite;
  final double? _vitalityOnSpeed;
  final double? _staminaOnAppetite;
  final double? _staminaOnSpeed;
  final double? _theoreticalMaximumBaseAppetite;
  final double? _theoreticalMaximumBaseHeight;
  final double? _theoreticalMaximumBaseSpeed;
  final double? _theoreticalMaximumBaseStamina;
  final double? _theoreticalMaximumBaseVitality;
  final double? _theoreticalMaximumBaseWeight;
  final double? _theoreticalMaximumHeight;
  final double? _theoreticalMaximumSpeed;
  final double? _theoreticalMaximumWeight;
  final double? _theoreticalMaximumHeightMultiplier;
  final double? _theoreticalMaximumSpeedMultiplier;
  final double? _theoreticalMaximumStaminaMultiplier;
  final double? _theoreticalMaximumVitalityMultiplier;
  final double? _theoreticalMaximumWeightMultiplier;
  final String? _name;
  final List<int>? _chromosome;
  final Gender? _gender;
  final int? _generation;
  final double? _immunity;
  final double? _baseAppetite;
  final double? _baseHeight;
  final double? _baseSpeed;
  final double? _baseStamina;
  final double? _baseVitality;
  final double? _baseWeight;
  final double? _heightMultiplier;
  final double? _speedMultiplier;
  final double? _staminaMultiplier;
  final double? _vitalityMultiplier;
  final double? _weightMultiplier;
  final double? _maxHeight;
  final double? _maxWeight;
  final int? _age;
  final double? _height;
  final double? _weight;
  final double? _staticFitness;
  final double? _maxAppetiteAtAge;
  final double? _maxSpeedAtAge;
  final double? _maxStaminaAtAge;
  final double? _maxVitalityAtAge;
  final double? _appetite;
  final double? _speed;
  final double? _stamina;
  final double? _vitality;
  final int? _x;
  final int? _y;
  final double? _dynamicFitness;
  final double? _visionRadius;
  final double? _sleepRestoreFactor;
  final Sleep? _asleep;
  final Monitor? _monitor;

  OrganismObjectBuilder({
    String? kind,
    KingdomE? kingdom,
    int? chromosomeNumber,
    List<ChromosomeStrandObjectBuilder>? chromosomeStructure,
    int? foodChainRank,
    Reproduction? sexuality,
    double? ageFitnessOnDeathRatio,
    double? conceivingProbability,
    double? matingProbability,
    int? matingAgeStart,
    int? matingAgeEnd,
    int? maxAge,
    double? mutationProbability,
    double? offspringsFactor,
    double? heightOnSpeed,
    double? heightOnStamina,
    double? heightOnVitality,
    double? weightOnSpeed,
    double? weightOnStamina,
    double? weightOnVitality,
    double? vitalityOnAppetite,
    double? vitalityOnSpeed,
    double? staminaOnAppetite,
    double? staminaOnSpeed,
    double? theoreticalMaximumBaseAppetite,
    double? theoreticalMaximumBaseHeight,
    double? theoreticalMaximumBaseSpeed,
    double? theoreticalMaximumBaseStamina,
    double? theoreticalMaximumBaseVitality,
    double? theoreticalMaximumBaseWeight,
    double? theoreticalMaximumHeight,
    double? theoreticalMaximumSpeed,
    double? theoreticalMaximumWeight,
    double? theoreticalMaximumHeightMultiplier,
    double? theoreticalMaximumSpeedMultiplier,
    double? theoreticalMaximumStaminaMultiplier,
    double? theoreticalMaximumVitalityMultiplier,
    double? theoreticalMaximumWeightMultiplier,
    String? name,
    List<int>? chromosome,
    Gender? gender,
    int? generation,
    double? immunity,
    double? baseAppetite,
    double? baseHeight,
    double? baseSpeed,
    double? baseStamina,
    double? baseVitality,
    double? baseWeight,
    double? heightMultiplier,
    double? speedMultiplier,
    double? staminaMultiplier,
    double? vitalityMultiplier,
    double? weightMultiplier,
    double? maxHeight,
    double? maxWeight,
    int? age,
    double? height,
    double? weight,
    double? staticFitness,
    double? maxAppetiteAtAge,
    double? maxSpeedAtAge,
    double? maxStaminaAtAge,
    double? maxVitalityAtAge,
    double? appetite,
    double? speed,
    double? stamina,
    double? vitality,
    int? x,
    int? y,
    double? dynamicFitness,
    double? visionRadius,
    double? sleepRestoreFactor,
    Sleep? asleep,
    Monitor? monitor,
  })
      : _kind = kind,
        _kingdom = kingdom,
        _chromosomeNumber = chromosomeNumber,
        _chromosomeStructure = chromosomeStructure,
        _foodChainRank = foodChainRank,
        _sexuality = sexuality,
        _ageFitnessOnDeathRatio = ageFitnessOnDeathRatio,
        _conceivingProbability = conceivingProbability,
        _matingProbability = matingProbability,
        _matingAgeStart = matingAgeStart,
        _matingAgeEnd = matingAgeEnd,
        _maxAge = maxAge,
        _mutationProbability = mutationProbability,
        _offspringsFactor = offspringsFactor,
        _heightOnSpeed = heightOnSpeed,
        _heightOnStamina = heightOnStamina,
        _heightOnVitality = heightOnVitality,
        _weightOnSpeed = weightOnSpeed,
        _weightOnStamina = weightOnStamina,
        _weightOnVitality = weightOnVitality,
        _vitalityOnAppetite = vitalityOnAppetite,
        _vitalityOnSpeed = vitalityOnSpeed,
        _staminaOnAppetite = staminaOnAppetite,
        _staminaOnSpeed = staminaOnSpeed,
        _theoreticalMaximumBaseAppetite = theoreticalMaximumBaseAppetite,
        _theoreticalMaximumBaseHeight = theoreticalMaximumBaseHeight,
        _theoreticalMaximumBaseSpeed = theoreticalMaximumBaseSpeed,
        _theoreticalMaximumBaseStamina = theoreticalMaximumBaseStamina,
        _theoreticalMaximumBaseVitality = theoreticalMaximumBaseVitality,
        _theoreticalMaximumBaseWeight = theoreticalMaximumBaseWeight,
        _theoreticalMaximumHeight = theoreticalMaximumHeight,
        _theoreticalMaximumSpeed = theoreticalMaximumSpeed,
        _theoreticalMaximumWeight = theoreticalMaximumWeight,
        _theoreticalMaximumHeightMultiplier = theoreticalMaximumHeightMultiplier,
        _theoreticalMaximumSpeedMultiplier = theoreticalMaximumSpeedMultiplier,
        _theoreticalMaximumStaminaMultiplier = theoreticalMaximumStaminaMultiplier,
        _theoreticalMaximumVitalityMultiplier = theoreticalMaximumVitalityMultiplier,
        _theoreticalMaximumWeightMultiplier = theoreticalMaximumWeightMultiplier,
        _name = name,
        _chromosome = chromosome,
        _gender = gender,
        _generation = generation,
        _immunity = immunity,
        _baseAppetite = baseAppetite,
        _baseHeight = baseHeight,
        _baseSpeed = baseSpeed,
        _baseStamina = baseStamina,
        _baseVitality = baseVitality,
        _baseWeight = baseWeight,
        _heightMultiplier = heightMultiplier,
        _speedMultiplier = speedMultiplier,
        _staminaMultiplier = staminaMultiplier,
        _vitalityMultiplier = vitalityMultiplier,
        _weightMultiplier = weightMultiplier,
        _maxHeight = maxHeight,
        _maxWeight = maxWeight,
        _age = age,
        _height = height,
        _weight = weight,
        _staticFitness = staticFitness,
        _maxAppetiteAtAge = maxAppetiteAtAge,
        _maxSpeedAtAge = maxSpeedAtAge,
        _maxStaminaAtAge = maxStaminaAtAge,
        _maxVitalityAtAge = maxVitalityAtAge,
        _appetite = appetite,
        _speed = speed,
        _stamina = stamina,
        _vitality = vitality,
        _x = x,
        _y = y,
        _dynamicFitness = dynamicFitness,
        _visionRadius = visionRadius,
        _sleepRestoreFactor = sleepRestoreFactor,
        _asleep = asleep,
        _monitor = monitor;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? chromosomeStructureOffset = _chromosomeStructure == null ? null
        : fbBuilder.writeList(_chromosomeStructure!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? chromosomeOffset = _chromosome == null ? null
        : fbBuilder.writeListUint8(_chromosome!);
    fbBuilder.startTable(75);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addUint8(1, _kingdom?.value);
    fbBuilder.addUint16(2, _chromosomeNumber);
    fbBuilder.addOffset(3, chromosomeStructureOffset);
    fbBuilder.addUint8(4, _foodChainRank);
    fbBuilder.addUint8(5, _sexuality?.value);
    fbBuilder.addFloat32(6, _ageFitnessOnDeathRatio);
    fbBuilder.addFloat32(7, _conceivingProbability);
    fbBuilder.addFloat32(8, _matingProbability);
    fbBuilder.addUint32(9, _matingAgeStart);
    fbBuilder.addUint32(10, _matingAgeEnd);
    fbBuilder.addUint32(11, _maxAge);
    fbBuilder.addFloat32(12, _mutationProbability);
    fbBuilder.addFloat32(13, _offspringsFactor);
    fbBuilder.addFloat32(14, _heightOnSpeed);
    fbBuilder.addFloat32(15, _heightOnStamina);
    fbBuilder.addFloat32(16, _heightOnVitality);
    fbBuilder.addFloat32(17, _weightOnSpeed);
    fbBuilder.addFloat32(18, _weightOnStamina);
    fbBuilder.addFloat32(19, _weightOnVitality);
    fbBuilder.addFloat32(20, _vitalityOnAppetite);
    fbBuilder.addFloat32(21, _vitalityOnSpeed);
    fbBuilder.addFloat32(22, _staminaOnAppetite);
    fbBuilder.addFloat32(23, _staminaOnSpeed);
    fbBuilder.addFloat32(24, _theoreticalMaximumBaseAppetite);
    fbBuilder.addFloat32(25, _theoreticalMaximumBaseHeight);
    fbBuilder.addFloat32(26, _theoreticalMaximumBaseSpeed);
    fbBuilder.addFloat32(27, _theoreticalMaximumBaseStamina);
    fbBuilder.addFloat32(28, _theoreticalMaximumBaseVitality);
    fbBuilder.addFloat32(29, _theoreticalMaximumBaseWeight);
    fbBuilder.addFloat32(30, _theoreticalMaximumHeight);
    fbBuilder.addFloat32(31, _theoreticalMaximumSpeed);
    fbBuilder.addFloat32(32, _theoreticalMaximumWeight);
    fbBuilder.addFloat32(33, _theoreticalMaximumHeightMultiplier);
    fbBuilder.addFloat32(34, _theoreticalMaximumSpeedMultiplier);
    fbBuilder.addFloat32(35, _theoreticalMaximumStaminaMultiplier);
    fbBuilder.addFloat32(36, _theoreticalMaximumVitalityMultiplier);
    fbBuilder.addFloat32(37, _theoreticalMaximumWeightMultiplier);
    fbBuilder.addOffset(38, nameOffset);
    fbBuilder.addOffset(39, chromosomeOffset);
    fbBuilder.addUint8(40, _gender?.value);
    fbBuilder.addUint32(41, _generation);
    fbBuilder.addFloat32(42, _immunity);
    fbBuilder.addFloat32(43, _baseAppetite);
    fbBuilder.addFloat32(44, _baseHeight);
    fbBuilder.addFloat32(45, _baseSpeed);
    fbBuilder.addFloat32(46, _baseStamina);
    fbBuilder.addFloat32(47, _baseVitality);
    fbBuilder.addFloat32(48, _baseWeight);
    fbBuilder.addFloat32(49, _heightMultiplier);
    fbBuilder.addFloat32(50, _speedMultiplier);
    fbBuilder.addFloat32(51, _staminaMultiplier);
    fbBuilder.addFloat32(52, _vitalityMultiplier);
    fbBuilder.addFloat32(53, _weightMultiplier);
    fbBuilder.addFloat32(54, _maxHeight);
    fbBuilder.addFloat32(55, _maxWeight);
    fbBuilder.addUint32(56, _age);
    fbBuilder.addFloat32(57, _height);
    fbBuilder.addFloat32(58, _weight);
    fbBuilder.addFloat32(59, _staticFitness);
    fbBuilder.addFloat32(60, _maxAppetiteAtAge);
    fbBuilder.addFloat32(61, _maxSpeedAtAge);
    fbBuilder.addFloat32(62, _maxStaminaAtAge);
    fbBuilder.addFloat32(63, _maxVitalityAtAge);
    fbBuilder.addFloat32(64, _appetite);
    fbBuilder.addFloat32(65, _speed);
    fbBuilder.addFloat32(66, _stamina);
    fbBuilder.addFloat32(67, _vitality);
    fbBuilder.addUint64(68, _x);
    fbBuilder.addUint64(69, _y);
    fbBuilder.addFloat32(70, _dynamicFitness);
    fbBuilder.addFloat32(71, _visionRadius);
    fbBuilder.addFloat32(72, _sleepRestoreFactor);
    fbBuilder.addUint8(73, _asleep?.value);
    fbBuilder.addUint8(74, _monitor?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Species {
  Species._(this._bc, this._bcOffset);
  factory Species(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Species> reader = _SpeciesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  KingdomE get kingdom => KingdomE.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  List<Organism>? get organism => const fb.ListReader<Organism>(Organism.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Species{kind: ${kind}, kingdom: ${kingdom}, organism: ${organism}}';
  }

  SpeciesT unpack() => SpeciesT(
      kind: kind,
      kingdom: kingdom,
      organism: organism?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SpeciesT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpeciesT implements fb.Packable {
  String? kind;
  KingdomE kingdom;
  List<OrganismT>? organism;

  SpeciesT({
      this.kind,
      this.kingdom = KingdomE.animal,
      this.organism});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? kindOffset = kind == null ? null
        : fbBuilder.writeString(kind!);
    final int? organismOffset = organism == null ? null
        : fbBuilder.writeList(organism!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addUint8(1, kingdom.value);
    fbBuilder.addOffset(2, organismOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpeciesT{kind: ${kind}, kingdom: ${kingdom}, organism: ${organism}}';
  }
}

class _SpeciesReader extends fb.TableReader<Species> {
  const _SpeciesReader();

  @override
  Species createObject(fb.BufferContext bc, int offset) => 
    Species._(bc, offset);
}

class SpeciesBuilder {
  SpeciesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addKindOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKingdom(KingdomE? kingdom) {
    fbBuilder.addUint8(1, kingdom?.value);
    return fbBuilder.offset;
  }
  int addOrganismOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpeciesObjectBuilder extends fb.ObjectBuilder {
  final String? _kind;
  final KingdomE? _kingdom;
  final List<OrganismObjectBuilder>? _organism;

  SpeciesObjectBuilder({
    String? kind,
    KingdomE? kingdom,
    List<OrganismObjectBuilder>? organism,
  })
      : _kind = kind,
        _kingdom = kingdom,
        _organism = organism;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? organismOffset = _organism == null ? null
        : fbBuilder.writeList(_organism!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addUint8(1, _kingdom?.value);
    fbBuilder.addOffset(2, organismOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class World {
  World._(this._bc, this._bcOffset);
  factory World(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<World> reader = _WorldReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get year => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<Species>? get species => const fb.ListReader<Species>(Species.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'World{year: ${year}, species: ${species}}';
  }

  WorldT unpack() => WorldT(
      year: year,
      species: species?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, WorldT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class WorldT implements fb.Packable {
  int year;
  List<SpeciesT>? species;

  WorldT({
      this.year = 0,
      this.species});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? speciesOffset = species == null ? null
        : fbBuilder.writeList(species!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, year);
    fbBuilder.addOffset(1, speciesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'WorldT{year: ${year}, species: ${species}}';
  }
}

class _WorldReader extends fb.TableReader<World> {
  const _WorldReader();

  @override
  World createObject(fb.BufferContext bc, int offset) => 
    World._(bc, offset);
}

class WorldBuilder {
  WorldBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addYear(int? year) {
    fbBuilder.addUint32(0, year);
    return fbBuilder.offset;
  }
  int addSpeciesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WorldObjectBuilder extends fb.ObjectBuilder {
  final int? _year;
  final List<SpeciesObjectBuilder>? _species;

  WorldObjectBuilder({
    int? year,
    List<SpeciesObjectBuilder>? species,
  })
      : _year = year,
        _species = species;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? speciesOffset = _species == null ? null
        : fbBuilder.writeList(_species!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _year);
    fbBuilder.addOffset(1, speciesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
