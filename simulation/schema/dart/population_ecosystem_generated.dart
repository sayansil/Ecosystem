// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ecosystem;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class RawPopulation {
  RawPopulation._(this._bc, this._bcOffset);

  static const fb.Reader<RawPopulation> reader = _RawPopulationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get malePopulation => const fb.Uint32Reader().read(_bc, _bcOffset + 0);
  int get femalePopulation => const fb.Uint32Reader().read(_bc, _bcOffset + 4);

  @override
  String toString() {
    return 'RawPopulation{malePopulation: ${malePopulation}, femalePopulation: ${femalePopulation}}';
  }

  RawPopulationT unpack() => RawPopulationT(
      malePopulation: malePopulation,
      femalePopulation: femalePopulation);

  static int pack(fb.Builder fbBuilder, RawPopulationT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RawPopulationT implements fb.Packable {
  int malePopulation;
  int femalePopulation;

  RawPopulationT({
      required this.malePopulation,
      required this.femalePopulation});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.putUint32(femalePopulation);
    fbBuilder.putUint32(malePopulation);
    return fbBuilder.offset;
  }

  @override
  String toString() {
    return 'RawPopulationT{malePopulation: ${malePopulation}, femalePopulation: ${femalePopulation}}';
  }
}

class _RawPopulationReader extends fb.StructReader<RawPopulation> {
  const _RawPopulationReader();

  @override
  int get size => 8;

  @override
  RawPopulation createObject(fb.BufferContext bc, int offset) => 
    RawPopulation._(bc, offset);
}

class RawPopulationBuilder {
  RawPopulationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int malePopulation, int femalePopulation) {
    fbBuilder.putUint32(femalePopulation);
    fbBuilder.putUint32(malePopulation);
    return fbBuilder.offset;
  }

}

class RawPopulationObjectBuilder extends fb.ObjectBuilder {
  final int _malePopulation;
  final int _femalePopulation;

  RawPopulationObjectBuilder({
    required int malePopulation,
    required int femalePopulation,
  })
      : _malePopulation = malePopulation,
        _femalePopulation = femalePopulation;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint32(_femalePopulation);
    fbBuilder.putUint32(_malePopulation);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SpeciesPopulation {
  SpeciesPopulation._(this._bc, this._bcOffset);
  factory SpeciesPopulation(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SpeciesPopulation> reader = _SpeciesPopulationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get kingdom => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  RawPopulation? get matablePopulation => RawPopulation.reader.vTableGetNullable(_bc, _bcOffset, 8);
  RawPopulation? get nonMatablePopulation => RawPopulation.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SpeciesPopulation{kind: ${kind}, kingdom: ${kingdom}, matablePopulation: ${matablePopulation}, nonMatablePopulation: ${nonMatablePopulation}}';
  }

  SpeciesPopulationT unpack() => SpeciesPopulationT(
      kind: kind,
      kingdom: kingdom,
      matablePopulation: matablePopulation?.unpack(),
      nonMatablePopulation: nonMatablePopulation?.unpack());

  static int pack(fb.Builder fbBuilder, SpeciesPopulationT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpeciesPopulationT implements fb.Packable {
  String? kind;
  int kingdom;
  RawPopulationT? matablePopulation;
  RawPopulationT? nonMatablePopulation;

  SpeciesPopulationT({
      this.kind,
      this.kingdom = 0,
      this.matablePopulation,
      this.nonMatablePopulation});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? kindOffset = kind == null ? null
        : fbBuilder.writeString(kind!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addUint8(1, kingdom);
    if (matablePopulation != null) {
      fbBuilder.addStruct(2, matablePopulation!.pack(fbBuilder));
    }
    if (nonMatablePopulation != null) {
      fbBuilder.addStruct(3, nonMatablePopulation!.pack(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpeciesPopulationT{kind: ${kind}, kingdom: ${kingdom}, matablePopulation: ${matablePopulation}, nonMatablePopulation: ${nonMatablePopulation}}';
  }
}

class _SpeciesPopulationReader extends fb.TableReader<SpeciesPopulation> {
  const _SpeciesPopulationReader();

  @override
  SpeciesPopulation createObject(fb.BufferContext bc, int offset) => 
    SpeciesPopulation._(bc, offset);
}

class SpeciesPopulationBuilder {
  SpeciesPopulationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addKindOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKingdom(int? kingdom) {
    fbBuilder.addUint8(1, kingdom);
    return fbBuilder.offset;
  }
  int addMatablePopulation(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }
  int addNonMatablePopulation(int offset) {
    fbBuilder.addStruct(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpeciesPopulationObjectBuilder extends fb.ObjectBuilder {
  final String? _kind;
  final int? _kingdom;
  final RawPopulationObjectBuilder? _matablePopulation;
  final RawPopulationObjectBuilder? _nonMatablePopulation;

  SpeciesPopulationObjectBuilder({
    String? kind,
    int? kingdom,
    RawPopulationObjectBuilder? matablePopulation,
    RawPopulationObjectBuilder? nonMatablePopulation,
  })
      : _kind = kind,
        _kingdom = kingdom,
        _matablePopulation = matablePopulation,
        _nonMatablePopulation = nonMatablePopulation;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addUint8(1, _kingdom);
    if (_matablePopulation != null) {
      fbBuilder.addStruct(2, _matablePopulation!.finish(fbBuilder));
    }
    if (_nonMatablePopulation != null) {
      fbBuilder.addStruct(3, _nonMatablePopulation!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WorldPopulation {
  WorldPopulation._(this._bc, this._bcOffset);
  factory WorldPopulation(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WorldPopulation> reader = _WorldPopulationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get year => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<SpeciesPopulation>? get speciesPopulation => const fb.ListReader<SpeciesPopulation>(SpeciesPopulation.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'WorldPopulation{year: ${year}, speciesPopulation: ${speciesPopulation}}';
  }

  WorldPopulationT unpack() => WorldPopulationT(
      year: year,
      speciesPopulation: speciesPopulation?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, WorldPopulationT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class WorldPopulationT implements fb.Packable {
  int year;
  List<SpeciesPopulationT>? speciesPopulation;

  WorldPopulationT({
      this.year = 0,
      this.speciesPopulation});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? speciesPopulationOffset = speciesPopulation == null ? null
        : fbBuilder.writeList(speciesPopulation!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, year);
    fbBuilder.addOffset(1, speciesPopulationOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'WorldPopulationT{year: ${year}, speciesPopulation: ${speciesPopulation}}';
  }
}

class _WorldPopulationReader extends fb.TableReader<WorldPopulation> {
  const _WorldPopulationReader();

  @override
  WorldPopulation createObject(fb.BufferContext bc, int offset) => 
    WorldPopulation._(bc, offset);
}

class WorldPopulationBuilder {
  WorldPopulationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addYear(int? year) {
    fbBuilder.addUint32(0, year);
    return fbBuilder.offset;
  }
  int addSpeciesPopulationOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WorldPopulationObjectBuilder extends fb.ObjectBuilder {
  final int? _year;
  final List<SpeciesPopulationObjectBuilder>? _speciesPopulation;

  WorldPopulationObjectBuilder({
    int? year,
    List<SpeciesPopulationObjectBuilder>? speciesPopulation,
  })
      : _year = year,
        _speciesPopulation = speciesPopulation;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? speciesPopulationOffset = _speciesPopulation == null ? null
        : fbBuilder.writeList(_speciesPopulation!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _year);
    fbBuilder.addOffset(1, speciesPopulationOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
