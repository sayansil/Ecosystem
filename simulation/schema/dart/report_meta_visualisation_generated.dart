// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library visualisation;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Meta {
  Meta._(this._bc, this._bcOffset);
  factory Meta(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Meta> reader = _MetaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get subtiles => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  int get createdTs => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'Meta{title: ${title}, subtiles: ${subtiles}, createdTs: ${createdTs}}';
  }

  MetaT unpack() => MetaT(
      title: title,
      subtiles: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      createdTs: createdTs);

  static int pack(fb.Builder fbBuilder, MetaT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MetaT implements fb.Packable {
  String? title;
  List<String>? subtiles;
  int createdTs;

  MetaT({
      this.title,
      this.subtiles,
      this.createdTs = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? subtilesOffset = subtiles == null ? null
        : fbBuilder.writeList(subtiles!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, subtilesOffset);
    fbBuilder.addUint64(2, createdTs);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MetaT{title: ${title}, subtiles: ${subtiles}, createdTs: ${createdTs}}';
  }
}

class _MetaReader extends fb.TableReader<Meta> {
  const _MetaReader();

  @override
  Meta createObject(fb.BufferContext bc, int offset) => 
    Meta._(bc, offset);
}

class MetaBuilder {
  MetaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSubtilesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCreatedTs(int? createdTs) {
    fbBuilder.addUint64(2, createdTs);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MetaObjectBuilder extends fb.ObjectBuilder {
  final String? _title;
  final List<String>? _subtiles;
  final int? _createdTs;

  MetaObjectBuilder({
    String? title,
    List<String>? subtiles,
    int? createdTs,
  })
      : _title = title,
        _subtiles = subtiles,
        _createdTs = createdTs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? subtilesOffset = _subtiles == null ? null
        : fbBuilder.writeList(_subtiles!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, subtilesOffset);
    fbBuilder.addUint64(2, _createdTs);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MetaData {
  MetaData._(this._bc, this._bcOffset);
  factory MetaData(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MetaData> reader = _MetaDataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<Meta>? get data => const fb.ListReader<Meta>(Meta.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'MetaData{title: ${title}, data: ${data}}';
  }

  MetaDataT unpack() => MetaDataT(
      title: title,
      data: data?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, MetaDataT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MetaDataT implements fb.Packable {
  String? title;
  List<MetaT>? data;

  MetaDataT({
      this.title,
      this.data});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? dataOffset = data == null ? null
        : fbBuilder.writeList(data!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MetaDataT{title: ${title}, data: ${data}}';
  }
}

class _MetaDataReader extends fb.TableReader<MetaData> {
  const _MetaDataReader();

  @override
  MetaData createObject(fb.BufferContext bc, int offset) => 
    MetaData._(bc, offset);
}

class MetaDataBuilder {
  MetaDataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MetaDataObjectBuilder extends fb.ObjectBuilder {
  final String? _title;
  final List<MetaObjectBuilder>? _data;

  MetaDataObjectBuilder({
    String? title,
    List<MetaObjectBuilder>? data,
  })
      : _title = title,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeList(_data!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
