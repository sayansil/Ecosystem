# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Visualisation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MetaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MetaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMetaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MetaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MetaData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MetaData
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Visualisation.Meta import Meta
            obj = Meta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MetaData
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MetaData
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def MetaDataStart(builder): builder.StartObject(2)
def Start(builder):
    return MetaDataStart(builder)
def MetaDataAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return MetaDataAddTitle(builder, title)
def MetaDataAddData(builder, data): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return MetaDataAddData(builder, data)
def MetaDataStartDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataVector(builder, numElems):
    return MetaDataStartDataVector(builder, numElems)
def MetaDataEnd(builder): return builder.EndObject()
def End(builder):
    return MetaDataEnd(builder)
import Visualisation.Meta
try:
    from typing import List
except:
    pass

class MetaDataT(object):

    # MetaDataT
    def __init__(self):
        self.title = None  # type: str
        self.data = None  # type: List[Visualisation.Meta.MetaT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        metaData = MetaData()
        metaData.Init(buf, pos+n)
        return cls.InitFromObj(metaData)

    @classmethod
    def InitFromObj(cls, metaData):
        x = MetaDataT()
        x._UnPack(metaData)
        return x

    # MetaDataT
    def _UnPack(self, metaData):
        if metaData is None:
            return
        self.title = metaData.Title()
        if not metaData.DataIsNone():
            self.data = []
            for i in range(metaData.DataLength()):
                if metaData.Data(i) is None:
                    self.data.append(None)
                else:
                    meta_ = Visualisation.Meta.MetaT.InitFromObj(metaData.Data(i))
                    self.data.append(meta_)

    # MetaDataT
    def Pack(self, builder):
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(self.data[i].Pack(builder))
            MetaDataStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        MetaDataStart(builder)
        if self.title is not None:
            MetaDataAddTitle(builder, title)
        if self.data is not None:
            MetaDataAddData(builder, data)
        metaData = MetaDataEnd(builder)
        return metaData
