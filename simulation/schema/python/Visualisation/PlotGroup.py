# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Visualisation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PlotGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlotGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlotGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PlotGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlotGroup
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PlotGroup
    def Plots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Visualisation.Plot import Plot
            obj = Plot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlotGroup
    def PlotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PlotGroup
    def PlotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def PlotGroupStart(builder): builder.StartObject(2)
def Start(builder):
    return PlotGroupStart(builder)
def PlotGroupAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return PlotGroupAddTitle(builder, title)
def PlotGroupAddPlots(builder, plots): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(plots), 0)
def AddPlots(builder, plots):
    return PlotGroupAddPlots(builder, plots)
def PlotGroupStartPlotsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPlotsVector(builder, numElems):
    return PlotGroupStartPlotsVector(builder, numElems)
def PlotGroupEnd(builder): return builder.EndObject()
def End(builder):
    return PlotGroupEnd(builder)
import Visualisation.Plot
try:
    from typing import List
except:
    pass

class PlotGroupT(object):

    # PlotGroupT
    def __init__(self):
        self.title = None  # type: str
        self.plots = None  # type: List[Visualisation.Plot.PlotT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        plotGroup = PlotGroup()
        plotGroup.Init(buf, pos+n)
        return cls.InitFromObj(plotGroup)

    @classmethod
    def InitFromObj(cls, plotGroup):
        x = PlotGroupT()
        x._UnPack(plotGroup)
        return x

    # PlotGroupT
    def _UnPack(self, plotGroup):
        if plotGroup is None:
            return
        self.title = plotGroup.Title()
        if not plotGroup.PlotsIsNone():
            self.plots = []
            for i in range(plotGroup.PlotsLength()):
                if plotGroup.Plots(i) is None:
                    self.plots.append(None)
                else:
                    plot_ = Visualisation.Plot.PlotT.InitFromObj(plotGroup.Plots(i))
                    self.plots.append(plot_)

    # PlotGroupT
    def Pack(self, builder):
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.plots is not None:
            plotslist = []
            for i in range(len(self.plots)):
                plotslist.append(self.plots[i].Pack(builder))
            PlotGroupStartPlotsVector(builder, len(self.plots))
            for i in reversed(range(len(self.plots))):
                builder.PrependUOffsetTRelative(plotslist[i])
            plots = builder.EndVector()
        PlotGroupStart(builder)
        if self.title is not None:
            PlotGroupAddTitle(builder, title)
        if self.plots is not None:
            PlotGroupAddPlots(builder, plots)
        plotGroup = PlotGroupEnd(builder)
        return plotGroup
