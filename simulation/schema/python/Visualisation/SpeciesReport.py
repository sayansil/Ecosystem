# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Visualisation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpeciesReport(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpeciesReport()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpeciesReport(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SpeciesReport
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpeciesReport
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpeciesReport
    def Species(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpeciesReport
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpeciesReport
    def Plots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Visualisation.MultiPlot import MultiPlot
            obj = MultiPlot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpeciesReport
    def PlotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpeciesReport
    def PlotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def SpeciesReportStart(builder): builder.StartObject(4)
def Start(builder):
    return SpeciesReportStart(builder)
def SpeciesReportAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return SpeciesReportAddTitle(builder, title)
def SpeciesReportAddSpecies(builder, species): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(species), 0)
def AddSpecies(builder, species):
    return SpeciesReportAddSpecies(builder, species)
def SpeciesReportAddTimestamp(builder, timestamp): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def AddTimestamp(builder, timestamp):
    return SpeciesReportAddTimestamp(builder, timestamp)
def SpeciesReportAddPlots(builder, plots): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(plots), 0)
def AddPlots(builder, plots):
    return SpeciesReportAddPlots(builder, plots)
def SpeciesReportStartPlotsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPlotsVector(builder, numElems):
    return SpeciesReportStartPlotsVector(builder, numElems)
def SpeciesReportEnd(builder): return builder.EndObject()
def End(builder):
    return SpeciesReportEnd(builder)
import Visualisation.MultiPlot
try:
    from typing import List
except:
    pass

class SpeciesReportT(object):

    # SpeciesReportT
    def __init__(self):
        self.title = None  # type: str
        self.species = None  # type: str
        self.timestamp = None  # type: str
        self.plots = None  # type: List[Visualisation.MultiPlot.MultiPlotT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        speciesReport = SpeciesReport()
        speciesReport.Init(buf, pos)
        return cls.InitFromObj(speciesReport)

    @classmethod
    def InitFromObj(cls, speciesReport):
        x = SpeciesReportT()
        x._UnPack(speciesReport)
        return x

    # SpeciesReportT
    def _UnPack(self, speciesReport):
        if speciesReport is None:
            return
        self.title = speciesReport.Title()
        self.species = speciesReport.Species()
        self.timestamp = speciesReport.Timestamp()
        if not speciesReport.PlotsIsNone():
            self.plots = []
            for i in range(speciesReport.PlotsLength()):
                if speciesReport.Plots(i) is None:
                    self.plots.append(None)
                else:
                    multiPlot_ = Visualisation.MultiPlot.MultiPlotT.InitFromObj(speciesReport.Plots(i))
                    self.plots.append(multiPlot_)

    # SpeciesReportT
    def Pack(self, builder):
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.species is not None:
            species = builder.CreateString(self.species)
        if self.timestamp is not None:
            timestamp = builder.CreateString(self.timestamp)
        if self.plots is not None:
            plotslist = []
            for i in range(len(self.plots)):
                plotslist.append(self.plots[i].Pack(builder))
            SpeciesReportStartPlotsVector(builder, len(self.plots))
            for i in reversed(range(len(self.plots))):
                builder.PrependUOffsetTRelative(plotslist[i])
            plots = builder.EndVector()
        SpeciesReportStart(builder)
        if self.title is not None:
            SpeciesReportAddTitle(builder, title)
        if self.species is not None:
            SpeciesReportAddSpecies(builder, species)
        if self.timestamp is not None:
            SpeciesReportAddTimestamp(builder, timestamp)
        if self.plots is not None:
            SpeciesReportAddPlots(builder, plots)
        speciesReport = SpeciesReportEnd(builder)
        return speciesReport
