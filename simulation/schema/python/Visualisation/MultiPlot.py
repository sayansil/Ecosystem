# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Visualisation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MultiPlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MultiPlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMultiPlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MultiPlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MultiPlot
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MultiPlot
    def Xlabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MultiPlot
    def Ylabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MultiPlot
    def Plots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Visualisation.SinglePlot import SinglePlot
            obj = SinglePlot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MultiPlot
    def PlotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MultiPlot
    def PlotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def MultiPlotStart(builder): builder.StartObject(4)
def Start(builder):
    return MultiPlotStart(builder)
def MultiPlotAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return MultiPlotAddTitle(builder, title)
def MultiPlotAddXlabel(builder, xlabel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(xlabel), 0)
def AddXlabel(builder, xlabel):
    return MultiPlotAddXlabel(builder, xlabel)
def MultiPlotAddYlabel(builder, ylabel): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ylabel), 0)
def AddYlabel(builder, ylabel):
    return MultiPlotAddYlabel(builder, ylabel)
def MultiPlotAddPlots(builder, plots): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(plots), 0)
def AddPlots(builder, plots):
    return MultiPlotAddPlots(builder, plots)
def MultiPlotStartPlotsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPlotsVector(builder, numElems):
    return MultiPlotStartPlotsVector(builder, numElems)
def MultiPlotEnd(builder): return builder.EndObject()
def End(builder):
    return MultiPlotEnd(builder)
import Visualisation.SinglePlot
try:
    from typing import List
except:
    pass

class MultiPlotT(object):

    # MultiPlotT
    def __init__(self):
        self.title = None  # type: str
        self.xlabel = None  # type: str
        self.ylabel = None  # type: str
        self.plots = None  # type: List[Visualisation.SinglePlot.SinglePlotT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        multiPlot = MultiPlot()
        multiPlot.Init(buf, pos+n)
        return cls.InitFromObj(multiPlot)

    @classmethod
    def InitFromObj(cls, multiPlot):
        x = MultiPlotT()
        x._UnPack(multiPlot)
        return x

    # MultiPlotT
    def _UnPack(self, multiPlot):
        if multiPlot is None:
            return
        self.title = multiPlot.Title()
        self.xlabel = multiPlot.Xlabel()
        self.ylabel = multiPlot.Ylabel()
        if not multiPlot.PlotsIsNone():
            self.plots = []
            for i in range(multiPlot.PlotsLength()):
                if multiPlot.Plots(i) is None:
                    self.plots.append(None)
                else:
                    singlePlot_ = Visualisation.SinglePlot.SinglePlotT.InitFromObj(multiPlot.Plots(i))
                    self.plots.append(singlePlot_)

    # MultiPlotT
    def Pack(self, builder):
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.xlabel is not None:
            xlabel = builder.CreateString(self.xlabel)
        if self.ylabel is not None:
            ylabel = builder.CreateString(self.ylabel)
        if self.plots is not None:
            plotslist = []
            for i in range(len(self.plots)):
                plotslist.append(self.plots[i].Pack(builder))
            MultiPlotStartPlotsVector(builder, len(self.plots))
            for i in reversed(range(len(self.plots))):
                builder.PrependUOffsetTRelative(plotslist[i])
            plots = builder.EndVector()
        MultiPlotStart(builder)
        if self.title is not None:
            MultiPlotAddTitle(builder, title)
        if self.xlabel is not None:
            MultiPlotAddXlabel(builder, xlabel)
        if self.ylabel is not None:
            MultiPlotAddYlabel(builder, ylabel)
        if self.plots is not None:
            MultiPlotAddPlots(builder, plots)
        multiPlot = MultiPlotEnd(builder)
        return multiPlot
