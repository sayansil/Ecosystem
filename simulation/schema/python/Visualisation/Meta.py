# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Visualisation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Meta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Meta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Meta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Meta
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Meta
    def Subtiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Meta
    def SubtilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Meta
    def SubtilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Meta
    def CreatedTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def MetaStart(builder): builder.StartObject(3)
def Start(builder):
    return MetaStart(builder)
def MetaAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return MetaAddTitle(builder, title)
def MetaAddSubtiles(builder, subtiles): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(subtiles), 0)
def AddSubtiles(builder, subtiles):
    return MetaAddSubtiles(builder, subtiles)
def MetaStartSubtilesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSubtilesVector(builder, numElems):
    return MetaStartSubtilesVector(builder, numElems)
def MetaAddCreatedTs(builder, createdTs): builder.PrependUint64Slot(2, createdTs, 0)
def AddCreatedTs(builder, createdTs):
    return MetaAddCreatedTs(builder, createdTs)
def MetaEnd(builder): return builder.EndObject()
def End(builder):
    return MetaEnd(builder)
try:
    from typing import List
except:
    pass

class MetaT(object):

    # MetaT
    def __init__(self):
        self.title = None  # type: str
        self.subtiles = None  # type: List[str]
        self.createdTs = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        meta = Meta()
        meta.Init(buf, pos+n)
        return cls.InitFromObj(meta)

    @classmethod
    def InitFromObj(cls, meta):
        x = MetaT()
        x._UnPack(meta)
        return x

    # MetaT
    def _UnPack(self, meta):
        if meta is None:
            return
        self.title = meta.Title()
        if not meta.SubtilesIsNone():
            self.subtiles = []
            for i in range(meta.SubtilesLength()):
                self.subtiles.append(meta.Subtiles(i))
        self.createdTs = meta.CreatedTs()

    # MetaT
    def Pack(self, builder):
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.subtiles is not None:
            subtileslist = []
            for i in range(len(self.subtiles)):
                subtileslist.append(builder.CreateString(self.subtiles[i]))
            MetaStartSubtilesVector(builder, len(self.subtiles))
            for i in reversed(range(len(self.subtiles))):
                builder.PrependUOffsetTRelative(subtileslist[i])
            subtiles = builder.EndVector()
        MetaStart(builder)
        if self.title is not None:
            MetaAddTitle(builder, title)
        if self.subtiles is not None:
            MetaAddSubtiles(builder, subtiles)
        MetaAddCreatedTs(builder, self.createdTs)
        meta = MetaEnd(builder)
        return meta
