# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Visualisation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PlotBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlotBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlotBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PlotBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlotBundle
    def PlotGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Visualisation.PlotGroup import PlotGroup
            obj = PlotGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlotBundle
    def PlotGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PlotBundle
    def PlotGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PlotBundleStart(builder): builder.StartObject(1)
def Start(builder):
    return PlotBundleStart(builder)
def PlotBundleAddPlotGroups(builder, plotGroups): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(plotGroups), 0)
def AddPlotGroups(builder, plotGroups):
    return PlotBundleAddPlotGroups(builder, plotGroups)
def PlotBundleStartPlotGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPlotGroupsVector(builder, numElems):
    return PlotBundleStartPlotGroupsVector(builder, numElems)
def PlotBundleEnd(builder): return builder.EndObject()
def End(builder):
    return PlotBundleEnd(builder)
import Visualisation.PlotGroup
try:
    from typing import List
except:
    pass

class PlotBundleT(object):

    # PlotBundleT
    def __init__(self):
        self.plotGroups = None  # type: List[Visualisation.PlotGroup.PlotGroupT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        plotBundle = PlotBundle()
        plotBundle.Init(buf, pos+n)
        return cls.InitFromObj(plotBundle)

    @classmethod
    def InitFromObj(cls, plotBundle):
        x = PlotBundleT()
        x._UnPack(plotBundle)
        return x

    # PlotBundleT
    def _UnPack(self, plotBundle):
        if plotBundle is None:
            return
        if not plotBundle.PlotGroupsIsNone():
            self.plotGroups = []
            for i in range(plotBundle.PlotGroupsLength()):
                if plotBundle.PlotGroups(i) is None:
                    self.plotGroups.append(None)
                else:
                    plotGroup_ = Visualisation.PlotGroup.PlotGroupT.InitFromObj(plotBundle.PlotGroups(i))
                    self.plotGroups.append(plotGroup_)

    # PlotBundleT
    def Pack(self, builder):
        if self.plotGroups is not None:
            plotGroupslist = []
            for i in range(len(self.plotGroups)):
                plotGroupslist.append(self.plotGroups[i].Pack(builder))
            PlotBundleStartPlotGroupsVector(builder, len(self.plotGroups))
            for i in reversed(range(len(self.plotGroups))):
                builder.PrependUOffsetTRelative(plotGroupslist[i])
            plotGroups = builder.EndVector()
        PlotBundleStart(builder)
        if self.plotGroups is not None:
            PlotBundleAddPlotGroups(builder, plotGroups)
        plotBundle = PlotBundleEnd(builder)
        return plotBundle
