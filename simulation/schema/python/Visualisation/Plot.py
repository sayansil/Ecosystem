# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Visualisation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Plot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Plot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Plot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Plot
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Plot
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Plot
    def Xlabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Plot
    def Ylabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Plot
    def X(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Plot
    def XAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Plot
    def XLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Plot
    def XIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Plot
    def Y(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Plot
    def YAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Plot
    def YLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Plot
    def YIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def PlotStart(builder): builder.StartObject(6)
def Start(builder):
    return PlotStart(builder)
def PlotAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return PlotAddKey(builder, key)
def PlotAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return PlotAddTitle(builder, title)
def PlotAddXlabel(builder, xlabel): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(xlabel), 0)
def AddXlabel(builder, xlabel):
    return PlotAddXlabel(builder, xlabel)
def PlotAddYlabel(builder, ylabel): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ylabel), 0)
def AddYlabel(builder, ylabel):
    return PlotAddYlabel(builder, ylabel)
def PlotAddX(builder, x): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(x), 0)
def AddX(builder, x):
    return PlotAddX(builder, x)
def PlotStartXVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartXVector(builder, numElems):
    return PlotStartXVector(builder, numElems)
def PlotAddY(builder, y): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(y), 0)
def AddY(builder, y):
    return PlotAddY(builder, y)
def PlotStartYVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartYVector(builder, numElems):
    return PlotStartYVector(builder, numElems)
def PlotEnd(builder): return builder.EndObject()
def End(builder):
    return PlotEnd(builder)
try:
    from typing import List
except:
    pass

class PlotT(object):

    # PlotT
    def __init__(self):
        self.key = None  # type: str
        self.title = None  # type: str
        self.xlabel = None  # type: str
        self.ylabel = None  # type: str
        self.x = None  # type: List[float]
        self.y = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        plot = Plot()
        plot.Init(buf, pos+n)
        return cls.InitFromObj(plot)

    @classmethod
    def InitFromObj(cls, plot):
        x = PlotT()
        x._UnPack(plot)
        return x

    # PlotT
    def _UnPack(self, plot):
        if plot is None:
            return
        self.key = plot.Key()
        self.title = plot.Title()
        self.xlabel = plot.Xlabel()
        self.ylabel = plot.Ylabel()
        if not plot.XIsNone():
            if np is None:
                self.x = []
                for i in range(plot.XLength()):
                    self.x.append(plot.X(i))
            else:
                self.x = plot.XAsNumpy()
        if not plot.YIsNone():
            if np is None:
                self.y = []
                for i in range(plot.YLength()):
                    self.y.append(plot.Y(i))
            else:
                self.y = plot.YAsNumpy()

    # PlotT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.xlabel is not None:
            xlabel = builder.CreateString(self.xlabel)
        if self.ylabel is not None:
            ylabel = builder.CreateString(self.ylabel)
        if self.x is not None:
            if np is not None and type(self.x) is np.ndarray:
                x = builder.CreateNumpyVector(self.x)
            else:
                PlotStartXVector(builder, len(self.x))
                for i in reversed(range(len(self.x))):
                    builder.PrependFloat32(self.x[i])
                x = builder.EndVector()
        if self.y is not None:
            if np is not None and type(self.y) is np.ndarray:
                y = builder.CreateNumpyVector(self.y)
            else:
                PlotStartYVector(builder, len(self.y))
                for i in reversed(range(len(self.y))):
                    builder.PrependFloat32(self.y[i])
                y = builder.EndVector()
        PlotStart(builder)
        if self.key is not None:
            PlotAddKey(builder, key)
        if self.title is not None:
            PlotAddTitle(builder, title)
        if self.xlabel is not None:
            PlotAddXlabel(builder, xlabel)
        if self.ylabel is not None:
            PlotAddYlabel(builder, ylabel)
        if self.x is not None:
            PlotAddX(builder, x)
        if self.y is not None:
            PlotAddY(builder, y)
        plot = PlotEnd(builder)
        return plot
