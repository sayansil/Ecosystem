# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ecosystem

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpeciesPopulation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpeciesPopulation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpeciesPopulation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SpeciesPopulation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpeciesPopulation
    def Kind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpeciesPopulation
    def Kingdom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SpeciesPopulation
    def MatablePopulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from Ecosystem.RawPopulation import RawPopulation
            obj = RawPopulation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpeciesPopulation
    def NonMatablePopulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from Ecosystem.RawPopulation import RawPopulation
            obj = RawPopulation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SpeciesPopulationStart(builder): builder.StartObject(4)
def Start(builder):
    return SpeciesPopulationStart(builder)
def SpeciesPopulationAddKind(builder, kind): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kind), 0)
def AddKind(builder, kind):
    return SpeciesPopulationAddKind(builder, kind)
def SpeciesPopulationAddKingdom(builder, kingdom): builder.PrependUint8Slot(1, kingdom, 0)
def AddKingdom(builder, kingdom):
    return SpeciesPopulationAddKingdom(builder, kingdom)
def SpeciesPopulationAddMatablePopulation(builder, matablePopulation): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(matablePopulation), 0)
def AddMatablePopulation(builder, matablePopulation):
    return SpeciesPopulationAddMatablePopulation(builder, matablePopulation)
def SpeciesPopulationAddNonMatablePopulation(builder, nonMatablePopulation): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nonMatablePopulation), 0)
def AddNonMatablePopulation(builder, nonMatablePopulation):
    return SpeciesPopulationAddNonMatablePopulation(builder, nonMatablePopulation)
def SpeciesPopulationEnd(builder): return builder.EndObject()
def End(builder):
    return SpeciesPopulationEnd(builder)
import Ecosystem.RawPopulation
try:
    from typing import Optional
except:
    pass

class SpeciesPopulationT(object):

    # SpeciesPopulationT
    def __init__(self):
        self.kind = None  # type: str
        self.kingdom = 0  # type: int
        self.matablePopulation = None  # type: Optional[Ecosystem.RawPopulation.RawPopulationT]
        self.nonMatablePopulation = None  # type: Optional[Ecosystem.RawPopulation.RawPopulationT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        speciesPopulation = SpeciesPopulation()
        speciesPopulation.Init(buf, pos+n)
        return cls.InitFromObj(speciesPopulation)

    @classmethod
    def InitFromObj(cls, speciesPopulation):
        x = SpeciesPopulationT()
        x._UnPack(speciesPopulation)
        return x

    # SpeciesPopulationT
    def _UnPack(self, speciesPopulation):
        if speciesPopulation is None:
            return
        self.kind = speciesPopulation.Kind()
        self.kingdom = speciesPopulation.Kingdom()
        if speciesPopulation.MatablePopulation() is not None:
            self.matablePopulation = Ecosystem.RawPopulation.RawPopulationT.InitFromObj(speciesPopulation.MatablePopulation())
        if speciesPopulation.NonMatablePopulation() is not None:
            self.nonMatablePopulation = Ecosystem.RawPopulation.RawPopulationT.InitFromObj(speciesPopulation.NonMatablePopulation())

    # SpeciesPopulationT
    def Pack(self, builder):
        if self.kind is not None:
            kind = builder.CreateString(self.kind)
        SpeciesPopulationStart(builder)
        if self.kind is not None:
            SpeciesPopulationAddKind(builder, kind)
        SpeciesPopulationAddKingdom(builder, self.kingdom)
        if self.matablePopulation is not None:
            matablePopulation = self.matablePopulation.Pack(builder)
            SpeciesPopulationAddMatablePopulation(builder, matablePopulation)
        if self.nonMatablePopulation is not None:
            nonMatablePopulation = self.nonMatablePopulation.Pack(builder)
            SpeciesPopulationAddNonMatablePopulation(builder, nonMatablePopulation)
        speciesPopulation = SpeciesPopulationEnd(builder)
        return speciesPopulation
