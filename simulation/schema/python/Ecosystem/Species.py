# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ecosystem

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Species(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Species()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpecies(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Species
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Species
    def Kind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Species
    def Kingdom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Species
    def Organism(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Ecosystem.Organism import Organism
            obj = Organism()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Species
    def OrganismLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Species
    def OrganismIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def SpeciesStart(builder): builder.StartObject(3)
def Start(builder):
    return SpeciesStart(builder)
def SpeciesAddKind(builder, kind): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kind), 0)
def AddKind(builder, kind):
    return SpeciesAddKind(builder, kind)
def SpeciesAddKingdom(builder, kingdom): builder.PrependUint8Slot(1, kingdom, 0)
def AddKingdom(builder, kingdom):
    return SpeciesAddKingdom(builder, kingdom)
def SpeciesAddOrganism(builder, organism): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(organism), 0)
def AddOrganism(builder, organism):
    return SpeciesAddOrganism(builder, organism)
def SpeciesStartOrganismVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOrganismVector(builder, numElems):
    return SpeciesStartOrganismVector(builder, numElems)
def SpeciesEnd(builder): return builder.EndObject()
def End(builder):
    return SpeciesEnd(builder)
import Ecosystem.Organism
try:
    from typing import List
except:
    pass

class SpeciesT(object):

    # SpeciesT
    def __init__(self):
        self.kind = None  # type: str
        self.kingdom = 0  # type: int
        self.organism = None  # type: List[Ecosystem.Organism.OrganismT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        species = Species()
        species.Init(buf, pos)
        return cls.InitFromObj(species)

    @classmethod
    def InitFromObj(cls, species):
        x = SpeciesT()
        x._UnPack(species)
        return x

    # SpeciesT
    def _UnPack(self, species):
        if species is None:
            return
        self.kind = species.Kind()
        self.kingdom = species.Kingdom()
        if not species.OrganismIsNone():
            self.organism = []
            for i in range(species.OrganismLength()):
                if species.Organism(i) is None:
                    self.organism.append(None)
                else:
                    organism_ = Ecosystem.Organism.OrganismT.InitFromObj(species.Organism(i))
                    self.organism.append(organism_)

    # SpeciesT
    def Pack(self, builder):
        if self.kind is not None:
            kind = builder.CreateString(self.kind)
        if self.organism is not None:
            organismlist = []
            for i in range(len(self.organism)):
                organismlist.append(self.organism[i].Pack(builder))
            SpeciesStartOrganismVector(builder, len(self.organism))
            for i in reversed(range(len(self.organism))):
                builder.PrependUOffsetTRelative(organismlist[i])
            organism = builder.EndVector()
        SpeciesStart(builder)
        if self.kind is not None:
            SpeciesAddKind(builder, kind)
        SpeciesAddKingdom(builder, self.kingdom)
        if self.organism is not None:
            SpeciesAddOrganism(builder, organism)
        species = SpeciesEnd(builder)
        return species
