# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ecosystem

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorldPopulation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldPopulation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorldPopulation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WorldPopulation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldPopulation
    def Year(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # WorldPopulation
    def SpeciesPopulation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Ecosystem.SpeciesPopulation import SpeciesPopulation
            obj = SpeciesPopulation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorldPopulation
    def SpeciesPopulationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldPopulation
    def SpeciesPopulationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def WorldPopulationStart(builder): builder.StartObject(2)
def Start(builder):
    return WorldPopulationStart(builder)
def WorldPopulationAddYear(builder, year): builder.PrependUint32Slot(0, year, 0)
def AddYear(builder, year):
    return WorldPopulationAddYear(builder, year)
def WorldPopulationAddSpeciesPopulation(builder, speciesPopulation): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(speciesPopulation), 0)
def AddSpeciesPopulation(builder, speciesPopulation):
    return WorldPopulationAddSpeciesPopulation(builder, speciesPopulation)
def WorldPopulationStartSpeciesPopulationVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSpeciesPopulationVector(builder, numElems):
    return WorldPopulationStartSpeciesPopulationVector(builder, numElems)
def WorldPopulationEnd(builder): return builder.EndObject()
def End(builder):
    return WorldPopulationEnd(builder)
import Ecosystem.SpeciesPopulation
try:
    from typing import List
except:
    pass

class WorldPopulationT(object):

    # WorldPopulationT
    def __init__(self):
        self.year = 0  # type: int
        self.speciesPopulation = None  # type: List[Ecosystem.SpeciesPopulation.SpeciesPopulationT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        worldPopulation = WorldPopulation()
        worldPopulation.Init(buf, pos+n)
        return cls.InitFromObj(worldPopulation)

    @classmethod
    def InitFromObj(cls, worldPopulation):
        x = WorldPopulationT()
        x._UnPack(worldPopulation)
        return x

    # WorldPopulationT
    def _UnPack(self, worldPopulation):
        if worldPopulation is None:
            return
        self.year = worldPopulation.Year()
        if not worldPopulation.SpeciesPopulationIsNone():
            self.speciesPopulation = []
            for i in range(worldPopulation.SpeciesPopulationLength()):
                if worldPopulation.SpeciesPopulation(i) is None:
                    self.speciesPopulation.append(None)
                else:
                    speciesPopulation_ = Ecosystem.SpeciesPopulation.SpeciesPopulationT.InitFromObj(worldPopulation.SpeciesPopulation(i))
                    self.speciesPopulation.append(speciesPopulation_)

    # WorldPopulationT
    def Pack(self, builder):
        if self.speciesPopulation is not None:
            speciesPopulationlist = []
            for i in range(len(self.speciesPopulation)):
                speciesPopulationlist.append(self.speciesPopulation[i].Pack(builder))
            WorldPopulationStartSpeciesPopulationVector(builder, len(self.speciesPopulation))
            for i in reversed(range(len(self.speciesPopulation))):
                builder.PrependUOffsetTRelative(speciesPopulationlist[i])
            speciesPopulation = builder.EndVector()
        WorldPopulationStart(builder)
        WorldPopulationAddYear(builder, self.year)
        if self.speciesPopulation is not None:
            WorldPopulationAddSpeciesPopulation(builder, speciesPopulation)
        worldPopulation = WorldPopulationEnd(builder)
        return worldPopulation
