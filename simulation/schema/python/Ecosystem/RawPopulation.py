# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ecosystem

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RawPopulation(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # RawPopulation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RawPopulation
    def MalePopulation(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # RawPopulation
    def FemalePopulation(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateRawPopulation(builder, malePopulation, femalePopulation):
    builder.Prep(4, 8)
    builder.PrependUint32(femalePopulation)
    builder.PrependUint32(malePopulation)
    return builder.Offset()


class RawPopulationT(object):

    # RawPopulationT
    def __init__(self):
        self.malePopulation = 0  # type: int
        self.femalePopulation = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        rawPopulation = RawPopulation()
        rawPopulation.Init(buf, pos+n)
        return cls.InitFromObj(rawPopulation)

    @classmethod
    def InitFromObj(cls, rawPopulation):
        x = RawPopulationT()
        x._UnPack(rawPopulation)
        return x

    # RawPopulationT
    def _UnPack(self, rawPopulation):
        if rawPopulation is None:
            return
        self.malePopulation = rawPopulation.MalePopulation()
        self.femalePopulation = rawPopulation.FemalePopulation()

    # RawPopulationT
    def Pack(self, builder):
        return CreateRawPopulation(builder, self.malePopulation, self.femalePopulation)
