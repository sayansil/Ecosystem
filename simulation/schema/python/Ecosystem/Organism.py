# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ecosystem

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Organism(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Organism()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrganism(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Organism
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Fixed for a species
    # Organism
    def Kind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organism
    def Kingdom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Organism
    def ChromosomeNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Organism
    def ChromosomeStructure(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Ecosystem.ChromosomeStrand import ChromosomeStrand
            obj = ChromosomeStrand()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Organism
    def ChromosomeStructureLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Organism
    def ChromosomeStructureIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Organism
    def FoodChainRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Organism
    def Sexuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Organism
    def AgeFitnessOnDeathRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def ConceivingProbability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MatingProbability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MatingAgeStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Organism
    def MatingAgeEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Organism
    def MaxAge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Organism
    def MutationProbability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def OffspringsFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def HeightOnSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def HeightOnStamina(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def HeightOnVitality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def WeightOnSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def WeightOnStamina(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def WeightOnVitality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def VitalityOnAppetite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def VitalityOnSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def StaminaOnAppetite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def StaminaOnSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumBaseAppetite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumBaseHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumBaseSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumBaseStamina(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumBaseVitality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumBaseWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumHeightMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumSpeedMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumStaminaMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumVitalityMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def TheoreticalMaximumWeightMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    #  Fixed for an organism
    # Organism
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organism
    def Chromosome(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Organism
    def ChromosomeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Organism
    def ChromosomeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Organism
    def ChromosomeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # Organism
    def Gender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Organism
    def Generation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Organism
    def Immunity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def BaseAppetite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def BaseHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def BaseSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def BaseStamina(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def BaseVitality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def BaseWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def HeightMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def SpeedMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def StaminaMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def VitalityMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def WeightMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MaxHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MaxWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Stats affected by age
    # Organism
    def Age(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Organism
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def StaticFitness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MaxAppetiteAtAge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MaxSpeedAtAge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MaxStaminaAtAge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def MaxVitalityAtAge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def Appetite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def Stamina(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def Vitality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Organism
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Organism
    def DynamicFitness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # Miscellaneous attributes
    # Organism
    def VisionRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def SleepRestoreFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Organism
    def Asleep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Organism
    def Monitor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def OrganismStart(builder): builder.StartObject(75)
def Start(builder):
    return OrganismStart(builder)
def OrganismAddKind(builder, kind): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kind), 0)
def AddKind(builder, kind):
    return OrganismAddKind(builder, kind)
def OrganismAddKingdom(builder, kingdom): builder.PrependUint8Slot(1, kingdom, 0)
def AddKingdom(builder, kingdom):
    return OrganismAddKingdom(builder, kingdom)
def OrganismAddChromosomeNumber(builder, chromosomeNumber): builder.PrependUint16Slot(2, chromosomeNumber, 0)
def AddChromosomeNumber(builder, chromosomeNumber):
    return OrganismAddChromosomeNumber(builder, chromosomeNumber)
def OrganismAddChromosomeStructure(builder, chromosomeStructure): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(chromosomeStructure), 0)
def AddChromosomeStructure(builder, chromosomeStructure):
    return OrganismAddChromosomeStructure(builder, chromosomeStructure)
def OrganismStartChromosomeStructureVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChromosomeStructureVector(builder, numElems):
    return OrganismStartChromosomeStructureVector(builder, numElems)
def OrganismAddFoodChainRank(builder, foodChainRank): builder.PrependUint8Slot(4, foodChainRank, 0)
def AddFoodChainRank(builder, foodChainRank):
    return OrganismAddFoodChainRank(builder, foodChainRank)
def OrganismAddSexuality(builder, sexuality): builder.PrependUint8Slot(5, sexuality, 0)
def AddSexuality(builder, sexuality):
    return OrganismAddSexuality(builder, sexuality)
def OrganismAddAgeFitnessOnDeathRatio(builder, ageFitnessOnDeathRatio): builder.PrependFloat32Slot(6, ageFitnessOnDeathRatio, 0.0)
def AddAgeFitnessOnDeathRatio(builder, ageFitnessOnDeathRatio):
    return OrganismAddAgeFitnessOnDeathRatio(builder, ageFitnessOnDeathRatio)
def OrganismAddConceivingProbability(builder, conceivingProbability): builder.PrependFloat32Slot(7, conceivingProbability, 0.0)
def AddConceivingProbability(builder, conceivingProbability):
    return OrganismAddConceivingProbability(builder, conceivingProbability)
def OrganismAddMatingProbability(builder, matingProbability): builder.PrependFloat32Slot(8, matingProbability, 0.0)
def AddMatingProbability(builder, matingProbability):
    return OrganismAddMatingProbability(builder, matingProbability)
def OrganismAddMatingAgeStart(builder, matingAgeStart): builder.PrependUint32Slot(9, matingAgeStart, 0)
def AddMatingAgeStart(builder, matingAgeStart):
    return OrganismAddMatingAgeStart(builder, matingAgeStart)
def OrganismAddMatingAgeEnd(builder, matingAgeEnd): builder.PrependUint32Slot(10, matingAgeEnd, 0)
def AddMatingAgeEnd(builder, matingAgeEnd):
    return OrganismAddMatingAgeEnd(builder, matingAgeEnd)
def OrganismAddMaxAge(builder, maxAge): builder.PrependUint32Slot(11, maxAge, 0)
def AddMaxAge(builder, maxAge):
    return OrganismAddMaxAge(builder, maxAge)
def OrganismAddMutationProbability(builder, mutationProbability): builder.PrependFloat32Slot(12, mutationProbability, 0.0)
def AddMutationProbability(builder, mutationProbability):
    return OrganismAddMutationProbability(builder, mutationProbability)
def OrganismAddOffspringsFactor(builder, offspringsFactor): builder.PrependFloat32Slot(13, offspringsFactor, 0.0)
def AddOffspringsFactor(builder, offspringsFactor):
    return OrganismAddOffspringsFactor(builder, offspringsFactor)
def OrganismAddHeightOnSpeed(builder, heightOnSpeed): builder.PrependFloat32Slot(14, heightOnSpeed, 0.0)
def AddHeightOnSpeed(builder, heightOnSpeed):
    return OrganismAddHeightOnSpeed(builder, heightOnSpeed)
def OrganismAddHeightOnStamina(builder, heightOnStamina): builder.PrependFloat32Slot(15, heightOnStamina, 0.0)
def AddHeightOnStamina(builder, heightOnStamina):
    return OrganismAddHeightOnStamina(builder, heightOnStamina)
def OrganismAddHeightOnVitality(builder, heightOnVitality): builder.PrependFloat32Slot(16, heightOnVitality, 0.0)
def AddHeightOnVitality(builder, heightOnVitality):
    return OrganismAddHeightOnVitality(builder, heightOnVitality)
def OrganismAddWeightOnSpeed(builder, weightOnSpeed): builder.PrependFloat32Slot(17, weightOnSpeed, 0.0)
def AddWeightOnSpeed(builder, weightOnSpeed):
    return OrganismAddWeightOnSpeed(builder, weightOnSpeed)
def OrganismAddWeightOnStamina(builder, weightOnStamina): builder.PrependFloat32Slot(18, weightOnStamina, 0.0)
def AddWeightOnStamina(builder, weightOnStamina):
    return OrganismAddWeightOnStamina(builder, weightOnStamina)
def OrganismAddWeightOnVitality(builder, weightOnVitality): builder.PrependFloat32Slot(19, weightOnVitality, 0.0)
def AddWeightOnVitality(builder, weightOnVitality):
    return OrganismAddWeightOnVitality(builder, weightOnVitality)
def OrganismAddVitalityOnAppetite(builder, vitalityOnAppetite): builder.PrependFloat32Slot(20, vitalityOnAppetite, 0.0)
def AddVitalityOnAppetite(builder, vitalityOnAppetite):
    return OrganismAddVitalityOnAppetite(builder, vitalityOnAppetite)
def OrganismAddVitalityOnSpeed(builder, vitalityOnSpeed): builder.PrependFloat32Slot(21, vitalityOnSpeed, 0.0)
def AddVitalityOnSpeed(builder, vitalityOnSpeed):
    return OrganismAddVitalityOnSpeed(builder, vitalityOnSpeed)
def OrganismAddStaminaOnAppetite(builder, staminaOnAppetite): builder.PrependFloat32Slot(22, staminaOnAppetite, 0.0)
def AddStaminaOnAppetite(builder, staminaOnAppetite):
    return OrganismAddStaminaOnAppetite(builder, staminaOnAppetite)
def OrganismAddStaminaOnSpeed(builder, staminaOnSpeed): builder.PrependFloat32Slot(23, staminaOnSpeed, 0.0)
def AddStaminaOnSpeed(builder, staminaOnSpeed):
    return OrganismAddStaminaOnSpeed(builder, staminaOnSpeed)
def OrganismAddTheoreticalMaximumBaseAppetite(builder, theoreticalMaximumBaseAppetite): builder.PrependFloat32Slot(24, theoreticalMaximumBaseAppetite, 0.0)
def AddTheoreticalMaximumBaseAppetite(builder, theoreticalMaximumBaseAppetite):
    return OrganismAddTheoreticalMaximumBaseAppetite(builder, theoreticalMaximumBaseAppetite)
def OrganismAddTheoreticalMaximumBaseHeight(builder, theoreticalMaximumBaseHeight): builder.PrependFloat32Slot(25, theoreticalMaximumBaseHeight, 0.0)
def AddTheoreticalMaximumBaseHeight(builder, theoreticalMaximumBaseHeight):
    return OrganismAddTheoreticalMaximumBaseHeight(builder, theoreticalMaximumBaseHeight)
def OrganismAddTheoreticalMaximumBaseSpeed(builder, theoreticalMaximumBaseSpeed): builder.PrependFloat32Slot(26, theoreticalMaximumBaseSpeed, 0.0)
def AddTheoreticalMaximumBaseSpeed(builder, theoreticalMaximumBaseSpeed):
    return OrganismAddTheoreticalMaximumBaseSpeed(builder, theoreticalMaximumBaseSpeed)
def OrganismAddTheoreticalMaximumBaseStamina(builder, theoreticalMaximumBaseStamina): builder.PrependFloat32Slot(27, theoreticalMaximumBaseStamina, 0.0)
def AddTheoreticalMaximumBaseStamina(builder, theoreticalMaximumBaseStamina):
    return OrganismAddTheoreticalMaximumBaseStamina(builder, theoreticalMaximumBaseStamina)
def OrganismAddTheoreticalMaximumBaseVitality(builder, theoreticalMaximumBaseVitality): builder.PrependFloat32Slot(28, theoreticalMaximumBaseVitality, 0.0)
def AddTheoreticalMaximumBaseVitality(builder, theoreticalMaximumBaseVitality):
    return OrganismAddTheoreticalMaximumBaseVitality(builder, theoreticalMaximumBaseVitality)
def OrganismAddTheoreticalMaximumBaseWeight(builder, theoreticalMaximumBaseWeight): builder.PrependFloat32Slot(29, theoreticalMaximumBaseWeight, 0.0)
def AddTheoreticalMaximumBaseWeight(builder, theoreticalMaximumBaseWeight):
    return OrganismAddTheoreticalMaximumBaseWeight(builder, theoreticalMaximumBaseWeight)
def OrganismAddTheoreticalMaximumHeight(builder, theoreticalMaximumHeight): builder.PrependFloat32Slot(30, theoreticalMaximumHeight, 0.0)
def AddTheoreticalMaximumHeight(builder, theoreticalMaximumHeight):
    return OrganismAddTheoreticalMaximumHeight(builder, theoreticalMaximumHeight)
def OrganismAddTheoreticalMaximumSpeed(builder, theoreticalMaximumSpeed): builder.PrependFloat32Slot(31, theoreticalMaximumSpeed, 0.0)
def AddTheoreticalMaximumSpeed(builder, theoreticalMaximumSpeed):
    return OrganismAddTheoreticalMaximumSpeed(builder, theoreticalMaximumSpeed)
def OrganismAddTheoreticalMaximumWeight(builder, theoreticalMaximumWeight): builder.PrependFloat32Slot(32, theoreticalMaximumWeight, 0.0)
def AddTheoreticalMaximumWeight(builder, theoreticalMaximumWeight):
    return OrganismAddTheoreticalMaximumWeight(builder, theoreticalMaximumWeight)
def OrganismAddTheoreticalMaximumHeightMultiplier(builder, theoreticalMaximumHeightMultiplier): builder.PrependFloat32Slot(33, theoreticalMaximumHeightMultiplier, 0.0)
def AddTheoreticalMaximumHeightMultiplier(builder, theoreticalMaximumHeightMultiplier):
    return OrganismAddTheoreticalMaximumHeightMultiplier(builder, theoreticalMaximumHeightMultiplier)
def OrganismAddTheoreticalMaximumSpeedMultiplier(builder, theoreticalMaximumSpeedMultiplier): builder.PrependFloat32Slot(34, theoreticalMaximumSpeedMultiplier, 0.0)
def AddTheoreticalMaximumSpeedMultiplier(builder, theoreticalMaximumSpeedMultiplier):
    return OrganismAddTheoreticalMaximumSpeedMultiplier(builder, theoreticalMaximumSpeedMultiplier)
def OrganismAddTheoreticalMaximumStaminaMultiplier(builder, theoreticalMaximumStaminaMultiplier): builder.PrependFloat32Slot(35, theoreticalMaximumStaminaMultiplier, 0.0)
def AddTheoreticalMaximumStaminaMultiplier(builder, theoreticalMaximumStaminaMultiplier):
    return OrganismAddTheoreticalMaximumStaminaMultiplier(builder, theoreticalMaximumStaminaMultiplier)
def OrganismAddTheoreticalMaximumVitalityMultiplier(builder, theoreticalMaximumVitalityMultiplier): builder.PrependFloat32Slot(36, theoreticalMaximumVitalityMultiplier, 0.0)
def AddTheoreticalMaximumVitalityMultiplier(builder, theoreticalMaximumVitalityMultiplier):
    return OrganismAddTheoreticalMaximumVitalityMultiplier(builder, theoreticalMaximumVitalityMultiplier)
def OrganismAddTheoreticalMaximumWeightMultiplier(builder, theoreticalMaximumWeightMultiplier): builder.PrependFloat32Slot(37, theoreticalMaximumWeightMultiplier, 0.0)
def AddTheoreticalMaximumWeightMultiplier(builder, theoreticalMaximumWeightMultiplier):
    return OrganismAddTheoreticalMaximumWeightMultiplier(builder, theoreticalMaximumWeightMultiplier)
def OrganismAddName(builder, name): builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return OrganismAddName(builder, name)
def OrganismAddChromosome(builder, chromosome): builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(chromosome), 0)
def AddChromosome(builder, chromosome):
    return OrganismAddChromosome(builder, chromosome)
def OrganismStartChromosomeVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartChromosomeVector(builder, numElems):
    return OrganismStartChromosomeVector(builder, numElems)
def OrganismAddGender(builder, gender): builder.PrependUint8Slot(40, gender, 0)
def AddGender(builder, gender):
    return OrganismAddGender(builder, gender)
def OrganismAddGeneration(builder, generation): builder.PrependUint32Slot(41, generation, 0)
def AddGeneration(builder, generation):
    return OrganismAddGeneration(builder, generation)
def OrganismAddImmunity(builder, immunity): builder.PrependFloat32Slot(42, immunity, 0.0)
def AddImmunity(builder, immunity):
    return OrganismAddImmunity(builder, immunity)
def OrganismAddBaseAppetite(builder, baseAppetite): builder.PrependFloat32Slot(43, baseAppetite, 0.0)
def AddBaseAppetite(builder, baseAppetite):
    return OrganismAddBaseAppetite(builder, baseAppetite)
def OrganismAddBaseHeight(builder, baseHeight): builder.PrependFloat32Slot(44, baseHeight, 0.0)
def AddBaseHeight(builder, baseHeight):
    return OrganismAddBaseHeight(builder, baseHeight)
def OrganismAddBaseSpeed(builder, baseSpeed): builder.PrependFloat32Slot(45, baseSpeed, 0.0)
def AddBaseSpeed(builder, baseSpeed):
    return OrganismAddBaseSpeed(builder, baseSpeed)
def OrganismAddBaseStamina(builder, baseStamina): builder.PrependFloat32Slot(46, baseStamina, 0.0)
def AddBaseStamina(builder, baseStamina):
    return OrganismAddBaseStamina(builder, baseStamina)
def OrganismAddBaseVitality(builder, baseVitality): builder.PrependFloat32Slot(47, baseVitality, 0.0)
def AddBaseVitality(builder, baseVitality):
    return OrganismAddBaseVitality(builder, baseVitality)
def OrganismAddBaseWeight(builder, baseWeight): builder.PrependFloat32Slot(48, baseWeight, 0.0)
def AddBaseWeight(builder, baseWeight):
    return OrganismAddBaseWeight(builder, baseWeight)
def OrganismAddHeightMultiplier(builder, heightMultiplier): builder.PrependFloat32Slot(49, heightMultiplier, 0.0)
def AddHeightMultiplier(builder, heightMultiplier):
    return OrganismAddHeightMultiplier(builder, heightMultiplier)
def OrganismAddSpeedMultiplier(builder, speedMultiplier): builder.PrependFloat32Slot(50, speedMultiplier, 0.0)
def AddSpeedMultiplier(builder, speedMultiplier):
    return OrganismAddSpeedMultiplier(builder, speedMultiplier)
def OrganismAddStaminaMultiplier(builder, staminaMultiplier): builder.PrependFloat32Slot(51, staminaMultiplier, 0.0)
def AddStaminaMultiplier(builder, staminaMultiplier):
    return OrganismAddStaminaMultiplier(builder, staminaMultiplier)
def OrganismAddVitalityMultiplier(builder, vitalityMultiplier): builder.PrependFloat32Slot(52, vitalityMultiplier, 0.0)
def AddVitalityMultiplier(builder, vitalityMultiplier):
    return OrganismAddVitalityMultiplier(builder, vitalityMultiplier)
def OrganismAddWeightMultiplier(builder, weightMultiplier): builder.PrependFloat32Slot(53, weightMultiplier, 0.0)
def AddWeightMultiplier(builder, weightMultiplier):
    return OrganismAddWeightMultiplier(builder, weightMultiplier)
def OrganismAddMaxHeight(builder, maxHeight): builder.PrependFloat32Slot(54, maxHeight, 0.0)
def AddMaxHeight(builder, maxHeight):
    return OrganismAddMaxHeight(builder, maxHeight)
def OrganismAddMaxWeight(builder, maxWeight): builder.PrependFloat32Slot(55, maxWeight, 0.0)
def AddMaxWeight(builder, maxWeight):
    return OrganismAddMaxWeight(builder, maxWeight)
def OrganismAddAge(builder, age): builder.PrependUint32Slot(56, age, 0)
def AddAge(builder, age):
    return OrganismAddAge(builder, age)
def OrganismAddHeight(builder, height): builder.PrependFloat32Slot(57, height, 0.0)
def AddHeight(builder, height):
    return OrganismAddHeight(builder, height)
def OrganismAddWeight(builder, weight): builder.PrependFloat32Slot(58, weight, 0.0)
def AddWeight(builder, weight):
    return OrganismAddWeight(builder, weight)
def OrganismAddStaticFitness(builder, staticFitness): builder.PrependFloat32Slot(59, staticFitness, 0.0)
def AddStaticFitness(builder, staticFitness):
    return OrganismAddStaticFitness(builder, staticFitness)
def OrganismAddMaxAppetiteAtAge(builder, maxAppetiteAtAge): builder.PrependFloat32Slot(60, maxAppetiteAtAge, 0.0)
def AddMaxAppetiteAtAge(builder, maxAppetiteAtAge):
    return OrganismAddMaxAppetiteAtAge(builder, maxAppetiteAtAge)
def OrganismAddMaxSpeedAtAge(builder, maxSpeedAtAge): builder.PrependFloat32Slot(61, maxSpeedAtAge, 0.0)
def AddMaxSpeedAtAge(builder, maxSpeedAtAge):
    return OrganismAddMaxSpeedAtAge(builder, maxSpeedAtAge)
def OrganismAddMaxStaminaAtAge(builder, maxStaminaAtAge): builder.PrependFloat32Slot(62, maxStaminaAtAge, 0.0)
def AddMaxStaminaAtAge(builder, maxStaminaAtAge):
    return OrganismAddMaxStaminaAtAge(builder, maxStaminaAtAge)
def OrganismAddMaxVitalityAtAge(builder, maxVitalityAtAge): builder.PrependFloat32Slot(63, maxVitalityAtAge, 0.0)
def AddMaxVitalityAtAge(builder, maxVitalityAtAge):
    return OrganismAddMaxVitalityAtAge(builder, maxVitalityAtAge)
def OrganismAddAppetite(builder, appetite): builder.PrependFloat32Slot(64, appetite, 0.0)
def AddAppetite(builder, appetite):
    return OrganismAddAppetite(builder, appetite)
def OrganismAddSpeed(builder, speed): builder.PrependFloat32Slot(65, speed, 0.0)
def AddSpeed(builder, speed):
    return OrganismAddSpeed(builder, speed)
def OrganismAddStamina(builder, stamina): builder.PrependFloat32Slot(66, stamina, 0.0)
def AddStamina(builder, stamina):
    return OrganismAddStamina(builder, stamina)
def OrganismAddVitality(builder, vitality): builder.PrependFloat32Slot(67, vitality, 0.0)
def AddVitality(builder, vitality):
    return OrganismAddVitality(builder, vitality)
def OrganismAddX(builder, X): builder.PrependUint64Slot(68, X, 0)
def AddX(builder, X):
    return OrganismAddX(builder, X)
def OrganismAddY(builder, Y): builder.PrependUint64Slot(69, Y, 0)
def AddY(builder, Y):
    return OrganismAddY(builder, Y)
def OrganismAddDynamicFitness(builder, dynamicFitness): builder.PrependFloat32Slot(70, dynamicFitness, 1.0)
def AddDynamicFitness(builder, dynamicFitness):
    return OrganismAddDynamicFitness(builder, dynamicFitness)
def OrganismAddVisionRadius(builder, visionRadius): builder.PrependFloat32Slot(71, visionRadius, 0.0)
def AddVisionRadius(builder, visionRadius):
    return OrganismAddVisionRadius(builder, visionRadius)
def OrganismAddSleepRestoreFactor(builder, sleepRestoreFactor): builder.PrependFloat32Slot(72, sleepRestoreFactor, 0.0)
def AddSleepRestoreFactor(builder, sleepRestoreFactor):
    return OrganismAddSleepRestoreFactor(builder, sleepRestoreFactor)
def OrganismAddAsleep(builder, asleep): builder.PrependUint8Slot(73, asleep, 0)
def AddAsleep(builder, asleep):
    return OrganismAddAsleep(builder, asleep)
def OrganismAddMonitor(builder, monitor): builder.PrependUint8Slot(74, monitor, 0)
def AddMonitor(builder, monitor):
    return OrganismAddMonitor(builder, monitor)
def OrganismEnd(builder): return builder.EndObject()
def End(builder):
    return OrganismEnd(builder)
import Ecosystem.ChromosomeStrand
try:
    from typing import List
except:
    pass

class OrganismT(object):

    # OrganismT
    def __init__(self):
        self.kind = None  # type: str
        self.kingdom = 0  # type: int
        self.chromosomeNumber = 0  # type: int
        self.chromosomeStructure = None  # type: List[Ecosystem.ChromosomeStrand.ChromosomeStrandT]
        self.foodChainRank = 0  # type: int
        self.sexuality = 0  # type: int
        self.ageFitnessOnDeathRatio = 0.0  # type: float
        self.conceivingProbability = 0.0  # type: float
        self.matingProbability = 0.0  # type: float
        self.matingAgeStart = 0  # type: int
        self.matingAgeEnd = 0  # type: int
        self.maxAge = 0  # type: int
        self.mutationProbability = 0.0  # type: float
        self.offspringsFactor = 0.0  # type: float
        self.heightOnSpeed = 0.0  # type: float
        self.heightOnStamina = 0.0  # type: float
        self.heightOnVitality = 0.0  # type: float
        self.weightOnSpeed = 0.0  # type: float
        self.weightOnStamina = 0.0  # type: float
        self.weightOnVitality = 0.0  # type: float
        self.vitalityOnAppetite = 0.0  # type: float
        self.vitalityOnSpeed = 0.0  # type: float
        self.staminaOnAppetite = 0.0  # type: float
        self.staminaOnSpeed = 0.0  # type: float
        self.theoreticalMaximumBaseAppetite = 0.0  # type: float
        self.theoreticalMaximumBaseHeight = 0.0  # type: float
        self.theoreticalMaximumBaseSpeed = 0.0  # type: float
        self.theoreticalMaximumBaseStamina = 0.0  # type: float
        self.theoreticalMaximumBaseVitality = 0.0  # type: float
        self.theoreticalMaximumBaseWeight = 0.0  # type: float
        self.theoreticalMaximumHeight = 0.0  # type: float
        self.theoreticalMaximumSpeed = 0.0  # type: float
        self.theoreticalMaximumWeight = 0.0  # type: float
        self.theoreticalMaximumHeightMultiplier = 0.0  # type: float
        self.theoreticalMaximumSpeedMultiplier = 0.0  # type: float
        self.theoreticalMaximumStaminaMultiplier = 0.0  # type: float
        self.theoreticalMaximumVitalityMultiplier = 0.0  # type: float
        self.theoreticalMaximumWeightMultiplier = 0.0  # type: float
        self.name = None  # type: str
        self.chromosome = None  # type: List[int]
        self.gender = 0  # type: int
        self.generation = 0  # type: int
        self.immunity = 0.0  # type: float
        self.baseAppetite = 0.0  # type: float
        self.baseHeight = 0.0  # type: float
        self.baseSpeed = 0.0  # type: float
        self.baseStamina = 0.0  # type: float
        self.baseVitality = 0.0  # type: float
        self.baseWeight = 0.0  # type: float
        self.heightMultiplier = 0.0  # type: float
        self.speedMultiplier = 0.0  # type: float
        self.staminaMultiplier = 0.0  # type: float
        self.vitalityMultiplier = 0.0  # type: float
        self.weightMultiplier = 0.0  # type: float
        self.maxHeight = 0.0  # type: float
        self.maxWeight = 0.0  # type: float
        self.age = 0  # type: int
        self.height = 0.0  # type: float
        self.weight = 0.0  # type: float
        self.staticFitness = 0.0  # type: float
        self.maxAppetiteAtAge = 0.0  # type: float
        self.maxSpeedAtAge = 0.0  # type: float
        self.maxStaminaAtAge = 0.0  # type: float
        self.maxVitalityAtAge = 0.0  # type: float
        self.appetite = 0.0  # type: float
        self.speed = 0.0  # type: float
        self.stamina = 0.0  # type: float
        self.vitality = 0.0  # type: float
        self.x = 0  # type: int
        self.y = 0  # type: int
        self.dynamicFitness = 1.0  # type: float
        self.visionRadius = 0.0  # type: float
        self.sleepRestoreFactor = 0.0  # type: float
        self.asleep = 0  # type: int
        self.monitor = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        organism = Organism()
        organism.Init(buf, pos)
        return cls.InitFromObj(organism)

    @classmethod
    def InitFromObj(cls, organism):
        x = OrganismT()
        x._UnPack(organism)
        return x

    # OrganismT
    def _UnPack(self, organism):
        if organism is None:
            return
        self.kind = organism.Kind()
        self.kingdom = organism.Kingdom()
        self.chromosomeNumber = organism.ChromosomeNumber()
        if not organism.ChromosomeStructureIsNone():
            self.chromosomeStructure = []
            for i in range(organism.ChromosomeStructureLength()):
                if organism.ChromosomeStructure(i) is None:
                    self.chromosomeStructure.append(None)
                else:
                    chromosomeStrand_ = Ecosystem.ChromosomeStrand.ChromosomeStrandT.InitFromObj(organism.ChromosomeStructure(i))
                    self.chromosomeStructure.append(chromosomeStrand_)
        self.foodChainRank = organism.FoodChainRank()
        self.sexuality = organism.Sexuality()
        self.ageFitnessOnDeathRatio = organism.AgeFitnessOnDeathRatio()
        self.conceivingProbability = organism.ConceivingProbability()
        self.matingProbability = organism.MatingProbability()
        self.matingAgeStart = organism.MatingAgeStart()
        self.matingAgeEnd = organism.MatingAgeEnd()
        self.maxAge = organism.MaxAge()
        self.mutationProbability = organism.MutationProbability()
        self.offspringsFactor = organism.OffspringsFactor()
        self.heightOnSpeed = organism.HeightOnSpeed()
        self.heightOnStamina = organism.HeightOnStamina()
        self.heightOnVitality = organism.HeightOnVitality()
        self.weightOnSpeed = organism.WeightOnSpeed()
        self.weightOnStamina = organism.WeightOnStamina()
        self.weightOnVitality = organism.WeightOnVitality()
        self.vitalityOnAppetite = organism.VitalityOnAppetite()
        self.vitalityOnSpeed = organism.VitalityOnSpeed()
        self.staminaOnAppetite = organism.StaminaOnAppetite()
        self.staminaOnSpeed = organism.StaminaOnSpeed()
        self.theoreticalMaximumBaseAppetite = organism.TheoreticalMaximumBaseAppetite()
        self.theoreticalMaximumBaseHeight = organism.TheoreticalMaximumBaseHeight()
        self.theoreticalMaximumBaseSpeed = organism.TheoreticalMaximumBaseSpeed()
        self.theoreticalMaximumBaseStamina = organism.TheoreticalMaximumBaseStamina()
        self.theoreticalMaximumBaseVitality = organism.TheoreticalMaximumBaseVitality()
        self.theoreticalMaximumBaseWeight = organism.TheoreticalMaximumBaseWeight()
        self.theoreticalMaximumHeight = organism.TheoreticalMaximumHeight()
        self.theoreticalMaximumSpeed = organism.TheoreticalMaximumSpeed()
        self.theoreticalMaximumWeight = organism.TheoreticalMaximumWeight()
        self.theoreticalMaximumHeightMultiplier = organism.TheoreticalMaximumHeightMultiplier()
        self.theoreticalMaximumSpeedMultiplier = organism.TheoreticalMaximumSpeedMultiplier()
        self.theoreticalMaximumStaminaMultiplier = organism.TheoreticalMaximumStaminaMultiplier()
        self.theoreticalMaximumVitalityMultiplier = organism.TheoreticalMaximumVitalityMultiplier()
        self.theoreticalMaximumWeightMultiplier = organism.TheoreticalMaximumWeightMultiplier()
        self.name = organism.Name()
        if not organism.ChromosomeIsNone():
            if np is None:
                self.chromosome = []
                for i in range(organism.ChromosomeLength()):
                    self.chromosome.append(organism.Chromosome(i))
            else:
                self.chromosome = organism.ChromosomeAsNumpy()
        self.gender = organism.Gender()
        self.generation = organism.Generation()
        self.immunity = organism.Immunity()
        self.baseAppetite = organism.BaseAppetite()
        self.baseHeight = organism.BaseHeight()
        self.baseSpeed = organism.BaseSpeed()
        self.baseStamina = organism.BaseStamina()
        self.baseVitality = organism.BaseVitality()
        self.baseWeight = organism.BaseWeight()
        self.heightMultiplier = organism.HeightMultiplier()
        self.speedMultiplier = organism.SpeedMultiplier()
        self.staminaMultiplier = organism.StaminaMultiplier()
        self.vitalityMultiplier = organism.VitalityMultiplier()
        self.weightMultiplier = organism.WeightMultiplier()
        self.maxHeight = organism.MaxHeight()
        self.maxWeight = organism.MaxWeight()
        self.age = organism.Age()
        self.height = organism.Height()
        self.weight = organism.Weight()
        self.staticFitness = organism.StaticFitness()
        self.maxAppetiteAtAge = organism.MaxAppetiteAtAge()
        self.maxSpeedAtAge = organism.MaxSpeedAtAge()
        self.maxStaminaAtAge = organism.MaxStaminaAtAge()
        self.maxVitalityAtAge = organism.MaxVitalityAtAge()
        self.appetite = organism.Appetite()
        self.speed = organism.Speed()
        self.stamina = organism.Stamina()
        self.vitality = organism.Vitality()
        self.x = organism.X()
        self.y = organism.Y()
        self.dynamicFitness = organism.DynamicFitness()
        self.visionRadius = organism.VisionRadius()
        self.sleepRestoreFactor = organism.SleepRestoreFactor()
        self.asleep = organism.Asleep()
        self.monitor = organism.Monitor()

    # OrganismT
    def Pack(self, builder):
        if self.kind is not None:
            kind = builder.CreateString(self.kind)
        if self.chromosomeStructure is not None:
            chromosomeStructurelist = []
            for i in range(len(self.chromosomeStructure)):
                chromosomeStructurelist.append(self.chromosomeStructure[i].Pack(builder))
            OrganismStartChromosomeStructureVector(builder, len(self.chromosomeStructure))
            for i in reversed(range(len(self.chromosomeStructure))):
                builder.PrependUOffsetTRelative(chromosomeStructurelist[i])
            chromosomeStructure = builder.EndVector()
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.chromosome is not None:
            if np is not None and type(self.chromosome) is np.ndarray:
                chromosome = builder.CreateNumpyVector(self.chromosome)
            else:
                OrganismStartChromosomeVector(builder, len(self.chromosome))
                for i in reversed(range(len(self.chromosome))):
                    builder.PrependUint8(self.chromosome[i])
                chromosome = builder.EndVector()
        OrganismStart(builder)
        if self.kind is not None:
            OrganismAddKind(builder, kind)
        OrganismAddKingdom(builder, self.kingdom)
        OrganismAddChromosomeNumber(builder, self.chromosomeNumber)
        if self.chromosomeStructure is not None:
            OrganismAddChromosomeStructure(builder, chromosomeStructure)
        OrganismAddFoodChainRank(builder, self.foodChainRank)
        OrganismAddSexuality(builder, self.sexuality)
        OrganismAddAgeFitnessOnDeathRatio(builder, self.ageFitnessOnDeathRatio)
        OrganismAddConceivingProbability(builder, self.conceivingProbability)
        OrganismAddMatingProbability(builder, self.matingProbability)
        OrganismAddMatingAgeStart(builder, self.matingAgeStart)
        OrganismAddMatingAgeEnd(builder, self.matingAgeEnd)
        OrganismAddMaxAge(builder, self.maxAge)
        OrganismAddMutationProbability(builder, self.mutationProbability)
        OrganismAddOffspringsFactor(builder, self.offspringsFactor)
        OrganismAddHeightOnSpeed(builder, self.heightOnSpeed)
        OrganismAddHeightOnStamina(builder, self.heightOnStamina)
        OrganismAddHeightOnVitality(builder, self.heightOnVitality)
        OrganismAddWeightOnSpeed(builder, self.weightOnSpeed)
        OrganismAddWeightOnStamina(builder, self.weightOnStamina)
        OrganismAddWeightOnVitality(builder, self.weightOnVitality)
        OrganismAddVitalityOnAppetite(builder, self.vitalityOnAppetite)
        OrganismAddVitalityOnSpeed(builder, self.vitalityOnSpeed)
        OrganismAddStaminaOnAppetite(builder, self.staminaOnAppetite)
        OrganismAddStaminaOnSpeed(builder, self.staminaOnSpeed)
        OrganismAddTheoreticalMaximumBaseAppetite(builder, self.theoreticalMaximumBaseAppetite)
        OrganismAddTheoreticalMaximumBaseHeight(builder, self.theoreticalMaximumBaseHeight)
        OrganismAddTheoreticalMaximumBaseSpeed(builder, self.theoreticalMaximumBaseSpeed)
        OrganismAddTheoreticalMaximumBaseStamina(builder, self.theoreticalMaximumBaseStamina)
        OrganismAddTheoreticalMaximumBaseVitality(builder, self.theoreticalMaximumBaseVitality)
        OrganismAddTheoreticalMaximumBaseWeight(builder, self.theoreticalMaximumBaseWeight)
        OrganismAddTheoreticalMaximumHeight(builder, self.theoreticalMaximumHeight)
        OrganismAddTheoreticalMaximumSpeed(builder, self.theoreticalMaximumSpeed)
        OrganismAddTheoreticalMaximumWeight(builder, self.theoreticalMaximumWeight)
        OrganismAddTheoreticalMaximumHeightMultiplier(builder, self.theoreticalMaximumHeightMultiplier)
        OrganismAddTheoreticalMaximumSpeedMultiplier(builder, self.theoreticalMaximumSpeedMultiplier)
        OrganismAddTheoreticalMaximumStaminaMultiplier(builder, self.theoreticalMaximumStaminaMultiplier)
        OrganismAddTheoreticalMaximumVitalityMultiplier(builder, self.theoreticalMaximumVitalityMultiplier)
        OrganismAddTheoreticalMaximumWeightMultiplier(builder, self.theoreticalMaximumWeightMultiplier)
        if self.name is not None:
            OrganismAddName(builder, name)
        if self.chromosome is not None:
            OrganismAddChromosome(builder, chromosome)
        OrganismAddGender(builder, self.gender)
        OrganismAddGeneration(builder, self.generation)
        OrganismAddImmunity(builder, self.immunity)
        OrganismAddBaseAppetite(builder, self.baseAppetite)
        OrganismAddBaseHeight(builder, self.baseHeight)
        OrganismAddBaseSpeed(builder, self.baseSpeed)
        OrganismAddBaseStamina(builder, self.baseStamina)
        OrganismAddBaseVitality(builder, self.baseVitality)
        OrganismAddBaseWeight(builder, self.baseWeight)
        OrganismAddHeightMultiplier(builder, self.heightMultiplier)
        OrganismAddSpeedMultiplier(builder, self.speedMultiplier)
        OrganismAddStaminaMultiplier(builder, self.staminaMultiplier)
        OrganismAddVitalityMultiplier(builder, self.vitalityMultiplier)
        OrganismAddWeightMultiplier(builder, self.weightMultiplier)
        OrganismAddMaxHeight(builder, self.maxHeight)
        OrganismAddMaxWeight(builder, self.maxWeight)
        OrganismAddAge(builder, self.age)
        OrganismAddHeight(builder, self.height)
        OrganismAddWeight(builder, self.weight)
        OrganismAddStaticFitness(builder, self.staticFitness)
        OrganismAddMaxAppetiteAtAge(builder, self.maxAppetiteAtAge)
        OrganismAddMaxSpeedAtAge(builder, self.maxSpeedAtAge)
        OrganismAddMaxStaminaAtAge(builder, self.maxStaminaAtAge)
        OrganismAddMaxVitalityAtAge(builder, self.maxVitalityAtAge)
        OrganismAddAppetite(builder, self.appetite)
        OrganismAddSpeed(builder, self.speed)
        OrganismAddStamina(builder, self.stamina)
        OrganismAddVitality(builder, self.vitality)
        OrganismAddX(builder, self.x)
        OrganismAddY(builder, self.y)
        OrganismAddDynamicFitness(builder, self.dynamicFitness)
        OrganismAddVisionRadius(builder, self.visionRadius)
        OrganismAddSleepRestoreFactor(builder, self.sleepRestoreFactor)
        OrganismAddAsleep(builder, self.asleep)
        OrganismAddMonitor(builder, self.monitor)
        organism = OrganismEnd(builder)
        return organism
