# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ecosystem

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ChromosomeStrand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ChromosomeStrand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChromosomeStrand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ChromosomeStrand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ChromosomeStrand
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ChromosomeStrand
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ChromosomeStrand
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def ChromosomeStrandStart(builder): builder.StartObject(3)
def Start(builder):
    return ChromosomeStrandStart(builder)
def ChromosomeStrandAddCode(builder, code): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)
def AddCode(builder, code):
    return ChromosomeStrandAddCode(builder, code)
def ChromosomeStrandAddStart(builder, start): builder.PrependUint16Slot(1, start, 0)
def AddStart(builder, start):
    return ChromosomeStrandAddStart(builder, start)
def ChromosomeStrandAddLength(builder, length): builder.PrependUint16Slot(2, length, 0)
def AddLength(builder, length):
    return ChromosomeStrandAddLength(builder, length)
def ChromosomeStrandEnd(builder): return builder.EndObject()
def End(builder):
    return ChromosomeStrandEnd(builder)

class ChromosomeStrandT(object):

    # ChromosomeStrandT
    def __init__(self):
        self.code = None  # type: str
        self.start = 0  # type: int
        self.length = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        chromosomeStrand = ChromosomeStrand()
        chromosomeStrand.Init(buf, pos)
        return cls.InitFromObj(chromosomeStrand)

    @classmethod
    def InitFromObj(cls, chromosomeStrand):
        x = ChromosomeStrandT()
        x._UnPack(chromosomeStrand)
        return x

    # ChromosomeStrandT
    def _UnPack(self, chromosomeStrand):
        if chromosomeStrand is None:
            return
        self.code = chromosomeStrand.Code()
        self.start = chromosomeStrand.Start()
        self.length = chromosomeStrand.Length()

    # ChromosomeStrandT
    def Pack(self, builder):
        if self.code is not None:
            code = builder.CreateString(self.code)
        ChromosomeStrandStart(builder)
        if self.code is not None:
            ChromosomeStrandAddCode(builder, code)
        ChromosomeStrandAddStart(builder, self.start)
        ChromosomeStrandAddLength(builder, self.length)
        chromosomeStrand = ChromosomeStrandEnd(builder)
        return chromosomeStrand
