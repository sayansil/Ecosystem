# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ecosystem

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class World(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = World()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorld(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # World
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # World
    def Year(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # World
    def Species(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Ecosystem.Species import Species
            obj = Species()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # World
    def SpeciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # World
    def SpeciesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def WorldStart(builder): builder.StartObject(2)
def Start(builder):
    return WorldStart(builder)
def WorldAddYear(builder, year): builder.PrependUint32Slot(0, year, 0)
def AddYear(builder, year):
    return WorldAddYear(builder, year)
def WorldAddSpecies(builder, species): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(species), 0)
def AddSpecies(builder, species):
    return WorldAddSpecies(builder, species)
def WorldStartSpeciesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSpeciesVector(builder, numElems):
    return WorldStartSpeciesVector(builder, numElems)
def WorldEnd(builder): return builder.EndObject()
def End(builder):
    return WorldEnd(builder)
import Ecosystem.Species
try:
    from typing import List
except:
    pass

class WorldT(object):

    # WorldT
    def __init__(self):
        self.year = 0  # type: int
        self.species = None  # type: List[Ecosystem.Species.SpeciesT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        world = World()
        world.Init(buf, pos+n)
        return cls.InitFromObj(world)

    @classmethod
    def InitFromObj(cls, world):
        x = WorldT()
        x._UnPack(world)
        return x

    # WorldT
    def _UnPack(self, world):
        if world is None:
            return
        self.year = world.Year()
        if not world.SpeciesIsNone():
            self.species = []
            for i in range(world.SpeciesLength()):
                if world.Species(i) is None:
                    self.species.append(None)
                else:
                    species_ = Ecosystem.Species.SpeciesT.InitFromObj(world.Species(i))
                    self.species.append(species_)

    # WorldT
    def Pack(self, builder):
        if self.species is not None:
            specieslist = []
            for i in range(len(self.species)):
                specieslist.append(self.species[i].Pack(builder))
            WorldStartSpeciesVector(builder, len(self.species))
            for i in reversed(range(len(self.species))):
                builder.PrependUOffsetTRelative(specieslist[i])
            species = builder.EndVector()
        WorldStart(builder)
        WorldAddYear(builder, self.year)
        if self.species is not None:
            WorldAddSpecies(builder, species)
        world = WorldEnd(builder)
        return world
